// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loop-closure-handler/loop_detector_node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loop-closure-handler/loop_detector_node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace loop_detector_node {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* LoopDetectorNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoopDetectorNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto() {
  protobuf_AddDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loop-closure-handler/loop_detector_node.proto");
  GOOGLE_CHECK(file != NULL);
  LoopDetectorNode_descriptor_ = file->message_type(0);
  static const int LoopDetectorNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopDetectorNode, matching_based_loop_detector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopDetectorNode, mission_ids_),
  };
  LoopDetectorNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoopDetectorNode_descriptor_,
      LoopDetectorNode::default_instance_,
      LoopDetectorNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopDetectorNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopDetectorNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoopDetectorNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoopDetectorNode_descriptor_, &LoopDetectorNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto() {
  delete LoopDetectorNode::default_instance_;
  delete LoopDetectorNode_reflection_;
}

void protobuf_AddDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::matching_based_loopclosure::proto::protobuf_AddDesc_matching_2dbased_2dloopclosure_2fmatching_5fbased_5floop_5fdetector_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-loop-closure-handler/loop_detector_nod"
    "e.proto\022\030loop_detector_node.proto\032\026mapla"
    "b-common/id.proto\032=matching-based-loopcl"
    "osure/matching_based_loop_detector.proto"
    "\"\234\001\n\020LoopDetectorNode\022a\n\034matching_based_"
    "loop_detector\030\001 \001(\0132;.matching_based_loo"
    "pclosure.proto.MatchingBasedLoopDetector"
    "\022%\n\013mission_ids\030\002 \003(\0132\020.common.proto.Id", 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loop-closure-handler/loop_detector_node.proto", &protobuf_RegisterTypes);
  LoopDetectorNode::default_instance_ = new LoopDetectorNode();
  LoopDetectorNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto {
  StaticDescriptorInitializer_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto() {
    protobuf_AddDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto();
  }
} static_descriptor_initializer_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoopDetectorNode::kMatchingBasedLoopDetectorFieldNumber;
const int LoopDetectorNode::kMissionIdsFieldNumber;
#endif  // !_MSC_VER

LoopDetectorNode::LoopDetectorNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loop_detector_node.proto.LoopDetectorNode)
}

void LoopDetectorNode::InitAsDefaultInstance() {
  matching_based_loop_detector_ = const_cast< ::matching_based_loopclosure::proto::MatchingBasedLoopDetector*>(&::matching_based_loopclosure::proto::MatchingBasedLoopDetector::default_instance());
}

LoopDetectorNode::LoopDetectorNode(const LoopDetectorNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loop_detector_node.proto.LoopDetectorNode)
}

void LoopDetectorNode::SharedCtor() {
  _cached_size_ = 0;
  matching_based_loop_detector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoopDetectorNode::~LoopDetectorNode() {
  // @@protoc_insertion_point(destructor:loop_detector_node.proto.LoopDetectorNode)
  SharedDtor();
}

void LoopDetectorNode::SharedDtor() {
  if (this != default_instance_) {
    delete matching_based_loop_detector_;
  }
}

void LoopDetectorNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoopDetectorNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopDetectorNode_descriptor_;
}

const LoopDetectorNode& LoopDetectorNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loop_2dclosure_2dhandler_2floop_5fdetector_5fnode_2eproto();
  return *default_instance_;
}

LoopDetectorNode* LoopDetectorNode::default_instance_ = NULL;

LoopDetectorNode* LoopDetectorNode::New() const {
  return new LoopDetectorNode;
}

void LoopDetectorNode::Clear() {
  if (has_matching_based_loop_detector()) {
    if (matching_based_loop_detector_ != NULL) matching_based_loop_detector_->::matching_based_loopclosure::proto::MatchingBasedLoopDetector::Clear();
  }
  mission_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoopDetectorNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:loop_detector_node.proto.LoopDetectorNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .matching_based_loopclosure.proto.MatchingBasedLoopDetector matching_based_loop_detector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_based_loop_detector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mission_ids;
        break;
      }

      // repeated .common.proto.Id mission_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_mission_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mission_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loop_detector_node.proto.LoopDetectorNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loop_detector_node.proto.LoopDetectorNode)
  return false;
#undef DO_
}

void LoopDetectorNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loop_detector_node.proto.LoopDetectorNode)
  // optional .matching_based_loopclosure.proto.MatchingBasedLoopDetector matching_based_loop_detector = 1;
  if (has_matching_based_loop_detector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matching_based_loop_detector(), output);
  }

  // repeated .common.proto.Id mission_ids = 2;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:loop_detector_node.proto.LoopDetectorNode)
}

::google::protobuf::uint8* LoopDetectorNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:loop_detector_node.proto.LoopDetectorNode)
  // optional .matching_based_loopclosure.proto.MatchingBasedLoopDetector matching_based_loop_detector = 1;
  if (has_matching_based_loop_detector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->matching_based_loop_detector(), target);
  }

  // repeated .common.proto.Id mission_ids = 2;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loop_detector_node.proto.LoopDetectorNode)
  return target;
}

int LoopDetectorNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .matching_based_loopclosure.proto.MatchingBasedLoopDetector matching_based_loop_detector = 1;
    if (has_matching_based_loop_detector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matching_based_loop_detector());
    }

  }
  // repeated .common.proto.Id mission_ids = 2;
  total_size += 1 * this->mission_ids_size();
  for (int i = 0; i < this->mission_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoopDetectorNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoopDetectorNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoopDetectorNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoopDetectorNode::MergeFrom(const LoopDetectorNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_ids_.MergeFrom(from.mission_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matching_based_loop_detector()) {
      mutable_matching_based_loop_detector()->::matching_based_loopclosure::proto::MatchingBasedLoopDetector::MergeFrom(from.matching_based_loop_detector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoopDetectorNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopDetectorNode::CopyFrom(const LoopDetectorNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopDetectorNode::IsInitialized() const {

  return true;
}

void LoopDetectorNode::Swap(LoopDetectorNode* other) {
  if (other != this) {
    std::swap(matching_based_loop_detector_, other->matching_based_loop_detector_);
    mission_ids_.Swap(&other->mission_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoopDetectorNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoopDetectorNode_descriptor_;
  metadata.reflection = LoopDetectorNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace loop_detector_node

// @@protoc_insertion_point(global_scope)
