// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: descriptor-projection/projected_image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "descriptor-projection/projected_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace loop_closure {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ProjectedImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectedImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectedImages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectedImages_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto() {
  protobuf_AddDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "descriptor-projection/projected_image.proto");
  GOOGLE_CHECK(file != NULL);
  ProjectedImage_descriptor_ = file->message_type(0);
  static const int ProjectedImage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, timestamp_nanoseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, frame_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, projected_descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, measurements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, landmarks_),
  };
  ProjectedImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjectedImage_descriptor_,
      ProjectedImage::default_instance_,
      ProjectedImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjectedImage));
  ProjectedImages_descriptor_ = file->message_type(1);
  static const int ProjectedImages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImages, projected_images_),
  };
  ProjectedImages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjectedImages_descriptor_,
      ProjectedImages::default_instance_,
      ProjectedImages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectedImages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjectedImages));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjectedImage_descriptor_, &ProjectedImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjectedImages_descriptor_, &ProjectedImages::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_descriptor_2dprojection_2fprojected_5fimage_2eproto() {
  delete ProjectedImage::default_instance_;
  delete ProjectedImage_reflection_;
  delete ProjectedImages::default_instance_;
  delete ProjectedImages_reflection_;
}

void protobuf_AddDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+descriptor-projection/projected_image."
    "proto\022\022loop_closure.proto\032\031maplab-common"
    "/eigen.proto\032\026maplab-common/id.proto\"\201\002\n"
    "\016ProjectedImage\022\035\n\025timestamp_nanoseconds"
    "\030\001 \001(\003\022#\n\tvertex_id\030\002 \001(\0132\020.common.proto"
    ".Id\022\023\n\013frame_index\030\003 \001(\r\022$\n\ndataset_id\030\004"
    " \001(\0132\020.common.proto.Id\0225\n\025projected_desc"
    "riptors\030\005 \001(\0132\026.common.proto.MatrixXf\022\024\n"
    "\014measurements\030\006 \003(\001\022#\n\tlandmarks\030\007 \003(\0132\020"
    ".common.proto.Id\"O\n\017ProjectedImages\022<\n\020p"
    "rojected_images\030\001 \003(\0132\".loop_closure.pro"
    "to.ProjectedImage", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "descriptor-projection/projected_image.proto", &protobuf_RegisterTypes);
  ProjectedImage::default_instance_ = new ProjectedImage();
  ProjectedImages::default_instance_ = new ProjectedImages();
  ProjectedImage::default_instance_->InitAsDefaultInstance();
  ProjectedImages::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_descriptor_2dprojection_2fprojected_5fimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_descriptor_2dprojection_2fprojected_5fimage_2eproto {
  StaticDescriptorInitializer_descriptor_2dprojection_2fprojected_5fimage_2eproto() {
    protobuf_AddDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto();
  }
} static_descriptor_initializer_descriptor_2dprojection_2fprojected_5fimage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProjectedImage::kTimestampNanosecondsFieldNumber;
const int ProjectedImage::kVertexIdFieldNumber;
const int ProjectedImage::kFrameIndexFieldNumber;
const int ProjectedImage::kDatasetIdFieldNumber;
const int ProjectedImage::kProjectedDescriptorsFieldNumber;
const int ProjectedImage::kMeasurementsFieldNumber;
const int ProjectedImage::kLandmarksFieldNumber;
#endif  // !_MSC_VER

ProjectedImage::ProjectedImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loop_closure.proto.ProjectedImage)
}

void ProjectedImage::InitAsDefaultInstance() {
  vertex_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  dataset_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  projected_descriptors_ = const_cast< ::common::proto::MatrixXf*>(&::common::proto::MatrixXf::default_instance());
}

ProjectedImage::ProjectedImage(const ProjectedImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loop_closure.proto.ProjectedImage)
}

void ProjectedImage::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
  vertex_id_ = NULL;
  frame_index_ = 0u;
  dataset_id_ = NULL;
  projected_descriptors_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectedImage::~ProjectedImage() {
  // @@protoc_insertion_point(destructor:loop_closure.proto.ProjectedImage)
  SharedDtor();
}

void ProjectedImage::SharedDtor() {
  if (this != default_instance_) {
    delete vertex_id_;
    delete dataset_id_;
    delete projected_descriptors_;
  }
}

void ProjectedImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectedImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectedImage_descriptor_;
}

const ProjectedImage& ProjectedImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto();
  return *default_instance_;
}

ProjectedImage* ProjectedImage::default_instance_ = NULL;

ProjectedImage* ProjectedImage::New() const {
  return new ProjectedImage;
}

void ProjectedImage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
    if (has_vertex_id()) {
      if (vertex_id_ != NULL) vertex_id_->::common::proto::Id::Clear();
    }
    frame_index_ = 0u;
    if (has_dataset_id()) {
      if (dataset_id_ != NULL) dataset_id_->::common::proto::Id::Clear();
    }
    if (has_projected_descriptors()) {
      if (projected_descriptors_ != NULL) projected_descriptors_->::common::proto::MatrixXf::Clear();
    }
  }
  measurements_.Clear();
  landmarks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjectedImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:loop_closure.proto.ProjectedImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanoseconds_)));
          set_has_timestamp_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertex_id;
        break;
      }

      // optional .common.proto.Id vertex_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vertex_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame_index;
        break;
      }

      // optional uint32 frame_index = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_index_)));
          set_has_frame_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dataset_id;
        break;
      }

      // optional .common.proto.Id dataset_id = 4;
      case 4: {
        if (tag == 34) {
         parse_dataset_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_projected_descriptors;
        break;
      }

      // optional .common.proto.MatrixXf projected_descriptors = 5;
      case 5: {
        if (tag == 42) {
         parse_projected_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projected_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_measurements;
        break;
      }

      // repeated double measurements = 6;
      case 6: {
        if (tag == 49) {
         parse_measurements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_measurements())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_measurements())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_measurements;
        if (input->ExpectTag(58)) goto parse_landmarks;
        break;
      }

      // repeated .common.proto.Id landmarks = 7;
      case 7: {
        if (tag == 58) {
         parse_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_landmarks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loop_closure.proto.ProjectedImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loop_closure.proto.ProjectedImage)
  return false;
#undef DO_
}

void ProjectedImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loop_closure.proto.ProjectedImage)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanoseconds(), output);
  }

  // optional .common.proto.Id vertex_id = 2;
  if (has_vertex_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertex_id(), output);
  }

  // optional uint32 frame_index = 3;
  if (has_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame_index(), output);
  }

  // optional .common.proto.Id dataset_id = 4;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dataset_id(), output);
  }

  // optional .common.proto.MatrixXf projected_descriptors = 5;
  if (has_projected_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->projected_descriptors(), output);
  }

  // repeated double measurements = 6;
  for (int i = 0; i < this->measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->measurements(i), output);
  }

  // repeated .common.proto.Id landmarks = 7;
  for (int i = 0; i < this->landmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->landmarks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:loop_closure.proto.ProjectedImage)
}

::google::protobuf::uint8* ProjectedImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:loop_closure.proto.ProjectedImage)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanoseconds(), target);
  }

  // optional .common.proto.Id vertex_id = 2;
  if (has_vertex_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertex_id(), target);
  }

  // optional uint32 frame_index = 3;
  if (has_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame_index(), target);
  }

  // optional .common.proto.Id dataset_id = 4;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dataset_id(), target);
  }

  // optional .common.proto.MatrixXf projected_descriptors = 5;
  if (has_projected_descriptors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->projected_descriptors(), target);
  }

  // repeated double measurements = 6;
  for (int i = 0; i < this->measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->measurements(i), target);
  }

  // repeated .common.proto.Id landmarks = 7;
  for (int i = 0; i < this->landmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->landmarks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loop_closure.proto.ProjectedImage)
  return target;
}

int ProjectedImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanoseconds = 1;
    if (has_timestamp_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanoseconds());
    }

    // optional .common.proto.Id vertex_id = 2;
    if (has_vertex_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex_id());
    }

    // optional uint32 frame_index = 3;
    if (has_frame_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_index());
    }

    // optional .common.proto.Id dataset_id = 4;
    if (has_dataset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataset_id());
    }

    // optional .common.proto.MatrixXf projected_descriptors = 5;
    if (has_projected_descriptors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->projected_descriptors());
    }

  }
  // repeated double measurements = 6;
  {
    int data_size = 0;
    data_size = 8 * this->measurements_size();
    total_size += 1 * this->measurements_size() + data_size;
  }

  // repeated .common.proto.Id landmarks = 7;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectedImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjectedImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjectedImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectedImage::MergeFrom(const ProjectedImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  measurements_.MergeFrom(from.measurements_);
  landmarks_.MergeFrom(from.landmarks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanoseconds()) {
      set_timestamp_nanoseconds(from.timestamp_nanoseconds());
    }
    if (from.has_vertex_id()) {
      mutable_vertex_id()->::common::proto::Id::MergeFrom(from.vertex_id());
    }
    if (from.has_frame_index()) {
      set_frame_index(from.frame_index());
    }
    if (from.has_dataset_id()) {
      mutable_dataset_id()->::common::proto::Id::MergeFrom(from.dataset_id());
    }
    if (from.has_projected_descriptors()) {
      mutable_projected_descriptors()->::common::proto::MatrixXf::MergeFrom(from.projected_descriptors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjectedImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectedImage::CopyFrom(const ProjectedImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectedImage::IsInitialized() const {

  return true;
}

void ProjectedImage::Swap(ProjectedImage* other) {
  if (other != this) {
    std::swap(timestamp_nanoseconds_, other->timestamp_nanoseconds_);
    std::swap(vertex_id_, other->vertex_id_);
    std::swap(frame_index_, other->frame_index_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(projected_descriptors_, other->projected_descriptors_);
    measurements_.Swap(&other->measurements_);
    landmarks_.Swap(&other->landmarks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjectedImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectedImage_descriptor_;
  metadata.reflection = ProjectedImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjectedImages::kProjectedImagesFieldNumber;
#endif  // !_MSC_VER

ProjectedImages::ProjectedImages()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:loop_closure.proto.ProjectedImages)
}

void ProjectedImages::InitAsDefaultInstance() {
}

ProjectedImages::ProjectedImages(const ProjectedImages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:loop_closure.proto.ProjectedImages)
}

void ProjectedImages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectedImages::~ProjectedImages() {
  // @@protoc_insertion_point(destructor:loop_closure.proto.ProjectedImages)
  SharedDtor();
}

void ProjectedImages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjectedImages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectedImages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectedImages_descriptor_;
}

const ProjectedImages& ProjectedImages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_descriptor_2dprojection_2fprojected_5fimage_2eproto();
  return *default_instance_;
}

ProjectedImages* ProjectedImages::default_instance_ = NULL;

ProjectedImages* ProjectedImages::New() const {
  return new ProjectedImages;
}

void ProjectedImages::Clear() {
  projected_images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjectedImages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:loop_closure.proto.ProjectedImages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .loop_closure.proto.ProjectedImage projected_images = 1;
      case 1: {
        if (tag == 10) {
         parse_projected_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_projected_images()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_projected_images;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:loop_closure.proto.ProjectedImages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:loop_closure.proto.ProjectedImages)
  return false;
#undef DO_
}

void ProjectedImages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:loop_closure.proto.ProjectedImages)
  // repeated .loop_closure.proto.ProjectedImage projected_images = 1;
  for (int i = 0; i < this->projected_images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->projected_images(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:loop_closure.proto.ProjectedImages)
}

::google::protobuf::uint8* ProjectedImages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:loop_closure.proto.ProjectedImages)
  // repeated .loop_closure.proto.ProjectedImage projected_images = 1;
  for (int i = 0; i < this->projected_images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->projected_images(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loop_closure.proto.ProjectedImages)
  return target;
}

int ProjectedImages::ByteSize() const {
  int total_size = 0;

  // repeated .loop_closure.proto.ProjectedImage projected_images = 1;
  total_size += 1 * this->projected_images_size();
  for (int i = 0; i < this->projected_images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->projected_images(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectedImages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjectedImages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjectedImages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectedImages::MergeFrom(const ProjectedImages& from) {
  GOOGLE_CHECK_NE(&from, this);
  projected_images_.MergeFrom(from.projected_images_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjectedImages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectedImages::CopyFrom(const ProjectedImages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectedImages::IsInitialized() const {

  return true;
}

void ProjectedImages::Swap(ProjectedImages* other) {
  if (other != this) {
    projected_images_.Swap(&other->projected_images_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjectedImages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectedImages_descriptor_;
  metadata.reflection = ProjectedImages_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace loop_closure

// @@protoc_insertion_point(global_scope)
