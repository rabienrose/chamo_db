// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map-resources/resource_metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map-resources/resource_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metadata {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2dresources_2fresource_5fmetadata_2eproto() {
  protobuf_AddDesc_map_2dresources_2fresource_5fmetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map-resources/resource_metadata.proto");
  GOOGLE_CHECK(file != NULL);
  MetaData_descriptor_ = file->message_type(0);
  static const int MetaData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, map_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, map_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, resource_folder_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, map_resource_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, external_resource_folders_),
  };
  MetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaData_descriptor_,
      MetaData::default_instance_,
      MetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2dresources_2fresource_5fmetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaData_descriptor_, &MetaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2dresources_2fresource_5fmetadata_2eproto() {
  delete MetaData::default_instance_;
  delete MetaData_reflection_;
}

void protobuf_AddDesc_map_2dresources_2fresource_5fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%map-resources/resource_metadata.proto\022"
    "\016metadata.proto\"\227\001\n\010MetaData\022\022\n\nmap_fold"
    "er\030\001 \001(\t\022\027\n\017map_description\030\002 \001(\t\022\036\n\026res"
    "ource_folder_in_use\030\003 \001(\005\022\033\n\023map_resourc"
    "e_folder\030\004 \001(\t\022!\n\031external_resource_fold"
    "ers\030\005 \003(\t", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map-resources/resource_metadata.proto", &protobuf_RegisterTypes);
  MetaData::default_instance_ = new MetaData();
  MetaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2dresources_2fresource_5fmetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2dresources_2fresource_5fmetadata_2eproto {
  StaticDescriptorInitializer_map_2dresources_2fresource_5fmetadata_2eproto() {
    protobuf_AddDesc_map_2dresources_2fresource_5fmetadata_2eproto();
  }
} static_descriptor_initializer_map_2dresources_2fresource_5fmetadata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MetaData::kMapFolderFieldNumber;
const int MetaData::kMapDescriptionFieldNumber;
const int MetaData::kResourceFolderInUseFieldNumber;
const int MetaData::kMapResourceFolderFieldNumber;
const int MetaData::kExternalResourceFoldersFieldNumber;
#endif  // !_MSC_VER

MetaData::MetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metadata.proto.MetaData)
}

void MetaData::InitAsDefaultInstance() {
}

MetaData::MetaData(const MetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:metadata.proto.MetaData)
}

void MetaData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_folder_in_use_ = 0;
  map_resource_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:metadata.proto.MetaData)
  SharedDtor();
}

void MetaData::SharedDtor() {
  if (map_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_folder_;
  }
  if (map_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_description_;
  }
  if (map_resource_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_resource_folder_;
  }
  if (this != default_instance_) {
  }
}

void MetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaData_descriptor_;
}

const MetaData& MetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2dresources_2fresource_5fmetadata_2eproto();
  return *default_instance_;
}

MetaData* MetaData::default_instance_ = NULL;

MetaData* MetaData::New() const {
  return new MetaData;
}

void MetaData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_map_folder()) {
      if (map_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_folder_->clear();
      }
    }
    if (has_map_description()) {
      if (map_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_description_->clear();
      }
    }
    resource_folder_in_use_ = 0;
    if (has_map_resource_folder()) {
      if (map_resource_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_resource_folder_->clear();
      }
    }
  }
  external_resource_folders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metadata.proto.MetaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_folder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_folder().data(), this->map_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_description;
        break;
      }

      // optional string map_description = 2;
      case 2: {
        if (tag == 18) {
         parse_map_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_description().data(), this->map_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resource_folder_in_use;
        break;
      }

      // optional int32 resource_folder_in_use = 3;
      case 3: {
        if (tag == 24) {
         parse_resource_folder_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_folder_in_use_)));
          set_has_resource_folder_in_use();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map_resource_folder;
        break;
      }

      // optional string map_resource_folder = 4;
      case 4: {
        if (tag == 34) {
         parse_map_resource_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_resource_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_resource_folder().data(), this->map_resource_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_resource_folder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_external_resource_folders;
        break;
      }

      // repeated string external_resource_folders = 5;
      case 5: {
        if (tag == 42) {
         parse_external_resource_folders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_resource_folders()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_resource_folders(this->external_resource_folders_size() - 1).data(),
            this->external_resource_folders(this->external_resource_folders_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "external_resource_folders");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_external_resource_folders;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metadata.proto.MetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metadata.proto.MetaData)
  return false;
#undef DO_
}

void MetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metadata.proto.MetaData)
  // optional string map_folder = 1;
  if (has_map_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_folder().data(), this->map_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_folder(), output);
  }

  // optional string map_description = 2;
  if (has_map_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_description().data(), this->map_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_description(), output);
  }

  // optional int32 resource_folder_in_use = 3;
  if (has_resource_folder_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resource_folder_in_use(), output);
  }

  // optional string map_resource_folder = 4;
  if (has_map_resource_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_resource_folder().data(), this->map_resource_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_resource_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->map_resource_folder(), output);
  }

  // repeated string external_resource_folders = 5;
  for (int i = 0; i < this->external_resource_folders_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->external_resource_folders(i).data(), this->external_resource_folders(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "external_resource_folders");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->external_resource_folders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metadata.proto.MetaData)
}

::google::protobuf::uint8* MetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:metadata.proto.MetaData)
  // optional string map_folder = 1;
  if (has_map_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_folder().data(), this->map_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_folder(), target);
  }

  // optional string map_description = 2;
  if (has_map_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_description().data(), this->map_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_description(), target);
  }

  // optional int32 resource_folder_in_use = 3;
  if (has_resource_folder_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resource_folder_in_use(), target);
  }

  // optional string map_resource_folder = 4;
  if (has_map_resource_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_resource_folder().data(), this->map_resource_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_resource_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->map_resource_folder(), target);
  }

  // repeated string external_resource_folders = 5;
  for (int i = 0; i < this->external_resource_folders_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_resource_folders(i).data(), this->external_resource_folders(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "external_resource_folders");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->external_resource_folders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metadata.proto.MetaData)
  return target;
}

int MetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string map_folder = 1;
    if (has_map_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_folder());
    }

    // optional string map_description = 2;
    if (has_map_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_description());
    }

    // optional int32 resource_folder_in_use = 3;
    if (has_resource_folder_in_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_folder_in_use());
    }

    // optional string map_resource_folder = 4;
    if (has_map_resource_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_resource_folder());
    }

  }
  // repeated string external_resource_folders = 5;
  total_size += 1 * this->external_resource_folders_size();
  for (int i = 0; i < this->external_resource_folders_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_resource_folders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  external_resource_folders_.MergeFrom(from.external_resource_folders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_folder()) {
      set_map_folder(from.map_folder());
    }
    if (from.has_map_description()) {
      set_map_description(from.map_description());
    }
    if (from.has_resource_folder_in_use()) {
      set_resource_folder_in_use(from.resource_folder_in_use());
    }
    if (from.has_map_resource_folder()) {
      set_map_resource_folder(from.map_resource_folder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {

  return true;
}

void MetaData::Swap(MetaData* other) {
  if (other != this) {
    std::swap(map_folder_, other->map_folder_);
    std::swap(map_description_, other->map_description_);
    std::swap(resource_folder_in_use_, other->resource_folder_in_use_);
    std::swap(map_resource_folder_, other->map_resource_folder_);
    external_resource_folders_.Swap(&other->external_resource_folders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaData_descriptor_;
  metadata.reflection = MetaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace metadata

// @@protoc_insertion_point(global_scope)
