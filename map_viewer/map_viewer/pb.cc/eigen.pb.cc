// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maplab-common/eigen.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maplab-common/eigen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* MatrixXf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixXf_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatrixXd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixXd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SemiStaticMatrixd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SemiStaticMatrixd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SemiStaticMatrixf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SemiStaticMatrixf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maplab_2dcommon_2feigen_2eproto() {
  protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maplab-common/eigen.proto");
  GOOGLE_CHECK(file != NULL);
  MatrixXf_descriptor_ = file->message_type(0);
  static const int MatrixXf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXf, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXf, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXf, data_),
  };
  MatrixXf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixXf_descriptor_,
      MatrixXf::default_instance_,
      MatrixXf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixXf));
  MatrixXd_descriptor_ = file->message_type(1);
  static const int MatrixXd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXd, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXd, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXd, data_),
  };
  MatrixXd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixXd_descriptor_,
      MatrixXd::default_instance_,
      MatrixXd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixXd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixXd));
  SemiStaticMatrixd_descriptor_ = file->message_type(2);
  static const int SemiStaticMatrixd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixd, data_),
  };
  SemiStaticMatrixd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SemiStaticMatrixd_descriptor_,
      SemiStaticMatrixd::default_instance_,
      SemiStaticMatrixd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SemiStaticMatrixd));
  SemiStaticMatrixf_descriptor_ = file->message_type(3);
  static const int SemiStaticMatrixf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixf, data_),
  };
  SemiStaticMatrixf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SemiStaticMatrixf_descriptor_,
      SemiStaticMatrixf::default_instance_,
      SemiStaticMatrixf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SemiStaticMatrixf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SemiStaticMatrixf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maplab_2dcommon_2feigen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixXf_descriptor_, &MatrixXf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixXd_descriptor_, &MatrixXd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SemiStaticMatrixd_descriptor_, &SemiStaticMatrixd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SemiStaticMatrixf_descriptor_, &SemiStaticMatrixf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maplab_2dcommon_2feigen_2eproto() {
  delete MatrixXf::default_instance_;
  delete MatrixXf_reflection_;
  delete MatrixXd::default_instance_;
  delete MatrixXd_reflection_;
  delete SemiStaticMatrixd::default_instance_;
  delete SemiStaticMatrixd_reflection_;
  delete SemiStaticMatrixf::default_instance_;
  delete SemiStaticMatrixf_reflection_;
}

void protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031maplab-common/eigen.proto\022\014common.prot"
    "o\"4\n\010MatrixXf\022\014\n\004rows\030\001 \001(\r\022\014\n\004cols\030\002 \001("
    "\r\022\014\n\004data\030\003 \003(\002\"4\n\010MatrixXd\022\014\n\004rows\030\001 \001("
    "\r\022\014\n\004cols\030\002 \001(\r\022\014\n\004data\030\003 \003(\001\"!\n\021SemiSta"
    "ticMatrixd\022\014\n\004data\030\001 \003(\001\"!\n\021SemiStaticMa"
    "trixf\022\014\n\004data\030\001 \003(\002", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maplab-common/eigen.proto", &protobuf_RegisterTypes);
  MatrixXf::default_instance_ = new MatrixXf();
  MatrixXd::default_instance_ = new MatrixXd();
  SemiStaticMatrixd::default_instance_ = new SemiStaticMatrixd();
  SemiStaticMatrixf::default_instance_ = new SemiStaticMatrixf();
  MatrixXf::default_instance_->InitAsDefaultInstance();
  MatrixXd::default_instance_->InitAsDefaultInstance();
  SemiStaticMatrixd::default_instance_->InitAsDefaultInstance();
  SemiStaticMatrixf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maplab_2dcommon_2feigen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maplab_2dcommon_2feigen_2eproto {
  StaticDescriptorInitializer_maplab_2dcommon_2feigen_2eproto() {
    protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  }
} static_descriptor_initializer_maplab_2dcommon_2feigen_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MatrixXf::kRowsFieldNumber;
const int MatrixXf::kColsFieldNumber;
const int MatrixXf::kDataFieldNumber;
#endif  // !_MSC_VER

MatrixXf::MatrixXf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.proto.MatrixXf)
}

void MatrixXf::InitAsDefaultInstance() {
}

MatrixXf::MatrixXf(const MatrixXf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.proto.MatrixXf)
}

void MatrixXf::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixXf::~MatrixXf() {
  // @@protoc_insertion_point(destructor:common.proto.MatrixXf)
  SharedDtor();
}

void MatrixXf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatrixXf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixXf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixXf_descriptor_;
}

const MatrixXf& MatrixXf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  return *default_instance_;
}

MatrixXf* MatrixXf::default_instance_ = NULL;

MatrixXf* MatrixXf::New() const {
  return new MatrixXf;
}

void MatrixXf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatrixXf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rows_, cols_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixXf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.proto.MatrixXf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional uint32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // repeated float data = 3;
      case 3: {
        if (tag == 29) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.proto.MatrixXf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.proto.MatrixXf)
  return false;
#undef DO_
}

void MatrixXf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.proto.MatrixXf)
  // optional uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // optional uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated float data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.proto.MatrixXf)
}

::google::protobuf::uint8* MatrixXf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.proto.MatrixXf)
  // optional uint32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // optional uint32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated float data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.proto.MatrixXf)
  return target;
}

int MatrixXf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional uint32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  // repeated float data = 3;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixXf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixXf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixXf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixXf::MergeFrom(const MatrixXf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixXf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixXf::CopyFrom(const MatrixXf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixXf::IsInitialized() const {

  return true;
}

void MatrixXf::Swap(MatrixXf* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixXf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixXf_descriptor_;
  metadata.reflection = MatrixXf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatrixXd::kRowsFieldNumber;
const int MatrixXd::kColsFieldNumber;
const int MatrixXd::kDataFieldNumber;
#endif  // !_MSC_VER

MatrixXd::MatrixXd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.proto.MatrixXd)
}

void MatrixXd::InitAsDefaultInstance() {
}

MatrixXd::MatrixXd(const MatrixXd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.proto.MatrixXd)
}

void MatrixXd::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixXd::~MatrixXd() {
  // @@protoc_insertion_point(destructor:common.proto.MatrixXd)
  SharedDtor();
}

void MatrixXd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatrixXd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixXd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixXd_descriptor_;
}

const MatrixXd& MatrixXd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  return *default_instance_;
}

MatrixXd* MatrixXd::default_instance_ = NULL;

MatrixXd* MatrixXd::New() const {
  return new MatrixXd;
}

void MatrixXd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatrixXd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rows_, cols_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixXd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.proto.MatrixXd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional uint32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (tag == 25) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.proto.MatrixXd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.proto.MatrixXd)
  return false;
#undef DO_
}

void MatrixXd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.proto.MatrixXd)
  // optional uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // optional uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.proto.MatrixXd)
}

::google::protobuf::uint8* MatrixXd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.proto.MatrixXd)
  // optional uint32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // optional uint32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.proto.MatrixXd)
  return target;
}

int MatrixXd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional uint32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixXd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixXd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixXd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixXd::MergeFrom(const MatrixXd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixXd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixXd::CopyFrom(const MatrixXd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixXd::IsInitialized() const {

  return true;
}

void MatrixXd::Swap(MatrixXd* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixXd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixXd_descriptor_;
  metadata.reflection = MatrixXd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SemiStaticMatrixd::kDataFieldNumber;
#endif  // !_MSC_VER

SemiStaticMatrixd::SemiStaticMatrixd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.proto.SemiStaticMatrixd)
}

void SemiStaticMatrixd::InitAsDefaultInstance() {
}

SemiStaticMatrixd::SemiStaticMatrixd(const SemiStaticMatrixd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.proto.SemiStaticMatrixd)
}

void SemiStaticMatrixd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SemiStaticMatrixd::~SemiStaticMatrixd() {
  // @@protoc_insertion_point(destructor:common.proto.SemiStaticMatrixd)
  SharedDtor();
}

void SemiStaticMatrixd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SemiStaticMatrixd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SemiStaticMatrixd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemiStaticMatrixd_descriptor_;
}

const SemiStaticMatrixd& SemiStaticMatrixd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  return *default_instance_;
}

SemiStaticMatrixd* SemiStaticMatrixd::default_instance_ = NULL;

SemiStaticMatrixd* SemiStaticMatrixd::New() const {
  return new SemiStaticMatrixd;
}

void SemiStaticMatrixd::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SemiStaticMatrixd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.proto.SemiStaticMatrixd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (tag == 9) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.proto.SemiStaticMatrixd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.proto.SemiStaticMatrixd)
  return false;
#undef DO_
}

void SemiStaticMatrixd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.proto.SemiStaticMatrixd)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.proto.SemiStaticMatrixd)
}

::google::protobuf::uint8* SemiStaticMatrixd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.proto.SemiStaticMatrixd)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.proto.SemiStaticMatrixd)
  return target;
}

int SemiStaticMatrixd::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SemiStaticMatrixd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SemiStaticMatrixd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SemiStaticMatrixd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SemiStaticMatrixd::MergeFrom(const SemiStaticMatrixd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SemiStaticMatrixd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemiStaticMatrixd::CopyFrom(const SemiStaticMatrixd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemiStaticMatrixd::IsInitialized() const {

  return true;
}

void SemiStaticMatrixd::Swap(SemiStaticMatrixd* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SemiStaticMatrixd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SemiStaticMatrixd_descriptor_;
  metadata.reflection = SemiStaticMatrixd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SemiStaticMatrixf::kDataFieldNumber;
#endif  // !_MSC_VER

SemiStaticMatrixf::SemiStaticMatrixf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.proto.SemiStaticMatrixf)
}

void SemiStaticMatrixf::InitAsDefaultInstance() {
}

SemiStaticMatrixf::SemiStaticMatrixf(const SemiStaticMatrixf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.proto.SemiStaticMatrixf)
}

void SemiStaticMatrixf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SemiStaticMatrixf::~SemiStaticMatrixf() {
  // @@protoc_insertion_point(destructor:common.proto.SemiStaticMatrixf)
  SharedDtor();
}

void SemiStaticMatrixf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SemiStaticMatrixf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SemiStaticMatrixf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SemiStaticMatrixf_descriptor_;
}

const SemiStaticMatrixf& SemiStaticMatrixf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  return *default_instance_;
}

SemiStaticMatrixf* SemiStaticMatrixf::default_instance_ = NULL;

SemiStaticMatrixf* SemiStaticMatrixf::New() const {
  return new SemiStaticMatrixf;
}

void SemiStaticMatrixf::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SemiStaticMatrixf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.proto.SemiStaticMatrixf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (tag == 13) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.proto.SemiStaticMatrixf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.proto.SemiStaticMatrixf)
  return false;
#undef DO_
}

void SemiStaticMatrixf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.proto.SemiStaticMatrixf)
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:common.proto.SemiStaticMatrixf)
}

::google::protobuf::uint8* SemiStaticMatrixf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.proto.SemiStaticMatrixf)
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.proto.SemiStaticMatrixf)
  return target;
}

int SemiStaticMatrixf::ByteSize() const {
  int total_size = 0;

  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SemiStaticMatrixf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SemiStaticMatrixf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SemiStaticMatrixf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SemiStaticMatrixf::MergeFrom(const SemiStaticMatrixf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SemiStaticMatrixf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemiStaticMatrixf::CopyFrom(const SemiStaticMatrixf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemiStaticMatrixf::IsInitialized() const {

  return true;
}

void SemiStaticMatrixf::Swap(SemiStaticMatrixf* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SemiStaticMatrixf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SemiStaticMatrixf_descriptor_;
  metadata.reflection = SemiStaticMatrixf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace common

// @@protoc_insertion_point(global_scope)
