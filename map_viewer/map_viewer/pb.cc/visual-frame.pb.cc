// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aslam-serialization/visual-frame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aslam-serialization/visual-frame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aslam {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* VisualFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisualNFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualNFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aslam_2dserialization_2fvisual_2dframe_2eproto() {
  protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aslam-serialization/visual-frame.proto");
  GOOGLE_CHECK(file != NULL);
  VisualFrame_descriptor_ = file->message_type(0);
  static const int VisualFrame_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, keypoint_measurements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, keypoint_measurement_sigmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, keypoint_descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, keypoint_descriptor_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, landmark_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, descriptor_scales_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, track_ids_),
  };
  VisualFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualFrame_descriptor_,
      VisualFrame::default_instance_,
      VisualFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualFrame));
  VisualNFrame_descriptor_ = file->message_type(1);
  static const int VisualNFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualNFrame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualNFrame, frames_),
  };
  VisualNFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisualNFrame_descriptor_,
      VisualNFrame::default_instance_,
      VisualNFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualNFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualNFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisualNFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aslam_2dserialization_2fvisual_2dframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualFrame_descriptor_, &VisualFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisualNFrame_descriptor_, &VisualNFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aslam_2dserialization_2fvisual_2dframe_2eproto() {
  delete VisualFrame::default_instance_;
  delete VisualFrame_reflection_;
  delete VisualNFrame::default_instance_;
  delete VisualNFrame_reflection_;
}

void protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&aslam-serialization/visual-frame.proto"
    "\022\013aslam.proto\032\026maplab-common/id.proto\"\252\002"
    "\n\013VisualFrame\022\034\n\002id\030\001 \001(\0132\020.common.proto"
    ".Id\022\021\n\ttimestamp\030\002 \001(\003\022\035\n\025keypoint_measu"
    "rements\030\003 \003(\001\022#\n\033keypoint_measurement_si"
    "gmas\030\004 \003(\001\022\034\n\024keypoint_descriptors\030\005 \001(\014"
    "\022 \n\030keypoint_descriptor_size\030\006 \001(\r\022&\n\014la"
    "ndmark_ids\030\007 \003(\0132\020.common.proto.Id\022\031\n\021de"
    "scriptor_scales\030\010 \003(\001\022\020\n\010is_valid\030\t \001(\010\022"
    "\021\n\ttrack_ids\030\n \003(\005\"V\n\014VisualNFrame\022\034\n\002id"
    "\030\001 \001(\0132\020.common.proto.Id\022(\n\006frames\030\002 \003(\013"
    "2\030.aslam.proto.VisualFrame", 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aslam-serialization/visual-frame.proto", &protobuf_RegisterTypes);
  VisualFrame::default_instance_ = new VisualFrame();
  VisualNFrame::default_instance_ = new VisualNFrame();
  VisualFrame::default_instance_->InitAsDefaultInstance();
  VisualNFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aslam_2dserialization_2fvisual_2dframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aslam_2dserialization_2fvisual_2dframe_2eproto {
  StaticDescriptorInitializer_aslam_2dserialization_2fvisual_2dframe_2eproto() {
    protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto();
  }
} static_descriptor_initializer_aslam_2dserialization_2fvisual_2dframe_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VisualFrame::kIdFieldNumber;
const int VisualFrame::kTimestampFieldNumber;
const int VisualFrame::kKeypointMeasurementsFieldNumber;
const int VisualFrame::kKeypointMeasurementSigmasFieldNumber;
const int VisualFrame::kKeypointDescriptorsFieldNumber;
const int VisualFrame::kKeypointDescriptorSizeFieldNumber;
const int VisualFrame::kLandmarkIdsFieldNumber;
const int VisualFrame::kDescriptorScalesFieldNumber;
const int VisualFrame::kIsValidFieldNumber;
const int VisualFrame::kTrackIdsFieldNumber;
#endif  // !_MSC_VER

VisualFrame::VisualFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aslam.proto.VisualFrame)
}

void VisualFrame::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

VisualFrame::VisualFrame(const VisualFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aslam.proto.VisualFrame)
}

void VisualFrame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  keypoint_descriptors_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keypoint_descriptor_size_ = 0u;
  is_valid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualFrame::~VisualFrame() {
  // @@protoc_insertion_point(destructor:aslam.proto.VisualFrame)
  SharedDtor();
}

void VisualFrame::SharedDtor() {
  if (keypoint_descriptors_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keypoint_descriptors_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void VisualFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualFrame_descriptor_;
}

const VisualFrame& VisualFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto();
  return *default_instance_;
}

VisualFrame* VisualFrame::default_instance_ = NULL;

VisualFrame* VisualFrame::New() const {
  return new VisualFrame;
}

void VisualFrame::Clear() {
  if (_has_bits_[0 / 32] & 51) {
    if (has_id()) {
      if (id_ != NULL) id_->::common::proto::Id::Clear();
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_keypoint_descriptors()) {
      if (keypoint_descriptors_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keypoint_descriptors_->clear();
      }
    }
    keypoint_descriptor_size_ = 0u;
  }
  is_valid_ = false;
  keypoint_measurements_.Clear();
  keypoint_measurement_sigmas_.Clear();
  landmark_ids_.Clear();
  descriptor_scales_.Clear();
  track_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aslam.proto.VisualFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_keypoint_measurements;
        break;
      }

      // repeated double keypoint_measurements = 3;
      case 3: {
        if (tag == 25) {
         parse_keypoint_measurements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_keypoint_measurements())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_keypoint_measurements())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_keypoint_measurements;
        if (input->ExpectTag(33)) goto parse_keypoint_measurement_sigmas;
        break;
      }

      // repeated double keypoint_measurement_sigmas = 4;
      case 4: {
        if (tag == 33) {
         parse_keypoint_measurement_sigmas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_keypoint_measurement_sigmas())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_keypoint_measurement_sigmas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_keypoint_measurement_sigmas;
        if (input->ExpectTag(42)) goto parse_keypoint_descriptors;
        break;
      }

      // optional bytes keypoint_descriptors = 5;
      case 5: {
        if (tag == 42) {
         parse_keypoint_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keypoint_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keypoint_descriptor_size;
        break;
      }

      // optional uint32 keypoint_descriptor_size = 6;
      case 6: {
        if (tag == 48) {
         parse_keypoint_descriptor_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keypoint_descriptor_size_)));
          set_has_keypoint_descriptor_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_landmark_ids;
        break;
      }

      // repeated .common.proto.Id landmark_ids = 7;
      case 7: {
        if (tag == 58) {
         parse_landmark_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_landmark_ids;
        if (input->ExpectTag(65)) goto parse_descriptor_scales;
        break;
      }

      // repeated double descriptor_scales = 8;
      case 8: {
        if (tag == 65) {
         parse_descriptor_scales:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_descriptor_scales())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_descriptor_scales())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_descriptor_scales;
        if (input->ExpectTag(72)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 9;
      case 9: {
        if (tag == 72) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
          set_has_is_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_track_ids;
        break;
      }

      // repeated int32 track_ids = 10;
      case 10: {
        if (tag == 80) {
         parse_track_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_track_ids())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_track_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_track_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aslam.proto.VisualFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aslam.proto.VisualFrame)
  return false;
#undef DO_
}

void VisualFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aslam.proto.VisualFrame)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // repeated double keypoint_measurements = 3;
  for (int i = 0; i < this->keypoint_measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->keypoint_measurements(i), output);
  }

  // repeated double keypoint_measurement_sigmas = 4;
  for (int i = 0; i < this->keypoint_measurement_sigmas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->keypoint_measurement_sigmas(i), output);
  }

  // optional bytes keypoint_descriptors = 5;
  if (has_keypoint_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->keypoint_descriptors(), output);
  }

  // optional uint32 keypoint_descriptor_size = 6;
  if (has_keypoint_descriptor_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->keypoint_descriptor_size(), output);
  }

  // repeated .common.proto.Id landmark_ids = 7;
  for (int i = 0; i < this->landmark_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->landmark_ids(i), output);
  }

  // repeated double descriptor_scales = 8;
  for (int i = 0; i < this->descriptor_scales_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->descriptor_scales(i), output);
  }

  // optional bool is_valid = 9;
  if (has_is_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_valid(), output);
  }

  // repeated int32 track_ids = 10;
  for (int i = 0; i < this->track_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->track_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aslam.proto.VisualFrame)
}

::google::protobuf::uint8* VisualFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aslam.proto.VisualFrame)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional int64 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // repeated double keypoint_measurements = 3;
  for (int i = 0; i < this->keypoint_measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->keypoint_measurements(i), target);
  }

  // repeated double keypoint_measurement_sigmas = 4;
  for (int i = 0; i < this->keypoint_measurement_sigmas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->keypoint_measurement_sigmas(i), target);
  }

  // optional bytes keypoint_descriptors = 5;
  if (has_keypoint_descriptors()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->keypoint_descriptors(), target);
  }

  // optional uint32 keypoint_descriptor_size = 6;
  if (has_keypoint_descriptor_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->keypoint_descriptor_size(), target);
  }

  // repeated .common.proto.Id landmark_ids = 7;
  for (int i = 0; i < this->landmark_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->landmark_ids(i), target);
  }

  // repeated double descriptor_scales = 8;
  for (int i = 0; i < this->descriptor_scales_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->descriptor_scales(i), target);
  }

  // optional bool is_valid = 9;
  if (has_is_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_valid(), target);
  }

  // repeated int32 track_ids = 10;
  for (int i = 0; i < this->track_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->track_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aslam.proto.VisualFrame)
  return target;
}

int VisualFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bytes keypoint_descriptors = 5;
    if (has_keypoint_descriptors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keypoint_descriptors());
    }

    // optional uint32 keypoint_descriptor_size = 6;
    if (has_keypoint_descriptor_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keypoint_descriptor_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_valid = 9;
    if (has_is_valid()) {
      total_size += 1 + 1;
    }

  }
  // repeated double keypoint_measurements = 3;
  {
    int data_size = 0;
    data_size = 8 * this->keypoint_measurements_size();
    total_size += 1 * this->keypoint_measurements_size() + data_size;
  }

  // repeated double keypoint_measurement_sigmas = 4;
  {
    int data_size = 0;
    data_size = 8 * this->keypoint_measurement_sigmas_size();
    total_size += 1 * this->keypoint_measurement_sigmas_size() + data_size;
  }

  // repeated .common.proto.Id landmark_ids = 7;
  total_size += 1 * this->landmark_ids_size();
  for (int i = 0; i < this->landmark_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_ids(i));
  }

  // repeated double descriptor_scales = 8;
  {
    int data_size = 0;
    data_size = 8 * this->descriptor_scales_size();
    total_size += 1 * this->descriptor_scales_size() + data_size;
  }

  // repeated int32 track_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->track_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->track_ids(i));
    }
    total_size += 1 * this->track_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualFrame::MergeFrom(const VisualFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypoint_measurements_.MergeFrom(from.keypoint_measurements_);
  keypoint_measurement_sigmas_.MergeFrom(from.keypoint_measurement_sigmas_);
  landmark_ids_.MergeFrom(from.landmark_ids_);
  descriptor_scales_.MergeFrom(from.descriptor_scales_);
  track_ids_.MergeFrom(from.track_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_keypoint_descriptors()) {
      set_keypoint_descriptors(from.keypoint_descriptors());
    }
    if (from.has_keypoint_descriptor_size()) {
      set_keypoint_descriptor_size(from.keypoint_descriptor_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_valid()) {
      set_is_valid(from.is_valid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualFrame::CopyFrom(const VisualFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualFrame::IsInitialized() const {

  return true;
}

void VisualFrame::Swap(VisualFrame* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timestamp_, other->timestamp_);
    keypoint_measurements_.Swap(&other->keypoint_measurements_);
    keypoint_measurement_sigmas_.Swap(&other->keypoint_measurement_sigmas_);
    std::swap(keypoint_descriptors_, other->keypoint_descriptors_);
    std::swap(keypoint_descriptor_size_, other->keypoint_descriptor_size_);
    landmark_ids_.Swap(&other->landmark_ids_);
    descriptor_scales_.Swap(&other->descriptor_scales_);
    std::swap(is_valid_, other->is_valid_);
    track_ids_.Swap(&other->track_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualFrame_descriptor_;
  metadata.reflection = VisualFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisualNFrame::kIdFieldNumber;
const int VisualNFrame::kFramesFieldNumber;
#endif  // !_MSC_VER

VisualNFrame::VisualNFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aslam.proto.VisualNFrame)
}

void VisualNFrame::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

VisualNFrame::VisualNFrame(const VisualNFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aslam.proto.VisualNFrame)
}

void VisualNFrame::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisualNFrame::~VisualNFrame() {
  // @@protoc_insertion_point(destructor:aslam.proto.VisualNFrame)
  SharedDtor();
}

void VisualNFrame::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void VisualNFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualNFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualNFrame_descriptor_;
}

const VisualNFrame& VisualNFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto();
  return *default_instance_;
}

VisualNFrame* VisualNFrame::default_instance_ = NULL;

VisualNFrame* VisualNFrame::New() const {
  return new VisualNFrame;
}

void VisualNFrame::Clear() {
  if (has_id()) {
    if (id_ != NULL) id_->::common::proto::Id::Clear();
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisualNFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aslam.proto.VisualNFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }

      // repeated .aslam.proto.VisualFrame frames = 2;
      case 2: {
        if (tag == 18) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aslam.proto.VisualNFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aslam.proto.VisualNFrame)
  return false;
#undef DO_
}

void VisualNFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aslam.proto.VisualNFrame)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .aslam.proto.VisualFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aslam.proto.VisualNFrame)
}

::google::protobuf::uint8* VisualNFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aslam.proto.VisualNFrame)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .aslam.proto.VisualFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aslam.proto.VisualNFrame)
  return target;
}

int VisualNFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated .aslam.proto.VisualFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualNFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisualNFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisualNFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisualNFrame::MergeFrom(const VisualNFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisualNFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualNFrame::CopyFrom(const VisualNFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualNFrame::IsInitialized() const {

  return true;
}

void VisualNFrame::Swap(VisualNFrame* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisualNFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualNFrame_descriptor_;
  metadata.reflection = VisualNFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aslam

// @@protoc_insertion_point(global_scope)
