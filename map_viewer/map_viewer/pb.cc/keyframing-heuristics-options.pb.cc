// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map-sparsification/keyframing-heuristics-options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map-sparsification/keyframing-heuristics-options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace map_sparsification {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* KeyframingHeuristicsOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyframingHeuristicsOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto() {
  protobuf_AddDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map-sparsification/keyframing-heuristics-options.proto");
  GOOGLE_CHECK(file != NULL);
  KeyframingHeuristicsOptions_descriptor_ = file->message_type(0);
  static const int KeyframingHeuristicsOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, kf_distance_threshold_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, kf_rotation_threshold_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, kf_every_nth_vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, kf_min_shared_landmarks_obs_),
  };
  KeyframingHeuristicsOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyframingHeuristicsOptions_descriptor_,
      KeyframingHeuristicsOptions::default_instance_,
      KeyframingHeuristicsOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyframingHeuristicsOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyframingHeuristicsOptions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyframingHeuristicsOptions_descriptor_, &KeyframingHeuristicsOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto() {
  delete KeyframingHeuristicsOptions::default_instance_;
  delete KeyframingHeuristicsOptions_reflection_;
}

void protobuf_AddDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n6map-sparsification/keyframing-heuristi"
    "cs-options.proto\022\030map_sparsification.pro"
    "to\"\243\001\n\033KeyframingHeuristicsOptions\022\037\n\027kf"
    "_distance_threshold_m\030\001 \001(\001\022!\n\031kf_rotati"
    "on_threshold_deg\030\002 \001(\001\022\033\n\023kf_every_nth_v"
    "ertex\030\003 \001(\004\022#\n\033kf_min_shared_landmarks_o"
    "bs\030\004 \001(\004", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map-sparsification/keyframing-heuristics-options.proto", &protobuf_RegisterTypes);
  KeyframingHeuristicsOptions::default_instance_ = new KeyframingHeuristicsOptions();
  KeyframingHeuristicsOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto {
  StaticDescriptorInitializer_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto() {
    protobuf_AddDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto();
  }
} static_descriptor_initializer_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyframingHeuristicsOptions::kKfDistanceThresholdMFieldNumber;
const int KeyframingHeuristicsOptions::kKfRotationThresholdDegFieldNumber;
const int KeyframingHeuristicsOptions::kKfEveryNthVertexFieldNumber;
const int KeyframingHeuristicsOptions::kKfMinSharedLandmarksObsFieldNumber;
#endif  // !_MSC_VER

KeyframingHeuristicsOptions::KeyframingHeuristicsOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map_sparsification.proto.KeyframingHeuristicsOptions)
}

void KeyframingHeuristicsOptions::InitAsDefaultInstance() {
}

KeyframingHeuristicsOptions::KeyframingHeuristicsOptions(const KeyframingHeuristicsOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:map_sparsification.proto.KeyframingHeuristicsOptions)
}

void KeyframingHeuristicsOptions::SharedCtor() {
  _cached_size_ = 0;
  kf_distance_threshold_m_ = 0;
  kf_rotation_threshold_deg_ = 0;
  kf_every_nth_vertex_ = GOOGLE_ULONGLONG(0);
  kf_min_shared_landmarks_obs_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyframingHeuristicsOptions::~KeyframingHeuristicsOptions() {
  // @@protoc_insertion_point(destructor:map_sparsification.proto.KeyframingHeuristicsOptions)
  SharedDtor();
}

void KeyframingHeuristicsOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyframingHeuristicsOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyframingHeuristicsOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyframingHeuristicsOptions_descriptor_;
}

const KeyframingHeuristicsOptions& KeyframingHeuristicsOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2dsparsification_2fkeyframing_2dheuristics_2doptions_2eproto();
  return *default_instance_;
}

KeyframingHeuristicsOptions* KeyframingHeuristicsOptions::default_instance_ = NULL;

KeyframingHeuristicsOptions* KeyframingHeuristicsOptions::New() const {
  return new KeyframingHeuristicsOptions;
}

void KeyframingHeuristicsOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeyframingHeuristicsOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kf_distance_threshold_m_, kf_min_shared_landmarks_obs_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyframingHeuristicsOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:map_sparsification.proto.KeyframingHeuristicsOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double kf_distance_threshold_m = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kf_distance_threshold_m_)));
          set_has_kf_distance_threshold_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_kf_rotation_threshold_deg;
        break;
      }

      // optional double kf_rotation_threshold_deg = 2;
      case 2: {
        if (tag == 17) {
         parse_kf_rotation_threshold_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kf_rotation_threshold_deg_)));
          set_has_kf_rotation_threshold_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kf_every_nth_vertex;
        break;
      }

      // optional uint64 kf_every_nth_vertex = 3;
      case 3: {
        if (tag == 24) {
         parse_kf_every_nth_vertex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kf_every_nth_vertex_)));
          set_has_kf_every_nth_vertex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kf_min_shared_landmarks_obs;
        break;
      }

      // optional uint64 kf_min_shared_landmarks_obs = 4;
      case 4: {
        if (tag == 32) {
         parse_kf_min_shared_landmarks_obs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kf_min_shared_landmarks_obs_)));
          set_has_kf_min_shared_landmarks_obs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:map_sparsification.proto.KeyframingHeuristicsOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:map_sparsification.proto.KeyframingHeuristicsOptions)
  return false;
#undef DO_
}

void KeyframingHeuristicsOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:map_sparsification.proto.KeyframingHeuristicsOptions)
  // optional double kf_distance_threshold_m = 1;
  if (has_kf_distance_threshold_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->kf_distance_threshold_m(), output);
  }

  // optional double kf_rotation_threshold_deg = 2;
  if (has_kf_rotation_threshold_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->kf_rotation_threshold_deg(), output);
  }

  // optional uint64 kf_every_nth_vertex = 3;
  if (has_kf_every_nth_vertex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kf_every_nth_vertex(), output);
  }

  // optional uint64 kf_min_shared_landmarks_obs = 4;
  if (has_kf_min_shared_landmarks_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kf_min_shared_landmarks_obs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:map_sparsification.proto.KeyframingHeuristicsOptions)
}

::google::protobuf::uint8* KeyframingHeuristicsOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:map_sparsification.proto.KeyframingHeuristicsOptions)
  // optional double kf_distance_threshold_m = 1;
  if (has_kf_distance_threshold_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->kf_distance_threshold_m(), target);
  }

  // optional double kf_rotation_threshold_deg = 2;
  if (has_kf_rotation_threshold_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->kf_rotation_threshold_deg(), target);
  }

  // optional uint64 kf_every_nth_vertex = 3;
  if (has_kf_every_nth_vertex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kf_every_nth_vertex(), target);
  }

  // optional uint64 kf_min_shared_landmarks_obs = 4;
  if (has_kf_min_shared_landmarks_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kf_min_shared_landmarks_obs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map_sparsification.proto.KeyframingHeuristicsOptions)
  return target;
}

int KeyframingHeuristicsOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double kf_distance_threshold_m = 1;
    if (has_kf_distance_threshold_m()) {
      total_size += 1 + 8;
    }

    // optional double kf_rotation_threshold_deg = 2;
    if (has_kf_rotation_threshold_deg()) {
      total_size += 1 + 8;
    }

    // optional uint64 kf_every_nth_vertex = 3;
    if (has_kf_every_nth_vertex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kf_every_nth_vertex());
    }

    // optional uint64 kf_min_shared_landmarks_obs = 4;
    if (has_kf_min_shared_landmarks_obs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kf_min_shared_landmarks_obs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyframingHeuristicsOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyframingHeuristicsOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyframingHeuristicsOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyframingHeuristicsOptions::MergeFrom(const KeyframingHeuristicsOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kf_distance_threshold_m()) {
      set_kf_distance_threshold_m(from.kf_distance_threshold_m());
    }
    if (from.has_kf_rotation_threshold_deg()) {
      set_kf_rotation_threshold_deg(from.kf_rotation_threshold_deg());
    }
    if (from.has_kf_every_nth_vertex()) {
      set_kf_every_nth_vertex(from.kf_every_nth_vertex());
    }
    if (from.has_kf_min_shared_landmarks_obs()) {
      set_kf_min_shared_landmarks_obs(from.kf_min_shared_landmarks_obs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyframingHeuristicsOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyframingHeuristicsOptions::CopyFrom(const KeyframingHeuristicsOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyframingHeuristicsOptions::IsInitialized() const {

  return true;
}

void KeyframingHeuristicsOptions::Swap(KeyframingHeuristicsOptions* other) {
  if (other != this) {
    std::swap(kf_distance_threshold_m_, other->kf_distance_threshold_m_);
    std::swap(kf_rotation_threshold_deg_, other->kf_rotation_threshold_deg_);
    std::swap(kf_every_nth_vertex_, other->kf_every_nth_vertex_);
    std::swap(kf_min_shared_landmarks_obs_, other->kf_min_shared_landmarks_obs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyframingHeuristicsOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyframingHeuristicsOptions_descriptor_;
  metadata.reflection = KeyframingHeuristicsOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace map_sparsification

// @@protoc_insertion_point(global_scope)
