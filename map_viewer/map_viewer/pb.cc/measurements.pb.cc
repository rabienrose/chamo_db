// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors/measurements.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensors/measurements.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace measurements {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Measurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measurement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsWgsMeasurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsWgsMeasurement_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsUtmMeasurement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsUtmMeasurement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensors_2fmeasurements_2eproto() {
  protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensors/measurements.proto");
  GOOGLE_CHECK(file != NULL);
  Measurement_descriptor_ = file->message_type(0);
  static const int Measurement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, timestamp_nanoseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, sensor_id_),
  };
  Measurement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Measurement_descriptor_,
      Measurement::default_instance_,
      Measurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Measurement));
  GpsWgsMeasurement_descriptor_ = file->message_type(1);
  static const int GpsWgsMeasurement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, measurement_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, latitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, longitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, altitude_meters_),
  };
  GpsWgsMeasurement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpsWgsMeasurement_descriptor_,
      GpsWgsMeasurement::default_instance_,
      GpsWgsMeasurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsWgsMeasurement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsWgsMeasurement));
  GpsUtmMeasurement_descriptor_ = file->message_type(2);
  static const int GpsUtmMeasurement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUtmMeasurement, measurement_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUtmMeasurement, t_utm_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUtmMeasurement, utm_zone_),
  };
  GpsUtmMeasurement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpsUtmMeasurement_descriptor_,
      GpsUtmMeasurement::default_instance_,
      GpsUtmMeasurement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUtmMeasurement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUtmMeasurement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsUtmMeasurement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensors_2fmeasurements_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Measurement_descriptor_, &Measurement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsWgsMeasurement_descriptor_, &GpsWgsMeasurement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsUtmMeasurement_descriptor_, &GpsUtmMeasurement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensors_2fmeasurements_2eproto() {
  delete Measurement::default_instance_;
  delete Measurement_reflection_;
  delete GpsWgsMeasurement::default_instance_;
  delete GpsWgsMeasurement_reflection_;
  delete GpsUtmMeasurement::default_instance_;
  delete GpsUtmMeasurement_reflection_;
}

void protobuf_AddDesc_sensors_2fmeasurements_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032sensors/measurements.proto\022\022measuremen"
    "ts.proto\032\026maplab-common/id.proto\"Q\n\013Meas"
    "urement\022\035\n\025timestamp_nanoseconds\030\001 \001(\003\022#"
    "\n\tsensor_id\030\002 \001(\0132\020.common.proto.Id\"\224\001\n\021"
    "GpsWgsMeasurement\0229\n\020measurement_base\030\001 "
    "\001(\0132\037.measurements.proto.Measurement\022\024\n\014"
    "latitude_deg\030\002 \001(\001\022\025\n\rlongitude_deg\030\003 \001("
    "\001\022\027\n\017altitude_meters\030\004 \001(\001\"q\n\021GpsUtmMeas"
    "urement\0229\n\020measurement_base\030\001 \001(\0132\037.meas"
    "urements.proto.Measurement\022\017\n\007t_utm_s\030\002 "
    "\003(\001\022\020\n\010utm_zone\030\003 \001(\t", 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensors/measurements.proto", &protobuf_RegisterTypes);
  Measurement::default_instance_ = new Measurement();
  GpsWgsMeasurement::default_instance_ = new GpsWgsMeasurement();
  GpsUtmMeasurement::default_instance_ = new GpsUtmMeasurement();
  Measurement::default_instance_->InitAsDefaultInstance();
  GpsWgsMeasurement::default_instance_->InitAsDefaultInstance();
  GpsUtmMeasurement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensors_2fmeasurements_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensors_2fmeasurements_2eproto {
  StaticDescriptorInitializer_sensors_2fmeasurements_2eproto() {
    protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  }
} static_descriptor_initializer_sensors_2fmeasurements_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Measurement::kTimestampNanosecondsFieldNumber;
const int Measurement::kSensorIdFieldNumber;
#endif  // !_MSC_VER

Measurement::Measurement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:measurements.proto.Measurement)
}

void Measurement::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:measurements.proto.Measurement)
}

void Measurement::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
  sensor_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:measurements.proto.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
  }
}

void Measurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measurement_descriptor_;
}

const Measurement& Measurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  return *default_instance_;
}

Measurement* Measurement::default_instance_ = NULL;

Measurement* Measurement::New() const {
  return new Measurement;
}

void Measurement::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::common::proto::Id::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:measurements.proto.Measurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanoseconds_)));
          set_has_timestamp_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sensor_id;
        break;
      }

      // optional .common.proto.Id sensor_id = 2;
      case 2: {
        if (tag == 18) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:measurements.proto.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:measurements.proto.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:measurements.proto.Measurement)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanoseconds(), output);
  }

  // optional .common.proto.Id sensor_id = 2;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:measurements.proto.Measurement)
}

::google::protobuf::uint8* Measurement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:measurements.proto.Measurement)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanoseconds(), target);
  }

  // optional .common.proto.Id sensor_id = 2;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sensor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:measurements.proto.Measurement)
  return target;
}

int Measurement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanoseconds = 1;
    if (has_timestamp_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanoseconds());
    }

    // optional .common.proto.Id sensor_id = 2;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Measurement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Measurement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanoseconds()) {
      set_timestamp_nanoseconds(from.timestamp_nanoseconds());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::common::proto::Id::MergeFrom(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {

  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other != this) {
    std::swap(timestamp_nanoseconds_, other->timestamp_nanoseconds_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measurement_descriptor_;
  metadata.reflection = Measurement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsWgsMeasurement::kMeasurementBaseFieldNumber;
const int GpsWgsMeasurement::kLatitudeDegFieldNumber;
const int GpsWgsMeasurement::kLongitudeDegFieldNumber;
const int GpsWgsMeasurement::kAltitudeMetersFieldNumber;
#endif  // !_MSC_VER

GpsWgsMeasurement::GpsWgsMeasurement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:measurements.proto.GpsWgsMeasurement)
}

void GpsWgsMeasurement::InitAsDefaultInstance() {
  measurement_base_ = const_cast< ::measurements::proto::Measurement*>(&::measurements::proto::Measurement::default_instance());
}

GpsWgsMeasurement::GpsWgsMeasurement(const GpsWgsMeasurement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:measurements.proto.GpsWgsMeasurement)
}

void GpsWgsMeasurement::SharedCtor() {
  _cached_size_ = 0;
  measurement_base_ = NULL;
  latitude_deg_ = 0;
  longitude_deg_ = 0;
  altitude_meters_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsWgsMeasurement::~GpsWgsMeasurement() {
  // @@protoc_insertion_point(destructor:measurements.proto.GpsWgsMeasurement)
  SharedDtor();
}

void GpsWgsMeasurement::SharedDtor() {
  if (this != default_instance_) {
    delete measurement_base_;
  }
}

void GpsWgsMeasurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsWgsMeasurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsWgsMeasurement_descriptor_;
}

const GpsWgsMeasurement& GpsWgsMeasurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  return *default_instance_;
}

GpsWgsMeasurement* GpsWgsMeasurement::default_instance_ = NULL;

GpsWgsMeasurement* GpsWgsMeasurement::New() const {
  return new GpsWgsMeasurement;
}

void GpsWgsMeasurement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GpsWgsMeasurement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(latitude_deg_, altitude_meters_);
    if (has_measurement_base()) {
      if (measurement_base_ != NULL) measurement_base_->::measurements::proto::Measurement::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsWgsMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:measurements.proto.GpsWgsMeasurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .measurements.proto.Measurement measurement_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurement_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude_deg;
        break;
      }

      // optional double latitude_deg = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
          set_has_latitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude_deg;
        break;
      }

      // optional double longitude_deg = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
          set_has_longitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_altitude_meters;
        break;
      }

      // optional double altitude_meters = 4;
      case 4: {
        if (tag == 33) {
         parse_altitude_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_meters_)));
          set_has_altitude_meters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:measurements.proto.GpsWgsMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:measurements.proto.GpsWgsMeasurement)
  return false;
#undef DO_
}

void GpsWgsMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:measurements.proto.GpsWgsMeasurement)
  // optional .measurements.proto.Measurement measurement_base = 1;
  if (has_measurement_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->measurement_base(), output);
  }

  // optional double latitude_deg = 2;
  if (has_latitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude_deg(), output);
  }

  // optional double longitude_deg = 3;
  if (has_longitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude_deg(), output);
  }

  // optional double altitude_meters = 4;
  if (has_altitude_meters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitude_meters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:measurements.proto.GpsWgsMeasurement)
}

::google::protobuf::uint8* GpsWgsMeasurement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:measurements.proto.GpsWgsMeasurement)
  // optional .measurements.proto.Measurement measurement_base = 1;
  if (has_measurement_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->measurement_base(), target);
  }

  // optional double latitude_deg = 2;
  if (has_latitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude_deg(), target);
  }

  // optional double longitude_deg = 3;
  if (has_longitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude_deg(), target);
  }

  // optional double altitude_meters = 4;
  if (has_altitude_meters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude_meters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:measurements.proto.GpsWgsMeasurement)
  return target;
}

int GpsWgsMeasurement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .measurements.proto.Measurement measurement_base = 1;
    if (has_measurement_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measurement_base());
    }

    // optional double latitude_deg = 2;
    if (has_latitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double longitude_deg = 3;
    if (has_longitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double altitude_meters = 4;
    if (has_altitude_meters()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsWgsMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsWgsMeasurement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpsWgsMeasurement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsWgsMeasurement::MergeFrom(const GpsWgsMeasurement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_measurement_base()) {
      mutable_measurement_base()->::measurements::proto::Measurement::MergeFrom(from.measurement_base());
    }
    if (from.has_latitude_deg()) {
      set_latitude_deg(from.latitude_deg());
    }
    if (from.has_longitude_deg()) {
      set_longitude_deg(from.longitude_deg());
    }
    if (from.has_altitude_meters()) {
      set_altitude_meters(from.altitude_meters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsWgsMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsWgsMeasurement::CopyFrom(const GpsWgsMeasurement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsWgsMeasurement::IsInitialized() const {

  return true;
}

void GpsWgsMeasurement::Swap(GpsWgsMeasurement* other) {
  if (other != this) {
    std::swap(measurement_base_, other->measurement_base_);
    std::swap(latitude_deg_, other->latitude_deg_);
    std::swap(longitude_deg_, other->longitude_deg_);
    std::swap(altitude_meters_, other->altitude_meters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpsWgsMeasurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsWgsMeasurement_descriptor_;
  metadata.reflection = GpsWgsMeasurement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsUtmMeasurement::kMeasurementBaseFieldNumber;
const int GpsUtmMeasurement::kTUtmSFieldNumber;
const int GpsUtmMeasurement::kUtmZoneFieldNumber;
#endif  // !_MSC_VER

GpsUtmMeasurement::GpsUtmMeasurement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:measurements.proto.GpsUtmMeasurement)
}

void GpsUtmMeasurement::InitAsDefaultInstance() {
  measurement_base_ = const_cast< ::measurements::proto::Measurement*>(&::measurements::proto::Measurement::default_instance());
}

GpsUtmMeasurement::GpsUtmMeasurement(const GpsUtmMeasurement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:measurements.proto.GpsUtmMeasurement)
}

void GpsUtmMeasurement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  measurement_base_ = NULL;
  utm_zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsUtmMeasurement::~GpsUtmMeasurement() {
  // @@protoc_insertion_point(destructor:measurements.proto.GpsUtmMeasurement)
  SharedDtor();
}

void GpsUtmMeasurement::SharedDtor() {
  if (utm_zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete utm_zone_;
  }
  if (this != default_instance_) {
    delete measurement_base_;
  }
}

void GpsUtmMeasurement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsUtmMeasurement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsUtmMeasurement_descriptor_;
}

const GpsUtmMeasurement& GpsUtmMeasurement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  return *default_instance_;
}

GpsUtmMeasurement* GpsUtmMeasurement::default_instance_ = NULL;

GpsUtmMeasurement* GpsUtmMeasurement::New() const {
  return new GpsUtmMeasurement;
}

void GpsUtmMeasurement::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_measurement_base()) {
      if (measurement_base_ != NULL) measurement_base_->::measurements::proto::Measurement::Clear();
    }
    if (has_utm_zone()) {
      if (utm_zone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        utm_zone_->clear();
      }
    }
  }
  t_utm_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsUtmMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:measurements.proto.GpsUtmMeasurement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .measurements.proto.Measurement measurement_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measurement_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_utm_s;
        break;
      }

      // repeated double t_utm_s = 2;
      case 2: {
        if (tag == 17) {
         parse_t_utm_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_t_utm_s())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_utm_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_utm_s;
        if (input->ExpectTag(26)) goto parse_utm_zone;
        break;
      }

      // optional string utm_zone = 3;
      case 3: {
        if (tag == 26) {
         parse_utm_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utm_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->utm_zone().data(), this->utm_zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "utm_zone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:measurements.proto.GpsUtmMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:measurements.proto.GpsUtmMeasurement)
  return false;
#undef DO_
}

void GpsUtmMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:measurements.proto.GpsUtmMeasurement)
  // optional .measurements.proto.Measurement measurement_base = 1;
  if (has_measurement_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->measurement_base(), output);
  }

  // repeated double t_utm_s = 2;
  for (int i = 0; i < this->t_utm_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->t_utm_s(i), output);
  }

  // optional string utm_zone = 3;
  if (has_utm_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->utm_zone().data(), this->utm_zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "utm_zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->utm_zone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:measurements.proto.GpsUtmMeasurement)
}

::google::protobuf::uint8* GpsUtmMeasurement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:measurements.proto.GpsUtmMeasurement)
  // optional .measurements.proto.Measurement measurement_base = 1;
  if (has_measurement_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->measurement_base(), target);
  }

  // repeated double t_utm_s = 2;
  for (int i = 0; i < this->t_utm_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->t_utm_s(i), target);
  }

  // optional string utm_zone = 3;
  if (has_utm_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->utm_zone().data(), this->utm_zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "utm_zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->utm_zone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:measurements.proto.GpsUtmMeasurement)
  return target;
}

int GpsUtmMeasurement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .measurements.proto.Measurement measurement_base = 1;
    if (has_measurement_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measurement_base());
    }

    // optional string utm_zone = 3;
    if (has_utm_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->utm_zone());
    }

  }
  // repeated double t_utm_s = 2;
  {
    int data_size = 0;
    data_size = 8 * this->t_utm_s_size();
    total_size += 1 * this->t_utm_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsUtmMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsUtmMeasurement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpsUtmMeasurement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsUtmMeasurement::MergeFrom(const GpsUtmMeasurement& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_utm_s_.MergeFrom(from.t_utm_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_measurement_base()) {
      mutable_measurement_base()->::measurements::proto::Measurement::MergeFrom(from.measurement_base());
    }
    if (from.has_utm_zone()) {
      set_utm_zone(from.utm_zone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsUtmMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsUtmMeasurement::CopyFrom(const GpsUtmMeasurement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsUtmMeasurement::IsInitialized() const {

  return true;
}

void GpsUtmMeasurement::Swap(GpsUtmMeasurement* other) {
  if (other != this) {
    std::swap(measurement_base_, other->measurement_base_);
    t_utm_s_.Swap(&other->t_utm_s_);
    std::swap(utm_zone_, other->utm_zone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpsUtmMeasurement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsUtmMeasurement_descriptor_;
  metadata.reflection = GpsUtmMeasurement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace measurements

// @@protoc_insertion_point(global_scope)
