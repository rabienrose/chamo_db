// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vi-map/vi_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vi-map/vi_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vi_map {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ViwlsVertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViwlsVertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViwlsEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViwlsEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformationEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformationEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* CklamEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CklamEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoopclosureEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoopclosureEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaserEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Landmark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Landmark_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Landmark_Quality_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LandmarkStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionalSensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalSensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptionalSensorDataMissionPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalSensorDataMissionPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mission_BackBone_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionBaseframe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionBaseframe_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameResourceMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameResourceMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceTypeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceTypeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandmarkToVertexReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandmarkToVertexReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vi_2dmap_2fvi_5fmap_2eproto() {
  protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vi-map/vi_map.proto");
  GOOGLE_CHECK(file != NULL);
  ViwlsVertex_descriptor_ = file->message_type(0);
  static const int ViwlsVertex_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, incoming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, outgoing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, t_m_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, v_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, accel_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, gyro_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, n_visual_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, landmark_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, resource_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, mission_id_),
  };
  ViwlsVertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViwlsVertex_descriptor_,
      ViwlsVertex::default_instance_,
      ViwlsVertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsVertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViwlsVertex));
  ViwlsEdge_descriptor_ = file->message_type(1);
  static const int ViwlsEdge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, imu_timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, imu_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, mission_id_),
  };
  ViwlsEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViwlsEdge_descriptor_,
      ViwlsEdge::default_instance_,
      ViwlsEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViwlsEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViwlsEdge));
  TransformationEdge_descriptor_ = file->message_type(2);
  static const int TransformationEdge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, t_a_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, t_a_b_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, sensor_id_),
  };
  TransformationEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformationEdge_descriptor_,
      TransformationEdge::default_instance_,
      TransformationEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformationEdge));
  CklamEdge_descriptor_ = file->message_type(3);
  static const int CklamEdge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, keyframe_t_g_b_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, keyframe_t_g_b_to_),
  };
  CklamEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CklamEdge_descriptor_,
      CklamEdge::default_instance_,
      CklamEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CklamEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CklamEdge));
  LoopclosureEdge_descriptor_ = file->message_type(4);
  static const int LoopclosureEdge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, t_a_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, t_a_b_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, switch_variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, switch_variable_variance_),
  };
  LoopclosureEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoopclosureEdge_descriptor_,
      LoopclosureEdge::default_instance_,
      LoopclosureEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopclosureEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoopclosureEdge));
  LaserEdge_descriptor_ = file->message_type(5);
  static const int LaserEdge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, laser_timestamps_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, laser_data_xyzi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, mission_id_),
  };
  LaserEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaserEdge_descriptor_,
      LaserEdge::default_instance_,
      LaserEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaserEdge));
  TrajectoryEdge_descriptor_ = file->message_type(6);
  static const int TrajectoryEdge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, trajectory_timestamps_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, trajectory_g_t_i_pq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, trajectory_identifier_),
  };
  TrajectoryEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryEdge_descriptor_,
      TrajectoryEdge::default_instance_,
      TrajectoryEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryEdge));
  Edge_descriptor_ = file->message_type(7);
  static const int Edge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, viwls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, loopclosure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, laser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, trajectory_),
  };
  Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge));
  Landmark_descriptor_ = file->message_type(8);
  static const int Landmark_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, vertex_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, keypoint_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, frame_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, appearances_),
  };
  Landmark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Landmark_descriptor_,
      Landmark::default_instance_,
      Landmark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Landmark));
  Landmark_Quality_descriptor_ = Landmark_descriptor_->enum_type(0);
  LandmarkStore_descriptor_ = file->message_type(9);
  static const int LandmarkStore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkStore, landmarks_),
  };
  LandmarkStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandmarkStore_descriptor_,
      LandmarkStore::default_instance_,
      LandmarkStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandmarkStore));
  OptionalSensorData_descriptor_ = file->message_type(10);
  static const int OptionalSensorData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorData, gps_utm_measurements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorData, gps_wgs_measurements_),
  };
  OptionalSensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionalSensorData_descriptor_,
      OptionalSensorData::default_instance_,
      OptionalSensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionalSensorData));
  OptionalSensorDataMissionPair_descriptor_ = file->message_type(11);
  static const int OptionalSensorDataMissionPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorDataMissionPair, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorDataMissionPair, optional_sensor_data_),
  };
  OptionalSensorDataMissionPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionalSensorDataMissionPair_descriptor_,
      OptionalSensorDataMissionPair::default_instance_,
      OptionalSensorDataMissionPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorDataMissionPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorDataMissionPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionalSensorDataMissionPair));
  Mission_descriptor_ = file->message_type(12);
  static const int Mission_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, baseframe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, root_vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, backbone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_resource_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_resource_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, optional_camera_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, optional_cameras_with_extrinsics_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  Mission_BackBone_descriptor_ = Mission_descriptor_->enum_type(0);
  MissionBaseframe_descriptor_ = file->message_type(13);
  static const int MissionBaseframe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBaseframe, t_g_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBaseframe, t_g_m_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBaseframe, is_t_g_m_known_),
  };
  MissionBaseframe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionBaseframe_descriptor_,
      MissionBaseframe::default_instance_,
      MissionBaseframe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBaseframe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionBaseframe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionBaseframe));
  ResourceInfo_descriptor_ = file->message_type(14);
  static const int ResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, uri_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, mission_id_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  FrameResourceMap_descriptor_ = file->message_type(15);
  static const int FrameResourceMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResourceMap, resource_type_map_),
  };
  FrameResourceMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameResourceMap_descriptor_,
      FrameResourceMap::default_instance_,
      FrameResourceMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResourceMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResourceMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameResourceMap));
  ResourceTypeMap_descriptor_ = file->message_type(16);
  static const int ResourceTypeMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTypeMap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTypeMap, resource_ids_),
  };
  ResourceTypeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceTypeMap_descriptor_,
      ResourceTypeMap::default_instance_,
      ResourceTypeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTypeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTypeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceTypeMap));
  LandmarkToVertexReference_descriptor_ = file->message_type(17);
  static const int LandmarkToVertexReference_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkToVertexReference, vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkToVertexReference, landmark_id_),
  };
  LandmarkToVertexReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandmarkToVertexReference_descriptor_,
      LandmarkToVertexReference::default_instance_,
      LandmarkToVertexReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkToVertexReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkToVertexReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandmarkToVertexReference));
  VIMap_descriptor_ = file->message_type(18);
  static const int VIMap_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, vertex_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, edge_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_base_frame_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_base_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, landmark_index_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, landmark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, optional_sensor_data_mission_id_pair_),
  };
  VIMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIMap_descriptor_,
      VIMap::default_instance_,
      VIMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vi_2dmap_2fvi_5fmap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViwlsVertex_descriptor_, &ViwlsVertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViwlsEdge_descriptor_, &ViwlsEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformationEdge_descriptor_, &TransformationEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CklamEdge_descriptor_, &CklamEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoopclosureEdge_descriptor_, &LoopclosureEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaserEdge_descriptor_, &LaserEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryEdge_descriptor_, &TrajectoryEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Landmark_descriptor_, &Landmark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandmarkStore_descriptor_, &LandmarkStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionalSensorData_descriptor_, &OptionalSensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionalSensorDataMissionPair_descriptor_, &OptionalSensorDataMissionPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionBaseframe_descriptor_, &MissionBaseframe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameResourceMap_descriptor_, &FrameResourceMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceTypeMap_descriptor_, &ResourceTypeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandmarkToVertexReference_descriptor_, &LandmarkToVertexReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIMap_descriptor_, &VIMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vi_2dmap_2fvi_5fmap_2eproto() {
  delete ViwlsVertex::default_instance_;
  delete ViwlsVertex_reflection_;
  delete ViwlsEdge::default_instance_;
  delete ViwlsEdge_reflection_;
  delete TransformationEdge::default_instance_;
  delete TransformationEdge_reflection_;
  delete CklamEdge::default_instance_;
  delete CklamEdge_reflection_;
  delete LoopclosureEdge::default_instance_;
  delete LoopclosureEdge_reflection_;
  delete LaserEdge::default_instance_;
  delete LaserEdge_reflection_;
  delete TrajectoryEdge::default_instance_;
  delete TrajectoryEdge_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Landmark::default_instance_;
  delete Landmark_reflection_;
  delete LandmarkStore::default_instance_;
  delete LandmarkStore_reflection_;
  delete OptionalSensorData::default_instance_;
  delete OptionalSensorData_reflection_;
  delete OptionalSensorDataMissionPair::default_instance_;
  delete OptionalSensorDataMissionPair_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete MissionBaseframe::default_instance_;
  delete MissionBaseframe_reflection_;
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete FrameResourceMap::default_instance_;
  delete FrameResourceMap_reflection_;
  delete ResourceTypeMap::default_instance_;
  delete ResourceTypeMap_reflection_;
  delete LandmarkToVertexReference::default_instance_;
  delete LandmarkToVertexReference_reflection_;
  delete VIMap::default_instance_;
  delete VIMap_reflection_;
}

void protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::aslam::proto::protobuf_AddDesc_aslam_2dserialization_2fvisual_2dframe_2eproto();
  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::measurements::proto::protobuf_AddDesc_sensors_2fmeasurements_2eproto();
  ::opt_cam_res::proto::protobuf_AddDesc_vi_2dmap_2foptional_5fcamera_5fresources_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023vi-map/vi_map.proto\022\014vi_map.proto\032&asl"
    "am-serialization/visual-frame.proto\032\026map"
    "lab-common/id.proto\032\032sensors/measurement"
    "s.proto\032&vi-map/optional_camera_resource"
    "s.proto\"\334\002\n\013ViwlsVertex\022\"\n\010incoming\030\001 \003("
    "\0132\020.common.proto.Id\022\"\n\010outgoing\030\002 \003(\0132\020."
    "common.proto.Id\022\r\n\005T_M_I\030\003 \003(\001\022\013\n\003v_M\030\004 "
    "\003(\001\022\022\n\naccel_bias\030\005 \003(\001\022\021\n\tgyro_bias\030\006 \003"
    "(\001\0221\n\016n_visual_frame\030\007 \001(\0132\031.aslam.proto"
    ".VisualNFrame\0223\n\016landmark_store\030\010 \001(\0132\033."
    "vi_map.proto.LandmarkStore\0224\n\014resource_m"
    "ap\030\t \003(\0132\036.vi_map.proto.FrameResourceMap"
    "\022$\n\nmission_id\030\016 \001(\0132\020.common.proto.Id\"\231"
    "\001\n\tViwlsEdge\022\036\n\004from\030\001 \001(\0132\020.common.prot"
    "o.Id\022\034\n\002to\030\002 \001(\0132\020.common.proto.Id\022\026\n\016im"
    "u_timestamps\030\003 \003(\003\022\020\n\010imu_data\030\004 \003(\001\022$\n\n"
    "mission_id\030\005 \001(\0132\020.common.proto.Id\"\306\001\n\022T"
    "ransformationEdge\022\036\n\004from\030\001 \001(\0132\020.common"
    ".proto.Id\022\034\n\002to\030\002 \001(\0132\020.common.proto.Id\022"
    "$\n\nmission_id\030\003 \001(\0132\020.common.proto.Id\022\r\n"
    "\005T_A_B\030\004 \003(\001\022\030\n\020T_A_B_covariance\030\005 \003(\001\022#"
    "\n\tsensor_id\030\006 \001(\0132\020.common.proto.Id\"\275\001\n\t"
    "CklamEdge\022\036\n\004from\030\001 \001(\0132\020.common.proto.I"
    "d\022\034\n\002to\030\002 \001(\0132\020.common.proto.Id\022$\n\nmissi"
    "on_id\030\003 \001(\0132\020.common.proto.Id\022\t\n\001b\030\004 \003(\001"
    "\022\t\n\001A\030\005 \003(\001\022\033\n\023keyframe_T_G_B_from\030\006 \003(\001"
    "\022\031\n\021keyframe_T_G_B_to\030\007 \003(\001\"\331\001\n\017Loopclos"
    "ureEdge\022\036\n\004from\030\001 \001(\0132\020.common.proto.Id\022"
    "\034\n\002to\030\002 \001(\0132\020.common.proto.Id\022$\n\nmission"
    "_id\030\003 \001(\0132\020.common.proto.Id\022\r\n\005T_A_B\030\004 \003"
    "(\001\022\030\n\020T_A_B_covariance\030\005 \003(\001\022\027\n\017switch_v"
    "ariable\030\006 \001(\001\022 \n\030switch_variable_varianc"
    "e\030\007 \001(\001\"\245\001\n\tLaserEdge\022\036\n\004from\030\001 \001(\0132\020.co"
    "mmon.proto.Id\022\034\n\002to\030\002 \001(\0132\020.common.proto"
    ".Id\022\033\n\023laser_timestamps_ns\030\003 \003(\003\022\027\n\017lase"
    "r_data_xyzi\030\004 \003(\001\022$\n\nmission_id\030\005 \001(\0132\020."
    "common.proto.Id\"\322\001\n\016TrajectoryEdge\022\036\n\004fr"
    "om\030\001 \001(\0132\020.common.proto.Id\022\034\n\002to\030\002 \001(\0132\020"
    ".common.proto.Id\022 \n\030trajectory_timestamp"
    "s_ns\030\003 \003(\003\022\033\n\023trajectory_G_T_I_pq\030\004 \003(\001\022"
    "$\n\nmission_id\030\005 \001(\0132\020.common.proto.Id\022\035\n"
    "\025trajectory_identifier\030\006 \001(\r\"\252\002\n\004Edge\022&\n"
    "\005viwls\030\001 \001(\0132\027.vi_map.proto.ViwlsEdge\0222\n"
    "\010odometry\030\002 \001(\0132 .vi_map.proto.Transform"
    "ationEdge\0222\n\013loopclosure\030\003 \001(\0132\035.vi_map."
    "proto.LoopclosureEdge\0228\n\016transformation\030"
    "\004 \001(\0132 .vi_map.proto.TransformationEdge\022"
    "&\n\005laser\030\005 \001(\0132\027.vi_map.proto.LaserEdge\022"
    "0\n\ntrajectory\030\006 \001(\0132\034.vi_map.proto.Traje"
    "ctoryEdge\"\243\002\n\010Landmark\022\034\n\002id\030\001 \001(\0132\020.com"
    "mon.proto.Id\022\020\n\010position\030\002 \003(\001\022\022\n\ncovari"
    "ance\030\003 \003(\001\022$\n\nvertex_ids\030\004 \003(\0132\020.common."
    "proto.Id\022\030\n\020keypoint_indices\030\005 \003(\r\022\025\n\rfr"
    "ame_indices\030\006 \003(\r\0229\n\007quality\030\007 \001(\0162\036.vi_"
    "map.proto.Landmark.Quality:\010kUnknown\022\023\n\013"
    "appearances\030\010 \003(\005\",\n\007Quality\022\014\n\010kUnknown"
    "\020\000\022\010\n\004kBad\020\001\022\t\n\005kGood\020\002\":\n\rLandmarkStore"
    "\022)\n\tlandmarks\030\001 \003(\0132\026.vi_map.proto.Landm"
    "ark\"\236\001\n\022OptionalSensorData\022C\n\024gps_utm_me"
    "asurements\030\001 \003(\0132%.measurements.proto.Gp"
    "sUtmMeasurement\022C\n\024gps_wgs_measurements\030"
    "\002 \003(\0132%.measurements.proto.GpsWgsMeasure"
    "ment\"\205\001\n\035OptionalSensorDataMissionPair\022$"
    "\n\nmission_id\030\001 \001(\0132\020.common.proto.Id\022>\n\024"
    "optional_sensor_data\030\002 \001(\0132 .vi_map.prot"
    "o.OptionalSensorData\"\257\003\n\007Mission\022&\n\014base"
    "frame_id\030\001 \001(\0132\020.common.proto.Id\022(\n\016root"
    "_vertex_id\030\002 \001(\0132\020.common.proto.Id\0228\n\010ba"
    "ckbone\030\003 \001(\0162\036.vi_map.proto.Mission.Back"
    "Bone:\006kViwls\022.\n\024mission_resource_ids\030\004 \003"
    "(\0132\020.common.proto.Id\022\036\n\026mission_resource"
    "_types\030\005 \003(\005\022M\n\031optional_camera_resource"
    "s\030\006 \003(\0132*.opt_cam_res.proto.OptionalCame"
    "raResources\022R\n optional_cameras_with_ext"
    "rinsics\030\007 \003(\0132(.opt_cam_res.proto.Camera"
    "sWithExtrinsics\"%\n\010BackBone\022\n\n\006kViwls\020\000\022"
    "\r\n\tkOdometry\020\001\"S\n\020MissionBaseframe\022\r\n\005T_"
    "G_M\030\001 \003(\001\022\030\n\020T_G_M_covariance\030\002 \003(\001\022\026\n\016i"
    "s_T_G_M_known\030\003 \001(\010\"c\n\014ResourceInfo\022\014\n\004t"
    "ype\030\001 \001(\r\022\022\n\nuri_format\030\002 \001(\r\022\013\n\003uri\030\003 \001"
    "(\t\022$\n\nmission_id\030\004 \001(\0132\020.common.proto.Id"
    "\"L\n\020FrameResourceMap\0228\n\021resource_type_ma"
    "p\030\001 \003(\0132\035.vi_map.proto.ResourceTypeMap\"G"
    "\n\017ResourceTypeMap\022\014\n\004type\030\001 \001(\r\022&\n\014resou"
    "rce_ids\030\002 \003(\0132\020.common.proto.Id\"g\n\031Landm"
    "arkToVertexReference\022#\n\tvertex_id\030\001 \001(\0132"
    "\020.common.proto.Id\022%\n\013landmark_id\030\002 \001(\0132\020"
    ".common.proto.Id\"\252\004\n\005VIMap\022$\n\nvertex_ids"
    "\030\001 \003(\0132\020.common.proto.Id\022+\n\010vertices\030\002 \003"
    "(\0132\031.vi_map.proto.ViwlsVertex\022\"\n\010edge_id"
    "s\030\003 \003(\0132\020.common.proto.Id\022!\n\005edges\030\004 \003(\013"
    "2\022.vi_map.proto.Edge\022%\n\013mission_ids\030\005 \003("
    "\0132\020.common.proto.Id\022\'\n\010missions\030\006 \003(\0132\025."
    "vi_map.proto.Mission\0220\n\026mission_base_fra"
    "me_ids\030\007 \003(\0132\020.common.proto.Id\022;\n\023missio"
    "n_base_frames\030\010 \003(\0132\036.vi_map.proto.Missi"
    "onBaseframe\022,\n\022landmark_index_ids\030\t \003(\0132"
    "\020.common.proto.Id\022\?\n\016landmark_index\030\n \003("
    "\0132\'.vi_map.proto.LandmarkToVertexReferen"
    "ce\022Y\n$optional_sensor_data_mission_id_pa"
    "ir\030\013 \003(\0132+.vi_map.proto.OptionalSensorDa"
    "taMissionPair", 4053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vi-map/vi_map.proto", &protobuf_RegisterTypes);
  ViwlsVertex::default_instance_ = new ViwlsVertex();
  ViwlsEdge::default_instance_ = new ViwlsEdge();
  TransformationEdge::default_instance_ = new TransformationEdge();
  CklamEdge::default_instance_ = new CklamEdge();
  LoopclosureEdge::default_instance_ = new LoopclosureEdge();
  LaserEdge::default_instance_ = new LaserEdge();
  TrajectoryEdge::default_instance_ = new TrajectoryEdge();
  Edge::default_instance_ = new Edge();
  Landmark::default_instance_ = new Landmark();
  LandmarkStore::default_instance_ = new LandmarkStore();
  OptionalSensorData::default_instance_ = new OptionalSensorData();
  OptionalSensorDataMissionPair::default_instance_ = new OptionalSensorDataMissionPair();
  Mission::default_instance_ = new Mission();
  MissionBaseframe::default_instance_ = new MissionBaseframe();
  ResourceInfo::default_instance_ = new ResourceInfo();
  FrameResourceMap::default_instance_ = new FrameResourceMap();
  ResourceTypeMap::default_instance_ = new ResourceTypeMap();
  LandmarkToVertexReference::default_instance_ = new LandmarkToVertexReference();
  VIMap::default_instance_ = new VIMap();
  ViwlsVertex::default_instance_->InitAsDefaultInstance();
  ViwlsEdge::default_instance_->InitAsDefaultInstance();
  TransformationEdge::default_instance_->InitAsDefaultInstance();
  CklamEdge::default_instance_->InitAsDefaultInstance();
  LoopclosureEdge::default_instance_->InitAsDefaultInstance();
  LaserEdge::default_instance_->InitAsDefaultInstance();
  TrajectoryEdge::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Landmark::default_instance_->InitAsDefaultInstance();
  LandmarkStore::default_instance_->InitAsDefaultInstance();
  OptionalSensorData::default_instance_->InitAsDefaultInstance();
  OptionalSensorDataMissionPair::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  MissionBaseframe::default_instance_->InitAsDefaultInstance();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  FrameResourceMap::default_instance_->InitAsDefaultInstance();
  ResourceTypeMap::default_instance_->InitAsDefaultInstance();
  LandmarkToVertexReference::default_instance_->InitAsDefaultInstance();
  VIMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vi_2dmap_2fvi_5fmap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vi_2dmap_2fvi_5fmap_2eproto {
  StaticDescriptorInitializer_vi_2dmap_2fvi_5fmap_2eproto() {
    protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  }
} static_descriptor_initializer_vi_2dmap_2fvi_5fmap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ViwlsVertex::kIncomingFieldNumber;
const int ViwlsVertex::kOutgoingFieldNumber;
const int ViwlsVertex::kTMIFieldNumber;
const int ViwlsVertex::kVMFieldNumber;
const int ViwlsVertex::kAccelBiasFieldNumber;
const int ViwlsVertex::kGyroBiasFieldNumber;
const int ViwlsVertex::kNVisualFrameFieldNumber;
const int ViwlsVertex::kLandmarkStoreFieldNumber;
const int ViwlsVertex::kResourceMapFieldNumber;
const int ViwlsVertex::kMissionIdFieldNumber;
#endif  // !_MSC_VER

ViwlsVertex::ViwlsVertex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.ViwlsVertex)
}

void ViwlsVertex::InitAsDefaultInstance() {
  n_visual_frame_ = const_cast< ::aslam::proto::VisualNFrame*>(&::aslam::proto::VisualNFrame::default_instance());
  landmark_store_ = const_cast< ::vi_map::proto::LandmarkStore*>(&::vi_map::proto::LandmarkStore::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

ViwlsVertex::ViwlsVertex(const ViwlsVertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.ViwlsVertex)
}

void ViwlsVertex::SharedCtor() {
  _cached_size_ = 0;
  n_visual_frame_ = NULL;
  landmark_store_ = NULL;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViwlsVertex::~ViwlsVertex() {
  // @@protoc_insertion_point(destructor:vi_map.proto.ViwlsVertex)
  SharedDtor();
}

void ViwlsVertex::SharedDtor() {
  if (this != default_instance_) {
    delete n_visual_frame_;
    delete landmark_store_;
    delete mission_id_;
  }
}

void ViwlsVertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViwlsVertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViwlsVertex_descriptor_;
}

const ViwlsVertex& ViwlsVertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

ViwlsVertex* ViwlsVertex::default_instance_ = NULL;

ViwlsVertex* ViwlsVertex::New() const {
  return new ViwlsVertex;
}

void ViwlsVertex::Clear() {
  if (_has_bits_[0 / 32] & 192) {
    if (has_n_visual_frame()) {
      if (n_visual_frame_ != NULL) n_visual_frame_->::aslam::proto::VisualNFrame::Clear();
    }
    if (has_landmark_store()) {
      if (landmark_store_ != NULL) landmark_store_->::vi_map::proto::LandmarkStore::Clear();
    }
  }
  if (has_mission_id()) {
    if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
  }
  incoming_.Clear();
  outgoing_.Clear();
  t_m_i_.Clear();
  v_m_.Clear();
  accel_bias_.Clear();
  gyro_bias_.Clear();
  resource_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViwlsVertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.ViwlsVertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.proto.Id incoming = 1;
      case 1: {
        if (tag == 10) {
         parse_incoming:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incoming()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_incoming;
        if (input->ExpectTag(18)) goto parse_outgoing;
        break;
      }

      // repeated .common.proto.Id outgoing = 2;
      case 2: {
        if (tag == 18) {
         parse_outgoing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outgoing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outgoing;
        if (input->ExpectTag(25)) goto parse_T_M_I;
        break;
      }

      // repeated double T_M_I = 3;
      case 3: {
        if (tag == 25) {
         parse_T_M_I:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_t_m_i())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_m_i())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_T_M_I;
        if (input->ExpectTag(33)) goto parse_v_M;
        break;
      }

      // repeated double v_M = 4;
      case 4: {
        if (tag == 33) {
         parse_v_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_v_m())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_v_m())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_v_M;
        if (input->ExpectTag(41)) goto parse_accel_bias;
        break;
      }

      // repeated double accel_bias = 5;
      case 5: {
        if (tag == 41) {
         parse_accel_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_accel_bias())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_accel_bias())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_accel_bias;
        if (input->ExpectTag(49)) goto parse_gyro_bias;
        break;
      }

      // repeated double gyro_bias = 6;
      case 6: {
        if (tag == 49) {
         parse_gyro_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_gyro_bias())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_gyro_bias())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_gyro_bias;
        if (input->ExpectTag(58)) goto parse_n_visual_frame;
        break;
      }

      // optional .aslam.proto.VisualNFrame n_visual_frame = 7;
      case 7: {
        if (tag == 58) {
         parse_n_visual_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n_visual_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_landmark_store;
        break;
      }

      // optional .vi_map.proto.LandmarkStore landmark_store = 8;
      case 8: {
        if (tag == 66) {
         parse_landmark_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_resource_map;
        break;
      }

      // repeated .vi_map.proto.FrameResourceMap resource_map = 9;
      case 9: {
        if (tag == 74) {
         parse_resource_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_resource_map;
        if (input->ExpectTag(114)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 14;
      case 14: {
        if (tag == 114) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.ViwlsVertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.ViwlsVertex)
  return false;
#undef DO_
}

void ViwlsVertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.ViwlsVertex)
  // repeated .common.proto.Id incoming = 1;
  for (int i = 0; i < this->incoming_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->incoming(i), output);
  }

  // repeated .common.proto.Id outgoing = 2;
  for (int i = 0; i < this->outgoing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outgoing(i), output);
  }

  // repeated double T_M_I = 3;
  for (int i = 0; i < this->t_m_i_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->t_m_i(i), output);
  }

  // repeated double v_M = 4;
  for (int i = 0; i < this->v_m_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->v_m(i), output);
  }

  // repeated double accel_bias = 5;
  for (int i = 0; i < this->accel_bias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->accel_bias(i), output);
  }

  // repeated double gyro_bias = 6;
  for (int i = 0; i < this->gyro_bias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->gyro_bias(i), output);
  }

  // optional .aslam.proto.VisualNFrame n_visual_frame = 7;
  if (has_n_visual_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->n_visual_frame(), output);
  }

  // optional .vi_map.proto.LandmarkStore landmark_store = 8;
  if (has_landmark_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->landmark_store(), output);
  }

  // repeated .vi_map.proto.FrameResourceMap resource_map = 9;
  for (int i = 0; i < this->resource_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resource_map(i), output);
  }

  // optional .common.proto.Id mission_id = 14;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.ViwlsVertex)
}

::google::protobuf::uint8* ViwlsVertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.ViwlsVertex)
  // repeated .common.proto.Id incoming = 1;
  for (int i = 0; i < this->incoming_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->incoming(i), target);
  }

  // repeated .common.proto.Id outgoing = 2;
  for (int i = 0; i < this->outgoing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outgoing(i), target);
  }

  // repeated double T_M_I = 3;
  for (int i = 0; i < this->t_m_i_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->t_m_i(i), target);
  }

  // repeated double v_M = 4;
  for (int i = 0; i < this->v_m_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->v_m(i), target);
  }

  // repeated double accel_bias = 5;
  for (int i = 0; i < this->accel_bias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->accel_bias(i), target);
  }

  // repeated double gyro_bias = 6;
  for (int i = 0; i < this->gyro_bias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->gyro_bias(i), target);
  }

  // optional .aslam.proto.VisualNFrame n_visual_frame = 7;
  if (has_n_visual_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->n_visual_frame(), target);
  }

  // optional .vi_map.proto.LandmarkStore landmark_store = 8;
  if (has_landmark_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->landmark_store(), target);
  }

  // repeated .vi_map.proto.FrameResourceMap resource_map = 9;
  for (int i = 0; i < this->resource_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resource_map(i), target);
  }

  // optional .common.proto.Id mission_id = 14;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.ViwlsVertex)
  return target;
}

int ViwlsVertex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional .aslam.proto.VisualNFrame n_visual_frame = 7;
    if (has_n_visual_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n_visual_frame());
    }

    // optional .vi_map.proto.LandmarkStore landmark_store = 8;
    if (has_landmark_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark_store());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .common.proto.Id mission_id = 14;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated .common.proto.Id incoming = 1;
  total_size += 1 * this->incoming_size();
  for (int i = 0; i < this->incoming_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incoming(i));
  }

  // repeated .common.proto.Id outgoing = 2;
  total_size += 1 * this->outgoing_size();
  for (int i = 0; i < this->outgoing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outgoing(i));
  }

  // repeated double T_M_I = 3;
  {
    int data_size = 0;
    data_size = 8 * this->t_m_i_size();
    total_size += 1 * this->t_m_i_size() + data_size;
  }

  // repeated double v_M = 4;
  {
    int data_size = 0;
    data_size = 8 * this->v_m_size();
    total_size += 1 * this->v_m_size() + data_size;
  }

  // repeated double accel_bias = 5;
  {
    int data_size = 0;
    data_size = 8 * this->accel_bias_size();
    total_size += 1 * this->accel_bias_size() + data_size;
  }

  // repeated double gyro_bias = 6;
  {
    int data_size = 0;
    data_size = 8 * this->gyro_bias_size();
    total_size += 1 * this->gyro_bias_size() + data_size;
  }

  // repeated .vi_map.proto.FrameResourceMap resource_map = 9;
  total_size += 1 * this->resource_map_size();
  for (int i = 0; i < this->resource_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViwlsVertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViwlsVertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViwlsVertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViwlsVertex::MergeFrom(const ViwlsVertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  incoming_.MergeFrom(from.incoming_);
  outgoing_.MergeFrom(from.outgoing_);
  t_m_i_.MergeFrom(from.t_m_i_);
  v_m_.MergeFrom(from.v_m_);
  accel_bias_.MergeFrom(from.accel_bias_);
  gyro_bias_.MergeFrom(from.gyro_bias_);
  resource_map_.MergeFrom(from.resource_map_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_n_visual_frame()) {
      mutable_n_visual_frame()->::aslam::proto::VisualNFrame::MergeFrom(from.n_visual_frame());
    }
    if (from.has_landmark_store()) {
      mutable_landmark_store()->::vi_map::proto::LandmarkStore::MergeFrom(from.landmark_store());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViwlsVertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViwlsVertex::CopyFrom(const ViwlsVertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViwlsVertex::IsInitialized() const {

  return true;
}

void ViwlsVertex::Swap(ViwlsVertex* other) {
  if (other != this) {
    incoming_.Swap(&other->incoming_);
    outgoing_.Swap(&other->outgoing_);
    t_m_i_.Swap(&other->t_m_i_);
    v_m_.Swap(&other->v_m_);
    accel_bias_.Swap(&other->accel_bias_);
    gyro_bias_.Swap(&other->gyro_bias_);
    std::swap(n_visual_frame_, other->n_visual_frame_);
    std::swap(landmark_store_, other->landmark_store_);
    resource_map_.Swap(&other->resource_map_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViwlsVertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViwlsVertex_descriptor_;
  metadata.reflection = ViwlsVertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViwlsEdge::kFromFieldNumber;
const int ViwlsEdge::kToFieldNumber;
const int ViwlsEdge::kImuTimestampsFieldNumber;
const int ViwlsEdge::kImuDataFieldNumber;
const int ViwlsEdge::kMissionIdFieldNumber;
#endif  // !_MSC_VER

ViwlsEdge::ViwlsEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.ViwlsEdge)
}

void ViwlsEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

ViwlsEdge::ViwlsEdge(const ViwlsEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.ViwlsEdge)
}

void ViwlsEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViwlsEdge::~ViwlsEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.ViwlsEdge)
  SharedDtor();
}

void ViwlsEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
  }
}

void ViwlsEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViwlsEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViwlsEdge_descriptor_;
}

const ViwlsEdge& ViwlsEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

ViwlsEdge* ViwlsEdge::default_instance_ = NULL;

ViwlsEdge* ViwlsEdge::New() const {
  return new ViwlsEdge;
}

void ViwlsEdge::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
  }
  imu_timestamps_.Clear();
  imu_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViwlsEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.ViwlsEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imu_timestamps;
        break;
      }

      // repeated int64 imu_timestamps = 3;
      case 3: {
        if (tag == 24) {
         parse_imu_timestamps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_imu_timestamps())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_imu_timestamps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imu_timestamps;
        if (input->ExpectTag(33)) goto parse_imu_data;
        break;
      }

      // repeated double imu_data = 4;
      case 4: {
        if (tag == 33) {
         parse_imu_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_imu_data())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_imu_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_imu_data;
        if (input->ExpectTag(42)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 5;
      case 5: {
        if (tag == 42) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.ViwlsEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.ViwlsEdge)
  return false;
#undef DO_
}

void ViwlsEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.ViwlsEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // repeated int64 imu_timestamps = 3;
  for (int i = 0; i < this->imu_timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->imu_timestamps(i), output);
  }

  // repeated double imu_data = 4;
  for (int i = 0; i < this->imu_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->imu_data(i), output);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.ViwlsEdge)
}

::google::protobuf::uint8* ViwlsEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.ViwlsEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // repeated int64 imu_timestamps = 3;
  for (int i = 0; i < this->imu_timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->imu_timestamps(i), target);
  }

  // repeated double imu_data = 4;
  for (int i = 0; i < this->imu_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->imu_data(i), target);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.ViwlsEdge)
  return target;
}

int ViwlsEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 5;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated int64 imu_timestamps = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->imu_timestamps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->imu_timestamps(i));
    }
    total_size += 1 * this->imu_timestamps_size() + data_size;
  }

  // repeated double imu_data = 4;
  {
    int data_size = 0;
    data_size = 8 * this->imu_data_size();
    total_size += 1 * this->imu_data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViwlsEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViwlsEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViwlsEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViwlsEdge::MergeFrom(const ViwlsEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  imu_timestamps_.MergeFrom(from.imu_timestamps_);
  imu_data_.MergeFrom(from.imu_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViwlsEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViwlsEdge::CopyFrom(const ViwlsEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViwlsEdge::IsInitialized() const {

  return true;
}

void ViwlsEdge::Swap(ViwlsEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    imu_timestamps_.Swap(&other->imu_timestamps_);
    imu_data_.Swap(&other->imu_data_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViwlsEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViwlsEdge_descriptor_;
  metadata.reflection = ViwlsEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformationEdge::kFromFieldNumber;
const int TransformationEdge::kToFieldNumber;
const int TransformationEdge::kMissionIdFieldNumber;
const int TransformationEdge::kTABFieldNumber;
const int TransformationEdge::kTABCovarianceFieldNumber;
const int TransformationEdge::kSensorIdFieldNumber;
#endif  // !_MSC_VER

TransformationEdge::TransformationEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.TransformationEdge)
}

void TransformationEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  sensor_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

TransformationEdge::TransformationEdge(const TransformationEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.TransformationEdge)
}

void TransformationEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  sensor_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformationEdge::~TransformationEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.TransformationEdge)
  SharedDtor();
}

void TransformationEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
    delete sensor_id_;
  }
}

void TransformationEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformationEdge_descriptor_;
}

const TransformationEdge& TransformationEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

TransformationEdge* TransformationEdge::default_instance_ = NULL;

TransformationEdge* TransformationEdge::New() const {
  return new TransformationEdge;
}

void TransformationEdge::Clear() {
  if (_has_bits_[0 / 32] & 39) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::common::proto::Id::Clear();
    }
  }
  t_a_b_.Clear();
  t_a_b_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformationEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.TransformationEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 3;
      case 3: {
        if (tag == 26) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        break;
      }

      // repeated double T_A_B = 4;
      case 4: {
        if (tag == 33) {
         parse_T_A_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_t_a_b())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        break;
      }

      // repeated double T_A_B_covariance = 5;
      case 5: {
        if (tag == 41) {
         parse_T_A_B_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_t_a_b_covariance())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        if (input->ExpectTag(50)) goto parse_sensor_id;
        break;
      }

      // optional .common.proto.Id sensor_id = 6;
      case 6: {
        if (tag == 50) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.TransformationEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.TransformationEdge)
  return false;
#undef DO_
}

void TransformationEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.TransformationEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_id(), output);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->t_a_b(i), output);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->t_a_b_covariance(i), output);
  }

  // optional .common.proto.Id sensor_id = 6;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.TransformationEdge)
}

::google::protobuf::uint8* TransformationEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.TransformationEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_id(), target);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->t_a_b(i), target);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->t_a_b_covariance(i), target);
  }

  // optional .common.proto.Id sensor_id = 6;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.TransformationEdge)
  return target;
}

int TransformationEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

    // optional .common.proto.Id sensor_id = 6;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_id());
    }

  }
  // repeated double T_A_B = 4;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_size();
    total_size += 1 * this->t_a_b_size() + data_size;
  }

  // repeated double T_A_B_covariance = 5;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_covariance_size();
    total_size += 1 * this->t_a_b_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformationEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformationEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformationEdge::MergeFrom(const TransformationEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_a_b_.MergeFrom(from.t_a_b_);
  t_a_b_covariance_.MergeFrom(from.t_a_b_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::common::proto::Id::MergeFrom(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformationEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationEdge::CopyFrom(const TransformationEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationEdge::IsInitialized() const {

  return true;
}

void TransformationEdge::Swap(TransformationEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(mission_id_, other->mission_id_);
    t_a_b_.Swap(&other->t_a_b_);
    t_a_b_covariance_.Swap(&other->t_a_b_covariance_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformationEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformationEdge_descriptor_;
  metadata.reflection = TransformationEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CklamEdge::kFromFieldNumber;
const int CklamEdge::kToFieldNumber;
const int CklamEdge::kMissionIdFieldNumber;
const int CklamEdge::kBFieldNumber;
const int CklamEdge::kAFieldNumber;
const int CklamEdge::kKeyframeTGBFromFieldNumber;
const int CklamEdge::kKeyframeTGBToFieldNumber;
#endif  // !_MSC_VER

CklamEdge::CklamEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.CklamEdge)
}

void CklamEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

CklamEdge::CklamEdge(const CklamEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.CklamEdge)
}

void CklamEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CklamEdge::~CklamEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.CklamEdge)
  SharedDtor();
}

void CklamEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
  }
}

void CklamEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CklamEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CklamEdge_descriptor_;
}

const CklamEdge& CklamEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

CklamEdge* CklamEdge::default_instance_ = NULL;

CklamEdge* CklamEdge::New() const {
  return new CklamEdge;
}

void CklamEdge::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
  }
  b_.Clear();
  a_.Clear();
  keyframe_t_g_b_from_.Clear();
  keyframe_t_g_b_to_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CklamEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.CklamEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 3;
      case 3: {
        if (tag == 26) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_b;
        break;
      }

      // repeated double b = 4;
      case 4: {
        if (tag == 33) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_b())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_b;
        if (input->ExpectTag(41)) goto parse_A;
        break;
      }

      // repeated double A = 5;
      case 5: {
        if (tag == 41) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_a())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_a())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_A;
        if (input->ExpectTag(49)) goto parse_keyframe_T_G_B_from;
        break;
      }

      // repeated double keyframe_T_G_B_from = 6;
      case 6: {
        if (tag == 49) {
         parse_keyframe_T_G_B_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_keyframe_t_g_b_from())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_keyframe_t_g_b_from())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_keyframe_T_G_B_from;
        if (input->ExpectTag(57)) goto parse_keyframe_T_G_B_to;
        break;
      }

      // repeated double keyframe_T_G_B_to = 7;
      case 7: {
        if (tag == 57) {
         parse_keyframe_T_G_B_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_keyframe_t_g_b_to())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_keyframe_t_g_b_to())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_keyframe_T_G_B_to;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.CklamEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.CklamEdge)
  return false;
#undef DO_
}

void CklamEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.CklamEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_id(), output);
  }

  // repeated double b = 4;
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->b(i), output);
  }

  // repeated double A = 5;
  for (int i = 0; i < this->a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->a(i), output);
  }

  // repeated double keyframe_T_G_B_from = 6;
  for (int i = 0; i < this->keyframe_t_g_b_from_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->keyframe_t_g_b_from(i), output);
  }

  // repeated double keyframe_T_G_B_to = 7;
  for (int i = 0; i < this->keyframe_t_g_b_to_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->keyframe_t_g_b_to(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.CklamEdge)
}

::google::protobuf::uint8* CklamEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.CklamEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_id(), target);
  }

  // repeated double b = 4;
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->b(i), target);
  }

  // repeated double A = 5;
  for (int i = 0; i < this->a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->a(i), target);
  }

  // repeated double keyframe_T_G_B_from = 6;
  for (int i = 0; i < this->keyframe_t_g_b_from_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->keyframe_t_g_b_from(i), target);
  }

  // repeated double keyframe_T_G_B_to = 7;
  for (int i = 0; i < this->keyframe_t_g_b_to_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->keyframe_t_g_b_to(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.CklamEdge)
  return target;
}

int CklamEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated double b = 4;
  {
    int data_size = 0;
    data_size = 8 * this->b_size();
    total_size += 1 * this->b_size() + data_size;
  }

  // repeated double A = 5;
  {
    int data_size = 0;
    data_size = 8 * this->a_size();
    total_size += 1 * this->a_size() + data_size;
  }

  // repeated double keyframe_T_G_B_from = 6;
  {
    int data_size = 0;
    data_size = 8 * this->keyframe_t_g_b_from_size();
    total_size += 1 * this->keyframe_t_g_b_from_size() + data_size;
  }

  // repeated double keyframe_T_G_B_to = 7;
  {
    int data_size = 0;
    data_size = 8 * this->keyframe_t_g_b_to_size();
    total_size += 1 * this->keyframe_t_g_b_to_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CklamEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CklamEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CklamEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CklamEdge::MergeFrom(const CklamEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  b_.MergeFrom(from.b_);
  a_.MergeFrom(from.a_);
  keyframe_t_g_b_from_.MergeFrom(from.keyframe_t_g_b_from_);
  keyframe_t_g_b_to_.MergeFrom(from.keyframe_t_g_b_to_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CklamEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CklamEdge::CopyFrom(const CklamEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CklamEdge::IsInitialized() const {

  return true;
}

void CklamEdge::Swap(CklamEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(mission_id_, other->mission_id_);
    b_.Swap(&other->b_);
    a_.Swap(&other->a_);
    keyframe_t_g_b_from_.Swap(&other->keyframe_t_g_b_from_);
    keyframe_t_g_b_to_.Swap(&other->keyframe_t_g_b_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CklamEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CklamEdge_descriptor_;
  metadata.reflection = CklamEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoopclosureEdge::kFromFieldNumber;
const int LoopclosureEdge::kToFieldNumber;
const int LoopclosureEdge::kMissionIdFieldNumber;
const int LoopclosureEdge::kTABFieldNumber;
const int LoopclosureEdge::kTABCovarianceFieldNumber;
const int LoopclosureEdge::kSwitchVariableFieldNumber;
const int LoopclosureEdge::kSwitchVariableVarianceFieldNumber;
#endif  // !_MSC_VER

LoopclosureEdge::LoopclosureEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.LoopclosureEdge)
}

void LoopclosureEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

LoopclosureEdge::LoopclosureEdge(const LoopclosureEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.LoopclosureEdge)
}

void LoopclosureEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  switch_variable_ = 0;
  switch_variable_variance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoopclosureEdge::~LoopclosureEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.LoopclosureEdge)
  SharedDtor();
}

void LoopclosureEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
  }
}

void LoopclosureEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoopclosureEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopclosureEdge_descriptor_;
}

const LoopclosureEdge& LoopclosureEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

LoopclosureEdge* LoopclosureEdge::default_instance_ = NULL;

LoopclosureEdge* LoopclosureEdge::New() const {
  return new LoopclosureEdge;
}

void LoopclosureEdge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoopclosureEdge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(switch_variable_, switch_variable_variance_);
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  t_a_b_.Clear();
  t_a_b_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoopclosureEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.LoopclosureEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 3;
      case 3: {
        if (tag == 26) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        break;
      }

      // repeated double T_A_B = 4;
      case 4: {
        if (tag == 33) {
         parse_T_A_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_t_a_b())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        break;
      }

      // repeated double T_A_B_covariance = 5;
      case 5: {
        if (tag == 41) {
         parse_T_A_B_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_t_a_b_covariance())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        if (input->ExpectTag(49)) goto parse_switch_variable;
        break;
      }

      // optional double switch_variable = 6;
      case 6: {
        if (tag == 49) {
         parse_switch_variable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_variable_)));
          set_has_switch_variable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_switch_variable_variance;
        break;
      }

      // optional double switch_variable_variance = 7;
      case 7: {
        if (tag == 57) {
         parse_switch_variable_variance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &switch_variable_variance_)));
          set_has_switch_variable_variance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.LoopclosureEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.LoopclosureEdge)
  return false;
#undef DO_
}

void LoopclosureEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.LoopclosureEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_id(), output);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->t_a_b(i), output);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->t_a_b_covariance(i), output);
  }

  // optional double switch_variable = 6;
  if (has_switch_variable()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->switch_variable(), output);
  }

  // optional double switch_variable_variance = 7;
  if (has_switch_variable_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->switch_variable_variance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.LoopclosureEdge)
}

::google::protobuf::uint8* LoopclosureEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.LoopclosureEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_id(), target);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->t_a_b(i), target);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->t_a_b_covariance(i), target);
  }

  // optional double switch_variable = 6;
  if (has_switch_variable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->switch_variable(), target);
  }

  // optional double switch_variable_variance = 7;
  if (has_switch_variable_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->switch_variable_variance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.LoopclosureEdge)
  return target;
}

int LoopclosureEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

    // optional double switch_variable = 6;
    if (has_switch_variable()) {
      total_size += 1 + 8;
    }

    // optional double switch_variable_variance = 7;
    if (has_switch_variable_variance()) {
      total_size += 1 + 8;
    }

  }
  // repeated double T_A_B = 4;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_size();
    total_size += 1 * this->t_a_b_size() + data_size;
  }

  // repeated double T_A_B_covariance = 5;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_covariance_size();
    total_size += 1 * this->t_a_b_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoopclosureEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoopclosureEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoopclosureEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoopclosureEdge::MergeFrom(const LoopclosureEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_a_b_.MergeFrom(from.t_a_b_);
  t_a_b_covariance_.MergeFrom(from.t_a_b_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
    if (from.has_switch_variable()) {
      set_switch_variable(from.switch_variable());
    }
    if (from.has_switch_variable_variance()) {
      set_switch_variable_variance(from.switch_variable_variance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoopclosureEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopclosureEdge::CopyFrom(const LoopclosureEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopclosureEdge::IsInitialized() const {

  return true;
}

void LoopclosureEdge::Swap(LoopclosureEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(mission_id_, other->mission_id_);
    t_a_b_.Swap(&other->t_a_b_);
    t_a_b_covariance_.Swap(&other->t_a_b_covariance_);
    std::swap(switch_variable_, other->switch_variable_);
    std::swap(switch_variable_variance_, other->switch_variable_variance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoopclosureEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoopclosureEdge_descriptor_;
  metadata.reflection = LoopclosureEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaserEdge::kFromFieldNumber;
const int LaserEdge::kToFieldNumber;
const int LaserEdge::kLaserTimestampsNsFieldNumber;
const int LaserEdge::kLaserDataXyziFieldNumber;
const int LaserEdge::kMissionIdFieldNumber;
#endif  // !_MSC_VER

LaserEdge::LaserEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.LaserEdge)
}

void LaserEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

LaserEdge::LaserEdge(const LaserEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.LaserEdge)
}

void LaserEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaserEdge::~LaserEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.LaserEdge)
  SharedDtor();
}

void LaserEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
  }
}

void LaserEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserEdge_descriptor_;
}

const LaserEdge& LaserEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

LaserEdge* LaserEdge::default_instance_ = NULL;

LaserEdge* LaserEdge::New() const {
  return new LaserEdge;
}

void LaserEdge::Clear() {
  if (_has_bits_[0 / 32] & 19) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
  }
  laser_timestamps_ns_.Clear();
  laser_data_xyzi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaserEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.LaserEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_laser_timestamps_ns;
        break;
      }

      // repeated int64 laser_timestamps_ns = 3;
      case 3: {
        if (tag == 24) {
         parse_laser_timestamps_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_laser_timestamps_ns())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_laser_timestamps_ns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_laser_timestamps_ns;
        if (input->ExpectTag(33)) goto parse_laser_data_xyzi;
        break;
      }

      // repeated double laser_data_xyzi = 4;
      case 4: {
        if (tag == 33) {
         parse_laser_data_xyzi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_laser_data_xyzi())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_laser_data_xyzi())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_laser_data_xyzi;
        if (input->ExpectTag(42)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 5;
      case 5: {
        if (tag == 42) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.LaserEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.LaserEdge)
  return false;
#undef DO_
}

void LaserEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.LaserEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // repeated int64 laser_timestamps_ns = 3;
  for (int i = 0; i < this->laser_timestamps_ns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->laser_timestamps_ns(i), output);
  }

  // repeated double laser_data_xyzi = 4;
  for (int i = 0; i < this->laser_data_xyzi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->laser_data_xyzi(i), output);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.LaserEdge)
}

::google::protobuf::uint8* LaserEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.LaserEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // repeated int64 laser_timestamps_ns = 3;
  for (int i = 0; i < this->laser_timestamps_ns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->laser_timestamps_ns(i), target);
  }

  // repeated double laser_data_xyzi = 4;
  for (int i = 0; i < this->laser_data_xyzi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->laser_data_xyzi(i), target);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.LaserEdge)
  return target;
}

int LaserEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 5;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated int64 laser_timestamps_ns = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->laser_timestamps_ns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->laser_timestamps_ns(i));
    }
    total_size += 1 * this->laser_timestamps_ns_size() + data_size;
  }

  // repeated double laser_data_xyzi = 4;
  {
    int data_size = 0;
    data_size = 8 * this->laser_data_xyzi_size();
    total_size += 1 * this->laser_data_xyzi_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaserEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaserEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaserEdge::MergeFrom(const LaserEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  laser_timestamps_ns_.MergeFrom(from.laser_timestamps_ns_);
  laser_data_xyzi_.MergeFrom(from.laser_data_xyzi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaserEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserEdge::CopyFrom(const LaserEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserEdge::IsInitialized() const {

  return true;
}

void LaserEdge::Swap(LaserEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    laser_timestamps_ns_.Swap(&other->laser_timestamps_ns_);
    laser_data_xyzi_.Swap(&other->laser_data_xyzi_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaserEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserEdge_descriptor_;
  metadata.reflection = LaserEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryEdge::kFromFieldNumber;
const int TrajectoryEdge::kToFieldNumber;
const int TrajectoryEdge::kTrajectoryTimestampsNsFieldNumber;
const int TrajectoryEdge::kTrajectoryGTIPqFieldNumber;
const int TrajectoryEdge::kMissionIdFieldNumber;
const int TrajectoryEdge::kTrajectoryIdentifierFieldNumber;
#endif  // !_MSC_VER

TrajectoryEdge::TrajectoryEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.TrajectoryEdge)
}

void TrajectoryEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

TrajectoryEdge::TrajectoryEdge(const TrajectoryEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.TrajectoryEdge)
}

void TrajectoryEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  trajectory_identifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryEdge::~TrajectoryEdge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.TrajectoryEdge)
  SharedDtor();
}

void TrajectoryEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
  }
}

void TrajectoryEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryEdge_descriptor_;
}

const TrajectoryEdge& TrajectoryEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

TrajectoryEdge* TrajectoryEdge::default_instance_ = NULL;

TrajectoryEdge* TrajectoryEdge::New() const {
  return new TrajectoryEdge;
}

void TrajectoryEdge::Clear() {
  if (_has_bits_[0 / 32] & 51) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
    trajectory_identifier_ = 0u;
  }
  trajectory_timestamps_ns_.Clear();
  trajectory_g_t_i_pq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.TrajectoryEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trajectory_timestamps_ns;
        break;
      }

      // repeated int64 trajectory_timestamps_ns = 3;
      case 3: {
        if (tag == 24) {
         parse_trajectory_timestamps_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_trajectory_timestamps_ns())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_trajectory_timestamps_ns())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trajectory_timestamps_ns;
        if (input->ExpectTag(33)) goto parse_trajectory_G_T_I_pq;
        break;
      }

      // repeated double trajectory_G_T_I_pq = 4;
      case 4: {
        if (tag == 33) {
         parse_trajectory_G_T_I_pq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_trajectory_g_t_i_pq())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_trajectory_g_t_i_pq())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_trajectory_G_T_I_pq;
        if (input->ExpectTag(42)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 5;
      case 5: {
        if (tag == 42) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_trajectory_identifier;
        break;
      }

      // optional uint32 trajectory_identifier = 6;
      case 6: {
        if (tag == 48) {
         parse_trajectory_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trajectory_identifier_)));
          set_has_trajectory_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.TrajectoryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.TrajectoryEdge)
  return false;
#undef DO_
}

void TrajectoryEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.TrajectoryEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // repeated int64 trajectory_timestamps_ns = 3;
  for (int i = 0; i < this->trajectory_timestamps_ns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->trajectory_timestamps_ns(i), output);
  }

  // repeated double trajectory_G_T_I_pq = 4;
  for (int i = 0; i < this->trajectory_g_t_i_pq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->trajectory_g_t_i_pq(i), output);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_id(), output);
  }

  // optional uint32 trajectory_identifier = 6;
  if (has_trajectory_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->trajectory_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.TrajectoryEdge)
}

::google::protobuf::uint8* TrajectoryEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.TrajectoryEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // repeated int64 trajectory_timestamps_ns = 3;
  for (int i = 0; i < this->trajectory_timestamps_ns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->trajectory_timestamps_ns(i), target);
  }

  // repeated double trajectory_G_T_I_pq = 4;
  for (int i = 0; i < this->trajectory_g_t_i_pq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->trajectory_g_t_i_pq(i), target);
  }

  // optional .common.proto.Id mission_id = 5;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mission_id(), target);
  }

  // optional uint32 trajectory_identifier = 6;
  if (has_trajectory_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->trajectory_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.TrajectoryEdge)
  return target;
}

int TrajectoryEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 5;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

    // optional uint32 trajectory_identifier = 6;
    if (has_trajectory_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trajectory_identifier());
    }

  }
  // repeated int64 trajectory_timestamps_ns = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->trajectory_timestamps_ns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->trajectory_timestamps_ns(i));
    }
    total_size += 1 * this->trajectory_timestamps_ns_size() + data_size;
  }

  // repeated double trajectory_G_T_I_pq = 4;
  {
    int data_size = 0;
    data_size = 8 * this->trajectory_g_t_i_pq_size();
    total_size += 1 * this->trajectory_g_t_i_pq_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryEdge::MergeFrom(const TrajectoryEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  trajectory_timestamps_ns_.MergeFrom(from.trajectory_timestamps_ns_);
  trajectory_g_t_i_pq_.MergeFrom(from.trajectory_g_t_i_pq_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
    if (from.has_trajectory_identifier()) {
      set_trajectory_identifier(from.trajectory_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryEdge::CopyFrom(const TrajectoryEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryEdge::IsInitialized() const {

  return true;
}

void TrajectoryEdge::Swap(TrajectoryEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    trajectory_timestamps_ns_.Swap(&other->trajectory_timestamps_ns_);
    trajectory_g_t_i_pq_.Swap(&other->trajectory_g_t_i_pq_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(trajectory_identifier_, other->trajectory_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryEdge_descriptor_;
  metadata.reflection = TrajectoryEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge::kViwlsFieldNumber;
const int Edge::kOdometryFieldNumber;
const int Edge::kLoopclosureFieldNumber;
const int Edge::kTransformationFieldNumber;
const int Edge::kLaserFieldNumber;
const int Edge::kTrajectoryFieldNumber;
#endif  // !_MSC_VER

Edge::Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.Edge)
}

void Edge::InitAsDefaultInstance() {
  viwls_ = const_cast< ::vi_map::proto::ViwlsEdge*>(&::vi_map::proto::ViwlsEdge::default_instance());
  odometry_ = const_cast< ::vi_map::proto::TransformationEdge*>(&::vi_map::proto::TransformationEdge::default_instance());
  loopclosure_ = const_cast< ::vi_map::proto::LoopclosureEdge*>(&::vi_map::proto::LoopclosureEdge::default_instance());
  transformation_ = const_cast< ::vi_map::proto::TransformationEdge*>(&::vi_map::proto::TransformationEdge::default_instance());
  laser_ = const_cast< ::vi_map::proto::LaserEdge*>(&::vi_map::proto::LaserEdge::default_instance());
  trajectory_ = const_cast< ::vi_map::proto::TrajectoryEdge*>(&::vi_map::proto::TrajectoryEdge::default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.Edge)
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  viwls_ = NULL;
  odometry_ = NULL;
  loopclosure_ = NULL;
  transformation_ = NULL;
  laser_ = NULL;
  trajectory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vi_map.proto.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != default_instance_) {
    delete viwls_;
    delete odometry_;
    delete loopclosure_;
    delete transformation_;
    delete laser_;
    delete trajectory_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New() const {
  return new Edge;
}

void Edge::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_viwls()) {
      if (viwls_ != NULL) viwls_->::vi_map::proto::ViwlsEdge::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::vi_map::proto::TransformationEdge::Clear();
    }
    if (has_loopclosure()) {
      if (loopclosure_ != NULL) loopclosure_->::vi_map::proto::LoopclosureEdge::Clear();
    }
    if (has_transformation()) {
      if (transformation_ != NULL) transformation_->::vi_map::proto::TransformationEdge::Clear();
    }
    if (has_laser()) {
      if (laser_ != NULL) laser_->::vi_map::proto::LaserEdge::Clear();
    }
    if (has_trajectory()) {
      if (trajectory_ != NULL) trajectory_->::vi_map::proto::TrajectoryEdge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vi_map.proto.ViwlsEdge viwls = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viwls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_odometry;
        break;
      }

      // optional .vi_map.proto.TransformationEdge odometry = 2;
      case 2: {
        if (tag == 18) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loopclosure;
        break;
      }

      // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
      case 3: {
        if (tag == 26) {
         parse_loopclosure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopclosure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transformation;
        break;
      }

      // optional .vi_map.proto.TransformationEdge transformation = 4;
      case 4: {
        if (tag == 34) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_laser;
        break;
      }

      // optional .vi_map.proto.LaserEdge laser = 5;
      case 5: {
        if (tag == 42) {
         parse_laser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trajectory;
        break;
      }

      // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
      case 6: {
        if (tag == 50) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.Edge)
  // optional .vi_map.proto.ViwlsEdge viwls = 1;
  if (has_viwls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->viwls(), output);
  }

  // optional .vi_map.proto.TransformationEdge odometry = 2;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->odometry(), output);
  }

  // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
  if (has_loopclosure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loopclosure(), output);
  }

  // optional .vi_map.proto.TransformationEdge transformation = 4;
  if (has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transformation(), output);
  }

  // optional .vi_map.proto.LaserEdge laser = 5;
  if (has_laser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->laser(), output);
  }

  // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
  if (has_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trajectory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.Edge)
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.Edge)
  // optional .vi_map.proto.ViwlsEdge viwls = 1;
  if (has_viwls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->viwls(), target);
  }

  // optional .vi_map.proto.TransformationEdge odometry = 2;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->odometry(), target);
  }

  // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
  if (has_loopclosure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loopclosure(), target);
  }

  // optional .vi_map.proto.TransformationEdge transformation = 4;
  if (has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transformation(), target);
  }

  // optional .vi_map.proto.LaserEdge laser = 5;
  if (has_laser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->laser(), target);
  }

  // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
  if (has_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trajectory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.Edge)
  return target;
}

int Edge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vi_map.proto.ViwlsEdge viwls = 1;
    if (has_viwls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viwls());
    }

    // optional .vi_map.proto.TransformationEdge odometry = 2;
    if (has_odometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

    // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
    if (has_loopclosure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopclosure());
    }

    // optional .vi_map.proto.TransformationEdge transformation = 4;
    if (has_transformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformation());
    }

    // optional .vi_map.proto.LaserEdge laser = 5;
    if (has_laser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser());
    }

    // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
    if (has_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viwls()) {
      mutable_viwls()->::vi_map::proto::ViwlsEdge::MergeFrom(from.viwls());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::vi_map::proto::TransformationEdge::MergeFrom(from.odometry());
    }
    if (from.has_loopclosure()) {
      mutable_loopclosure()->::vi_map::proto::LoopclosureEdge::MergeFrom(from.loopclosure());
    }
    if (from.has_transformation()) {
      mutable_transformation()->::vi_map::proto::TransformationEdge::MergeFrom(from.transformation());
    }
    if (from.has_laser()) {
      mutable_laser()->::vi_map::proto::LaserEdge::MergeFrom(from.laser());
    }
    if (from.has_trajectory()) {
      mutable_trajectory()->::vi_map::proto::TrajectoryEdge::MergeFrom(from.trajectory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other != this) {
    std::swap(viwls_, other->viwls_);
    std::swap(odometry_, other->odometry_);
    std::swap(loopclosure_, other->loopclosure_);
    std::swap(transformation_, other->transformation_);
    std::swap(laser_, other->laser_);
    std::swap(trajectory_, other->trajectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Landmark_Quality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Landmark_Quality_descriptor_;
}
bool Landmark_Quality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Landmark_Quality Landmark::kUnknown;
const Landmark_Quality Landmark::kBad;
const Landmark_Quality Landmark::kGood;
const Landmark_Quality Landmark::Quality_MIN;
const Landmark_Quality Landmark::Quality_MAX;
const int Landmark::Quality_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Landmark::kIdFieldNumber;
const int Landmark::kPositionFieldNumber;
const int Landmark::kCovarianceFieldNumber;
const int Landmark::kVertexIdsFieldNumber;
const int Landmark::kKeypointIndicesFieldNumber;
const int Landmark::kFrameIndicesFieldNumber;
const int Landmark::kQualityFieldNumber;
const int Landmark::kAppearancesFieldNumber;
#endif  // !_MSC_VER

Landmark::Landmark()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.Landmark)
}

void Landmark::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.Landmark)
}

void Landmark::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:vi_map.proto.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void Landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Landmark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Landmark_descriptor_;
}

const Landmark& Landmark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

Landmark* Landmark::default_instance_ = NULL;

Landmark* Landmark::New() const {
  return new Landmark;
}

void Landmark::Clear() {
  if (_has_bits_[0 / 32] & 65) {
    if (has_id()) {
      if (id_ != NULL) id_->::common::proto::Id::Clear();
    }
    quality_ = 0;
  }
  position_.Clear();
  covariance_.Clear();
  vertex_ids_.Clear();
  keypoint_indices_.Clear();
  frame_indices_.Clear();
  appearances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.Landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_position;
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (tag == 17) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_position())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_position;
        if (input->ExpectTag(25)) goto parse_covariance;
        break;
      }

      // repeated double covariance = 3;
      case 3: {
        if (tag == 25) {
         parse_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_covariance())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_covariance;
        if (input->ExpectTag(34)) goto parse_vertex_ids;
        break;
      }

      // repeated .common.proto.Id vertex_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_vertex_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vertex_ids;
        if (input->ExpectTag(40)) goto parse_keypoint_indices;
        break;
      }

      // repeated uint32 keypoint_indices = 5;
      case 5: {
        if (tag == 40) {
         parse_keypoint_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_keypoint_indices())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keypoint_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_keypoint_indices;
        if (input->ExpectTag(48)) goto parse_frame_indices;
        break;
      }

      // repeated uint32 frame_indices = 6;
      case 6: {
        if (tag == 48) {
         parse_frame_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_frame_indices())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_frame_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_frame_indices;
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional .vi_map.proto.Landmark.Quality quality = 7 [default = kUnknown];
      case 7: {
        if (tag == 56) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vi_map::proto::Landmark_Quality_IsValid(value)) {
            set_quality(static_cast< ::vi_map::proto::Landmark_Quality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_appearances;
        break;
      }

      // repeated int32 appearances = 8;
      case 8: {
        if (tag == 64) {
         parse_appearances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_appearances())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_appearances())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_appearances;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.Landmark)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated double position = 2;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->position(i), output);
  }

  // repeated double covariance = 3;
  for (int i = 0; i < this->covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->covariance(i), output);
  }

  // repeated .common.proto.Id vertex_ids = 4;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertex_ids(i), output);
  }

  // repeated uint32 keypoint_indices = 5;
  for (int i = 0; i < this->keypoint_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->keypoint_indices(i), output);
  }

  // repeated uint32 frame_indices = 6;
  for (int i = 0; i < this->frame_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->frame_indices(i), output);
  }

  // optional .vi_map.proto.Landmark.Quality quality = 7 [default = kUnknown];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->quality(), output);
  }

  // repeated int32 appearances = 8;
  for (int i = 0; i < this->appearances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->appearances(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.Landmark)
}

::google::protobuf::uint8* Landmark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.Landmark)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated double position = 2;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->position(i), target);
  }

  // repeated double covariance = 3;
  for (int i = 0; i < this->covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->covariance(i), target);
  }

  // repeated .common.proto.Id vertex_ids = 4;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vertex_ids(i), target);
  }

  // repeated uint32 keypoint_indices = 5;
  for (int i = 0; i < this->keypoint_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->keypoint_indices(i), target);
  }

  // repeated uint32 frame_indices = 6;
  for (int i = 0; i < this->frame_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->frame_indices(i), target);
  }

  // optional .vi_map.proto.Landmark.Quality quality = 7 [default = kUnknown];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->quality(), target);
  }

  // repeated int32 appearances = 8;
  for (int i = 0; i < this->appearances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->appearances(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.Landmark)
  return target;
}

int Landmark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .vi_map.proto.Landmark.Quality quality = 7 [default = kUnknown];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  // repeated double position = 2;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    total_size += 1 * this->position_size() + data_size;
  }

  // repeated double covariance = 3;
  {
    int data_size = 0;
    data_size = 8 * this->covariance_size();
    total_size += 1 * this->covariance_size() + data_size;
  }

  // repeated .common.proto.Id vertex_ids = 4;
  total_size += 1 * this->vertex_ids_size();
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex_ids(i));
  }

  // repeated uint32 keypoint_indices = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->keypoint_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keypoint_indices(i));
    }
    total_size += 1 * this->keypoint_indices_size() + data_size;
  }

  // repeated uint32 frame_indices = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->frame_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->frame_indices(i));
    }
    total_size += 1 * this->frame_indices_size() + data_size;
  }

  // repeated int32 appearances = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->appearances_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->appearances(i));
    }
    total_size += 1 * this->appearances_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Landmark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Landmark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Landmark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  covariance_.MergeFrom(from.covariance_);
  vertex_ids_.MergeFrom(from.vertex_ids_);
  keypoint_indices_.MergeFrom(from.keypoint_indices_);
  frame_indices_.MergeFrom(from.frame_indices_);
  appearances_.MergeFrom(from.appearances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Landmark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {

  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    position_.Swap(&other->position_);
    covariance_.Swap(&other->covariance_);
    vertex_ids_.Swap(&other->vertex_ids_);
    keypoint_indices_.Swap(&other->keypoint_indices_);
    frame_indices_.Swap(&other->frame_indices_);
    std::swap(quality_, other->quality_);
    appearances_.Swap(&other->appearances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Landmark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Landmark_descriptor_;
  metadata.reflection = Landmark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandmarkStore::kLandmarksFieldNumber;
#endif  // !_MSC_VER

LandmarkStore::LandmarkStore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.LandmarkStore)
}

void LandmarkStore::InitAsDefaultInstance() {
}

LandmarkStore::LandmarkStore(const LandmarkStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.LandmarkStore)
}

void LandmarkStore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandmarkStore::~LandmarkStore() {
  // @@protoc_insertion_point(destructor:vi_map.proto.LandmarkStore)
  SharedDtor();
}

void LandmarkStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandmarkStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkStore_descriptor_;
}

const LandmarkStore& LandmarkStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

LandmarkStore* LandmarkStore::default_instance_ = NULL;

LandmarkStore* LandmarkStore::New() const {
  return new LandmarkStore;
}

void LandmarkStore::Clear() {
  landmarks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandmarkStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.LandmarkStore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vi_map.proto.Landmark landmarks = 1;
      case 1: {
        if (tag == 10) {
         parse_landmarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_landmarks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.LandmarkStore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.LandmarkStore)
  return false;
#undef DO_
}

void LandmarkStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.LandmarkStore)
  // repeated .vi_map.proto.Landmark landmarks = 1;
  for (int i = 0; i < this->landmarks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->landmarks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.LandmarkStore)
}

::google::protobuf::uint8* LandmarkStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.LandmarkStore)
  // repeated .vi_map.proto.Landmark landmarks = 1;
  for (int i = 0; i < this->landmarks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->landmarks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.LandmarkStore)
  return target;
}

int LandmarkStore::ByteSize() const {
  int total_size = 0;

  // repeated .vi_map.proto.Landmark landmarks = 1;
  total_size += 1 * this->landmarks_size();
  for (int i = 0; i < this->landmarks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmarks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandmarkStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandmarkStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandmarkStore::MergeFrom(const LandmarkStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  landmarks_.MergeFrom(from.landmarks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandmarkStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkStore::CopyFrom(const LandmarkStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkStore::IsInitialized() const {

  return true;
}

void LandmarkStore::Swap(LandmarkStore* other) {
  if (other != this) {
    landmarks_.Swap(&other->landmarks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandmarkStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkStore_descriptor_;
  metadata.reflection = LandmarkStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionalSensorData::kGpsUtmMeasurementsFieldNumber;
const int OptionalSensorData::kGpsWgsMeasurementsFieldNumber;
#endif  // !_MSC_VER

OptionalSensorData::OptionalSensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.OptionalSensorData)
}

void OptionalSensorData::InitAsDefaultInstance() {
}

OptionalSensorData::OptionalSensorData(const OptionalSensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.OptionalSensorData)
}

void OptionalSensorData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalSensorData::~OptionalSensorData() {
  // @@protoc_insertion_point(destructor:vi_map.proto.OptionalSensorData)
  SharedDtor();
}

void OptionalSensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptionalSensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalSensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalSensorData_descriptor_;
}

const OptionalSensorData& OptionalSensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

OptionalSensorData* OptionalSensorData::default_instance_ = NULL;

OptionalSensorData* OptionalSensorData::New() const {
  return new OptionalSensorData;
}

void OptionalSensorData::Clear() {
  gps_utm_measurements_.Clear();
  gps_wgs_measurements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionalSensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.OptionalSensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .measurements.proto.GpsUtmMeasurement gps_utm_measurements = 1;
      case 1: {
        if (tag == 10) {
         parse_gps_utm_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gps_utm_measurements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gps_utm_measurements;
        if (input->ExpectTag(18)) goto parse_gps_wgs_measurements;
        break;
      }

      // repeated .measurements.proto.GpsWgsMeasurement gps_wgs_measurements = 2;
      case 2: {
        if (tag == 18) {
         parse_gps_wgs_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gps_wgs_measurements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gps_wgs_measurements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.OptionalSensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.OptionalSensorData)
  return false;
#undef DO_
}

void OptionalSensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.OptionalSensorData)
  // repeated .measurements.proto.GpsUtmMeasurement gps_utm_measurements = 1;
  for (int i = 0; i < this->gps_utm_measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps_utm_measurements(i), output);
  }

  // repeated .measurements.proto.GpsWgsMeasurement gps_wgs_measurements = 2;
  for (int i = 0; i < this->gps_wgs_measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gps_wgs_measurements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.OptionalSensorData)
}

::google::protobuf::uint8* OptionalSensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.OptionalSensorData)
  // repeated .measurements.proto.GpsUtmMeasurement gps_utm_measurements = 1;
  for (int i = 0; i < this->gps_utm_measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps_utm_measurements(i), target);
  }

  // repeated .measurements.proto.GpsWgsMeasurement gps_wgs_measurements = 2;
  for (int i = 0; i < this->gps_wgs_measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gps_wgs_measurements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.OptionalSensorData)
  return target;
}

int OptionalSensorData::ByteSize() const {
  int total_size = 0;

  // repeated .measurements.proto.GpsUtmMeasurement gps_utm_measurements = 1;
  total_size += 1 * this->gps_utm_measurements_size();
  for (int i = 0; i < this->gps_utm_measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gps_utm_measurements(i));
  }

  // repeated .measurements.proto.GpsWgsMeasurement gps_wgs_measurements = 2;
  total_size += 1 * this->gps_wgs_measurements_size();
  for (int i = 0; i < this->gps_wgs_measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gps_wgs_measurements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalSensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionalSensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionalSensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionalSensorData::MergeFrom(const OptionalSensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  gps_utm_measurements_.MergeFrom(from.gps_utm_measurements_);
  gps_wgs_measurements_.MergeFrom(from.gps_wgs_measurements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionalSensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalSensorData::CopyFrom(const OptionalSensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalSensorData::IsInitialized() const {

  return true;
}

void OptionalSensorData::Swap(OptionalSensorData* other) {
  if (other != this) {
    gps_utm_measurements_.Swap(&other->gps_utm_measurements_);
    gps_wgs_measurements_.Swap(&other->gps_wgs_measurements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionalSensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalSensorData_descriptor_;
  metadata.reflection = OptionalSensorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionalSensorDataMissionPair::kMissionIdFieldNumber;
const int OptionalSensorDataMissionPair::kOptionalSensorDataFieldNumber;
#endif  // !_MSC_VER

OptionalSensorDataMissionPair::OptionalSensorDataMissionPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.OptionalSensorDataMissionPair)
}

void OptionalSensorDataMissionPair::InitAsDefaultInstance() {
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  optional_sensor_data_ = const_cast< ::vi_map::proto::OptionalSensorData*>(&::vi_map::proto::OptionalSensorData::default_instance());
}

OptionalSensorDataMissionPair::OptionalSensorDataMissionPair(const OptionalSensorDataMissionPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.OptionalSensorDataMissionPair)
}

void OptionalSensorDataMissionPair::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = NULL;
  optional_sensor_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalSensorDataMissionPair::~OptionalSensorDataMissionPair() {
  // @@protoc_insertion_point(destructor:vi_map.proto.OptionalSensorDataMissionPair)
  SharedDtor();
}

void OptionalSensorDataMissionPair::SharedDtor() {
  if (this != default_instance_) {
    delete mission_id_;
    delete optional_sensor_data_;
  }
}

void OptionalSensorDataMissionPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalSensorDataMissionPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalSensorDataMissionPair_descriptor_;
}

const OptionalSensorDataMissionPair& OptionalSensorDataMissionPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

OptionalSensorDataMissionPair* OptionalSensorDataMissionPair::default_instance_ = NULL;

OptionalSensorDataMissionPair* OptionalSensorDataMissionPair::New() const {
  return new OptionalSensorDataMissionPair;
}

void OptionalSensorDataMissionPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
    if (has_optional_sensor_data()) {
      if (optional_sensor_data_ != NULL) optional_sensor_data_->::vi_map::proto::OptionalSensorData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionalSensorDataMissionPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.OptionalSensorDataMissionPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id mission_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_optional_sensor_data;
        break;
      }

      // optional .vi_map.proto.OptionalSensorData optional_sensor_data = 2;
      case 2: {
        if (tag == 18) {
         parse_optional_sensor_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_sensor_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.OptionalSensorDataMissionPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.OptionalSensorDataMissionPair)
  return false;
#undef DO_
}

void OptionalSensorDataMissionPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.OptionalSensorDataMissionPair)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_id(), output);
  }

  // optional .vi_map.proto.OptionalSensorData optional_sensor_data = 2;
  if (has_optional_sensor_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->optional_sensor_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.OptionalSensorDataMissionPair)
}

::google::protobuf::uint8* OptionalSensorDataMissionPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.OptionalSensorDataMissionPair)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_id(), target);
  }

  // optional .vi_map.proto.OptionalSensorData optional_sensor_data = 2;
  if (has_optional_sensor_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->optional_sensor_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.OptionalSensorDataMissionPair)
  return target;
}

int OptionalSensorDataMissionPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

    // optional .vi_map.proto.OptionalSensorData optional_sensor_data = 2;
    if (has_optional_sensor_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_sensor_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalSensorDataMissionPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionalSensorDataMissionPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionalSensorDataMissionPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionalSensorDataMissionPair::MergeFrom(const OptionalSensorDataMissionPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
    if (from.has_optional_sensor_data()) {
      mutable_optional_sensor_data()->::vi_map::proto::OptionalSensorData::MergeFrom(from.optional_sensor_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionalSensorDataMissionPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalSensorDataMissionPair::CopyFrom(const OptionalSensorDataMissionPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalSensorDataMissionPair::IsInitialized() const {

  return true;
}

void OptionalSensorDataMissionPair::Swap(OptionalSensorDataMissionPair* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(optional_sensor_data_, other->optional_sensor_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionalSensorDataMissionPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalSensorDataMissionPair_descriptor_;
  metadata.reflection = OptionalSensorDataMissionPair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Mission_BackBone_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_BackBone_descriptor_;
}
bool Mission_BackBone_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Mission_BackBone Mission::kViwls;
const Mission_BackBone Mission::kOdometry;
const Mission_BackBone Mission::BackBone_MIN;
const Mission_BackBone Mission::BackBone_MAX;
const int Mission::BackBone_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Mission::kBaseframeIdFieldNumber;
const int Mission::kRootVertexIdFieldNumber;
const int Mission::kBackboneFieldNumber;
const int Mission::kMissionResourceIdsFieldNumber;
const int Mission::kMissionResourceTypesFieldNumber;
const int Mission::kOptionalCameraResourcesFieldNumber;
const int Mission::kOptionalCamerasWithExtrinsicsFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.Mission)
}

void Mission::InitAsDefaultInstance() {
  baseframe_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  root_vertex_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  baseframe_id_ = NULL;
  root_vertex_id_ = NULL;
  backbone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:vi_map.proto.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
    delete baseframe_id_;
    delete root_vertex_id_;
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_baseframe_id()) {
      if (baseframe_id_ != NULL) baseframe_id_->::common::proto::Id::Clear();
    }
    if (has_root_vertex_id()) {
      if (root_vertex_id_ != NULL) root_vertex_id_->::common::proto::Id::Clear();
    }
    backbone_ = 0;
  }
  mission_resource_ids_.Clear();
  mission_resource_types_.Clear();
  optional_camera_resources_.Clear();
  optional_cameras_with_extrinsics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id baseframe_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseframe_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_root_vertex_id;
        break;
      }

      // optional .common.proto.Id root_vertex_id = 2;
      case 2: {
        if (tag == 18) {
         parse_root_vertex_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_vertex_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_backbone;
        break;
      }

      // optional .vi_map.proto.Mission.BackBone backbone = 3 [default = kViwls];
      case 3: {
        if (tag == 24) {
         parse_backbone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vi_map::proto::Mission_BackBone_IsValid(value)) {
            set_backbone(static_cast< ::vi_map::proto::Mission_BackBone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mission_resource_ids;
        break;
      }

      // repeated .common.proto.Id mission_resource_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_mission_resource_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_resource_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mission_resource_ids;
        if (input->ExpectTag(40)) goto parse_mission_resource_types;
        break;
      }

      // repeated int32 mission_resource_types = 5;
      case 5: {
        if (tag == 40) {
         parse_mission_resource_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_mission_resource_types())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mission_resource_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mission_resource_types;
        if (input->ExpectTag(50)) goto parse_optional_camera_resources;
        break;
      }

      // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 6;
      case 6: {
        if (tag == 50) {
         parse_optional_camera_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_camera_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_optional_camera_resources;
        if (input->ExpectTag(58)) goto parse_optional_cameras_with_extrinsics;
        break;
      }

      // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 7;
      case 7: {
        if (tag == 58) {
         parse_optional_cameras_with_extrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_cameras_with_extrinsics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_optional_cameras_with_extrinsics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.Mission)
  // optional .common.proto.Id baseframe_id = 1;
  if (has_baseframe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseframe_id(), output);
  }

  // optional .common.proto.Id root_vertex_id = 2;
  if (has_root_vertex_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->root_vertex_id(), output);
  }

  // optional .vi_map.proto.Mission.BackBone backbone = 3 [default = kViwls];
  if (has_backbone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->backbone(), output);
  }

  // repeated .common.proto.Id mission_resource_ids = 4;
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mission_resource_ids(i), output);
  }

  // repeated int32 mission_resource_types = 5;
  for (int i = 0; i < this->mission_resource_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->mission_resource_types(i), output);
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 6;
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->optional_camera_resources(i), output);
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 7;
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->optional_cameras_with_extrinsics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.Mission)
  // optional .common.proto.Id baseframe_id = 1;
  if (has_baseframe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseframe_id(), target);
  }

  // optional .common.proto.Id root_vertex_id = 2;
  if (has_root_vertex_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->root_vertex_id(), target);
  }

  // optional .vi_map.proto.Mission.BackBone backbone = 3 [default = kViwls];
  if (has_backbone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->backbone(), target);
  }

  // repeated .common.proto.Id mission_resource_ids = 4;
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mission_resource_ids(i), target);
  }

  // repeated int32 mission_resource_types = 5;
  for (int i = 0; i < this->mission_resource_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->mission_resource_types(i), target);
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 6;
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->optional_camera_resources(i), target);
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 7;
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->optional_cameras_with_extrinsics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id baseframe_id = 1;
    if (has_baseframe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseframe_id());
    }

    // optional .common.proto.Id root_vertex_id = 2;
    if (has_root_vertex_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_vertex_id());
    }

    // optional .vi_map.proto.Mission.BackBone backbone = 3 [default = kViwls];
    if (has_backbone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backbone());
    }

  }
  // repeated .common.proto.Id mission_resource_ids = 4;
  total_size += 1 * this->mission_resource_ids_size();
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_resource_ids(i));
  }

  // repeated int32 mission_resource_types = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->mission_resource_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mission_resource_types(i));
    }
    total_size += 1 * this->mission_resource_types_size() + data_size;
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 6;
  total_size += 1 * this->optional_camera_resources_size();
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_camera_resources(i));
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 7;
  total_size += 1 * this->optional_cameras_with_extrinsics_size();
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_cameras_with_extrinsics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_resource_ids_.MergeFrom(from.mission_resource_ids_);
  mission_resource_types_.MergeFrom(from.mission_resource_types_);
  optional_camera_resources_.MergeFrom(from.optional_camera_resources_);
  optional_cameras_with_extrinsics_.MergeFrom(from.optional_cameras_with_extrinsics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseframe_id()) {
      mutable_baseframe_id()->::common::proto::Id::MergeFrom(from.baseframe_id());
    }
    if (from.has_root_vertex_id()) {
      mutable_root_vertex_id()->::common::proto::Id::MergeFrom(from.root_vertex_id());
    }
    if (from.has_backbone()) {
      set_backbone(from.backbone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    std::swap(baseframe_id_, other->baseframe_id_);
    std::swap(root_vertex_id_, other->root_vertex_id_);
    std::swap(backbone_, other->backbone_);
    mission_resource_ids_.Swap(&other->mission_resource_ids_);
    mission_resource_types_.Swap(&other->mission_resource_types_);
    optional_camera_resources_.Swap(&other->optional_camera_resources_);
    optional_cameras_with_extrinsics_.Swap(&other->optional_cameras_with_extrinsics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionBaseframe::kTGMFieldNumber;
const int MissionBaseframe::kTGMCovarianceFieldNumber;
const int MissionBaseframe::kIsTGMKnownFieldNumber;
#endif  // !_MSC_VER

MissionBaseframe::MissionBaseframe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.MissionBaseframe)
}

void MissionBaseframe::InitAsDefaultInstance() {
}

MissionBaseframe::MissionBaseframe(const MissionBaseframe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.MissionBaseframe)
}

void MissionBaseframe::SharedCtor() {
  _cached_size_ = 0;
  is_t_g_m_known_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionBaseframe::~MissionBaseframe() {
  // @@protoc_insertion_point(destructor:vi_map.proto.MissionBaseframe)
  SharedDtor();
}

void MissionBaseframe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionBaseframe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionBaseframe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionBaseframe_descriptor_;
}

const MissionBaseframe& MissionBaseframe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

MissionBaseframe* MissionBaseframe::default_instance_ = NULL;

MissionBaseframe* MissionBaseframe::New() const {
  return new MissionBaseframe;
}

void MissionBaseframe::Clear() {
  is_t_g_m_known_ = false;
  t_g_m_.Clear();
  t_g_m_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionBaseframe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.MissionBaseframe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double T_G_M = 1;
      case 1: {
        if (tag == 9) {
         parse_T_G_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_t_g_m())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_g_m())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_T_G_M;
        if (input->ExpectTag(17)) goto parse_T_G_M_covariance;
        break;
      }

      // repeated double T_G_M_covariance = 2;
      case 2: {
        if (tag == 17) {
         parse_T_G_M_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_t_g_m_covariance())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_g_m_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_T_G_M_covariance;
        if (input->ExpectTag(24)) goto parse_is_T_G_M_known;
        break;
      }

      // optional bool is_T_G_M_known = 3;
      case 3: {
        if (tag == 24) {
         parse_is_T_G_M_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_t_g_m_known_)));
          set_has_is_t_g_m_known();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.MissionBaseframe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.MissionBaseframe)
  return false;
#undef DO_
}

void MissionBaseframe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.MissionBaseframe)
  // repeated double T_G_M = 1;
  for (int i = 0; i < this->t_g_m_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->t_g_m(i), output);
  }

  // repeated double T_G_M_covariance = 2;
  for (int i = 0; i < this->t_g_m_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->t_g_m_covariance(i), output);
  }

  // optional bool is_T_G_M_known = 3;
  if (has_is_t_g_m_known()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_t_g_m_known(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.MissionBaseframe)
}

::google::protobuf::uint8* MissionBaseframe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.MissionBaseframe)
  // repeated double T_G_M = 1;
  for (int i = 0; i < this->t_g_m_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->t_g_m(i), target);
  }

  // repeated double T_G_M_covariance = 2;
  for (int i = 0; i < this->t_g_m_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->t_g_m_covariance(i), target);
  }

  // optional bool is_T_G_M_known = 3;
  if (has_is_t_g_m_known()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_t_g_m_known(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.MissionBaseframe)
  return target;
}

int MissionBaseframe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool is_T_G_M_known = 3;
    if (has_is_t_g_m_known()) {
      total_size += 1 + 1;
    }

  }
  // repeated double T_G_M = 1;
  {
    int data_size = 0;
    data_size = 8 * this->t_g_m_size();
    total_size += 1 * this->t_g_m_size() + data_size;
  }

  // repeated double T_G_M_covariance = 2;
  {
    int data_size = 0;
    data_size = 8 * this->t_g_m_covariance_size();
    total_size += 1 * this->t_g_m_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionBaseframe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionBaseframe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionBaseframe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionBaseframe::MergeFrom(const MissionBaseframe& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_g_m_.MergeFrom(from.t_g_m_);
  t_g_m_covariance_.MergeFrom(from.t_g_m_covariance_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_is_t_g_m_known()) {
      set_is_t_g_m_known(from.is_t_g_m_known());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionBaseframe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionBaseframe::CopyFrom(const MissionBaseframe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionBaseframe::IsInitialized() const {

  return true;
}

void MissionBaseframe::Swap(MissionBaseframe* other) {
  if (other != this) {
    t_g_m_.Swap(&other->t_g_m_);
    t_g_m_covariance_.Swap(&other->t_g_m_covariance_);
    std::swap(is_t_g_m_known_, other->is_t_g_m_known_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionBaseframe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionBaseframe_descriptor_;
  metadata.reflection = MissionBaseframe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kTypeFieldNumber;
const int ResourceInfo::kUriFormatFieldNumber;
const int ResourceInfo::kUriFieldNumber;
const int ResourceInfo::kMissionIdFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.ResourceInfo)
}

void ResourceInfo::InitAsDefaultInstance() {
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.ResourceInfo)
}

void ResourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  uri_format_ = 0u;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  // @@protoc_insertion_point(destructor:vi_map.proto.ResourceInfo)
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
    delete mission_id_;
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, uri_format_);
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.ResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uri_format;
        break;
      }

      // optional uint32 uri_format = 2;
      case 2: {
        if (tag == 16) {
         parse_uri_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uri_format_)));
          set_has_uri_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uri;
        break;
      }

      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 4;
      case 4: {
        if (tag == 34) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.ResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.ResourceInfo)
  return false;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.ResourceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 uri_format = 2;
  if (has_uri_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uri_format(), output);
  }

  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional .common.proto.Id mission_id = 4;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.ResourceInfo)
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.ResourceInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 uri_format = 2;
  if (has_uri_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uri_format(), target);
  }

  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional .common.proto.Id mission_id = 4;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.ResourceInfo)
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 uri_format = 2;
    if (has_uri_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uri_format());
    }

    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .common.proto.Id mission_id = 4;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uri_format()) {
      set_uri_format(from.uri_format());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {

  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uri_format_, other->uri_format_);
    std::swap(uri_, other->uri_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameResourceMap::kResourceTypeMapFieldNumber;
#endif  // !_MSC_VER

FrameResourceMap::FrameResourceMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.FrameResourceMap)
}

void FrameResourceMap::InitAsDefaultInstance() {
}

FrameResourceMap::FrameResourceMap(const FrameResourceMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.FrameResourceMap)
}

void FrameResourceMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameResourceMap::~FrameResourceMap() {
  // @@protoc_insertion_point(destructor:vi_map.proto.FrameResourceMap)
  SharedDtor();
}

void FrameResourceMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameResourceMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameResourceMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameResourceMap_descriptor_;
}

const FrameResourceMap& FrameResourceMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

FrameResourceMap* FrameResourceMap::default_instance_ = NULL;

FrameResourceMap* FrameResourceMap::New() const {
  return new FrameResourceMap;
}

void FrameResourceMap::Clear() {
  resource_type_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameResourceMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.FrameResourceMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vi_map.proto.ResourceTypeMap resource_type_map = 1;
      case 1: {
        if (tag == 10) {
         parse_resource_type_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_type_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_resource_type_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.FrameResourceMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.FrameResourceMap)
  return false;
#undef DO_
}

void FrameResourceMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.FrameResourceMap)
  // repeated .vi_map.proto.ResourceTypeMap resource_type_map = 1;
  for (int i = 0; i < this->resource_type_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource_type_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.FrameResourceMap)
}

::google::protobuf::uint8* FrameResourceMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.FrameResourceMap)
  // repeated .vi_map.proto.ResourceTypeMap resource_type_map = 1;
  for (int i = 0; i < this->resource_type_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource_type_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.FrameResourceMap)
  return target;
}

int FrameResourceMap::ByteSize() const {
  int total_size = 0;

  // repeated .vi_map.proto.ResourceTypeMap resource_type_map = 1;
  total_size += 1 * this->resource_type_map_size();
  for (int i = 0; i < this->resource_type_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_type_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameResourceMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameResourceMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameResourceMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameResourceMap::MergeFrom(const FrameResourceMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_type_map_.MergeFrom(from.resource_type_map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameResourceMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameResourceMap::CopyFrom(const FrameResourceMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameResourceMap::IsInitialized() const {

  return true;
}

void FrameResourceMap::Swap(FrameResourceMap* other) {
  if (other != this) {
    resource_type_map_.Swap(&other->resource_type_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameResourceMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameResourceMap_descriptor_;
  metadata.reflection = FrameResourceMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceTypeMap::kTypeFieldNumber;
const int ResourceTypeMap::kResourceIdsFieldNumber;
#endif  // !_MSC_VER

ResourceTypeMap::ResourceTypeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.ResourceTypeMap)
}

void ResourceTypeMap::InitAsDefaultInstance() {
}

ResourceTypeMap::ResourceTypeMap(const ResourceTypeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.ResourceTypeMap)
}

void ResourceTypeMap::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceTypeMap::~ResourceTypeMap() {
  // @@protoc_insertion_point(destructor:vi_map.proto.ResourceTypeMap)
  SharedDtor();
}

void ResourceTypeMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceTypeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceTypeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceTypeMap_descriptor_;
}

const ResourceTypeMap& ResourceTypeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

ResourceTypeMap* ResourceTypeMap::default_instance_ = NULL;

ResourceTypeMap* ResourceTypeMap::New() const {
  return new ResourceTypeMap;
}

void ResourceTypeMap::Clear() {
  type_ = 0u;
  resource_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceTypeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.ResourceTypeMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource_ids;
        break;
      }

      // repeated .common.proto.Id resource_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_resource_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resource_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.ResourceTypeMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.ResourceTypeMap)
  return false;
#undef DO_
}

void ResourceTypeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.ResourceTypeMap)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .common.proto.Id resource_ids = 2;
  for (int i = 0; i < this->resource_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.ResourceTypeMap)
}

::google::protobuf::uint8* ResourceTypeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.ResourceTypeMap)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .common.proto.Id resource_ids = 2;
  for (int i = 0; i < this->resource_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.ResourceTypeMap)
  return target;
}

int ResourceTypeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .common.proto.Id resource_ids = 2;
  total_size += 1 * this->resource_ids_size();
  for (int i = 0; i < this->resource_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceTypeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceTypeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceTypeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceTypeMap::MergeFrom(const ResourceTypeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_ids_.MergeFrom(from.resource_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceTypeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceTypeMap::CopyFrom(const ResourceTypeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTypeMap::IsInitialized() const {

  return true;
}

void ResourceTypeMap::Swap(ResourceTypeMap* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    resource_ids_.Swap(&other->resource_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceTypeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceTypeMap_descriptor_;
  metadata.reflection = ResourceTypeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandmarkToVertexReference::kVertexIdFieldNumber;
const int LandmarkToVertexReference::kLandmarkIdFieldNumber;
#endif  // !_MSC_VER

LandmarkToVertexReference::LandmarkToVertexReference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.LandmarkToVertexReference)
}

void LandmarkToVertexReference::InitAsDefaultInstance() {
  vertex_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  landmark_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

LandmarkToVertexReference::LandmarkToVertexReference(const LandmarkToVertexReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.LandmarkToVertexReference)
}

void LandmarkToVertexReference::SharedCtor() {
  _cached_size_ = 0;
  vertex_id_ = NULL;
  landmark_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandmarkToVertexReference::~LandmarkToVertexReference() {
  // @@protoc_insertion_point(destructor:vi_map.proto.LandmarkToVertexReference)
  SharedDtor();
}

void LandmarkToVertexReference::SharedDtor() {
  if (this != default_instance_) {
    delete vertex_id_;
    delete landmark_id_;
  }
}

void LandmarkToVertexReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkToVertexReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandmarkToVertexReference_descriptor_;
}

const LandmarkToVertexReference& LandmarkToVertexReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

LandmarkToVertexReference* LandmarkToVertexReference::default_instance_ = NULL;

LandmarkToVertexReference* LandmarkToVertexReference::New() const {
  return new LandmarkToVertexReference;
}

void LandmarkToVertexReference::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_vertex_id()) {
      if (vertex_id_ != NULL) vertex_id_->::common::proto::Id::Clear();
    }
    if (has_landmark_id()) {
      if (landmark_id_ != NULL) landmark_id_->::common::proto::Id::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandmarkToVertexReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.LandmarkToVertexReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id vertex_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_landmark_id;
        break;
      }

      // optional .common.proto.Id landmark_id = 2;
      case 2: {
        if (tag == 18) {
         parse_landmark_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.LandmarkToVertexReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.LandmarkToVertexReference)
  return false;
#undef DO_
}

void LandmarkToVertexReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.LandmarkToVertexReference)
  // optional .common.proto.Id vertex_id = 1;
  if (has_vertex_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex_id(), output);
  }

  // optional .common.proto.Id landmark_id = 2;
  if (has_landmark_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->landmark_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.LandmarkToVertexReference)
}

::google::protobuf::uint8* LandmarkToVertexReference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.LandmarkToVertexReference)
  // optional .common.proto.Id vertex_id = 1;
  if (has_vertex_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex_id(), target);
  }

  // optional .common.proto.Id landmark_id = 2;
  if (has_landmark_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->landmark_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.LandmarkToVertexReference)
  return target;
}

int LandmarkToVertexReference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id vertex_id = 1;
    if (has_vertex_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex_id());
    }

    // optional .common.proto.Id landmark_id = 2;
    if (has_landmark_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkToVertexReference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandmarkToVertexReference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandmarkToVertexReference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandmarkToVertexReference::MergeFrom(const LandmarkToVertexReference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vertex_id()) {
      mutable_vertex_id()->::common::proto::Id::MergeFrom(from.vertex_id());
    }
    if (from.has_landmark_id()) {
      mutable_landmark_id()->::common::proto::Id::MergeFrom(from.landmark_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandmarkToVertexReference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkToVertexReference::CopyFrom(const LandmarkToVertexReference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkToVertexReference::IsInitialized() const {

  return true;
}

void LandmarkToVertexReference::Swap(LandmarkToVertexReference* other) {
  if (other != this) {
    std::swap(vertex_id_, other->vertex_id_);
    std::swap(landmark_id_, other->landmark_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandmarkToVertexReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandmarkToVertexReference_descriptor_;
  metadata.reflection = LandmarkToVertexReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIMap::kVertexIdsFieldNumber;
const int VIMap::kVerticesFieldNumber;
const int VIMap::kEdgeIdsFieldNumber;
const int VIMap::kEdgesFieldNumber;
const int VIMap::kMissionIdsFieldNumber;
const int VIMap::kMissionsFieldNumber;
const int VIMap::kMissionBaseFrameIdsFieldNumber;
const int VIMap::kMissionBaseFramesFieldNumber;
const int VIMap::kLandmarkIndexIdsFieldNumber;
const int VIMap::kLandmarkIndexFieldNumber;
const int VIMap::kOptionalSensorDataMissionIdPairFieldNumber;
#endif  // !_MSC_VER

VIMap::VIMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map.proto.VIMap)
}

void VIMap::InitAsDefaultInstance() {
}

VIMap::VIMap(const VIMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map.proto.VIMap)
}

void VIMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIMap::~VIMap() {
  // @@protoc_insertion_point(destructor:vi_map.proto.VIMap)
  SharedDtor();
}

void VIMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIMap_descriptor_;
}

const VIMap& VIMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  return *default_instance_;
}

VIMap* VIMap::default_instance_ = NULL;

VIMap* VIMap::New() const {
  return new VIMap;
}

void VIMap::Clear() {
  vertex_ids_.Clear();
  vertices_.Clear();
  edge_ids_.Clear();
  edges_.Clear();
  mission_ids_.Clear();
  missions_.Clear();
  mission_base_frame_ids_.Clear();
  mission_base_frames_.Clear();
  landmark_index_ids_.Clear();
  landmark_index_.Clear();
  optional_sensor_data_mission_id_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map.proto.VIMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.proto.Id vertex_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_vertex_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertex_ids;
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated .vi_map.proto.ViwlsVertex vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        if (input->ExpectTag(26)) goto parse_edge_ids;
        break;
      }

      // repeated .common.proto.Id edge_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_edge_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edge_ids;
        if (input->ExpectTag(34)) goto parse_edges;
        break;
      }

      // repeated .vi_map.proto.Edge edges = 4;
      case 4: {
        if (tag == 34) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_edges;
        if (input->ExpectTag(42)) goto parse_mission_ids;
        break;
      }

      // repeated .common.proto.Id mission_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_mission_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mission_ids;
        if (input->ExpectTag(50)) goto parse_missions;
        break;
      }

      // repeated .vi_map.proto.Mission missions = 6;
      case 6: {
        if (tag == 50) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_missions;
        if (input->ExpectTag(58)) goto parse_mission_base_frame_ids;
        break;
      }

      // repeated .common.proto.Id mission_base_frame_ids = 7;
      case 7: {
        if (tag == 58) {
         parse_mission_base_frame_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_base_frame_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mission_base_frame_ids;
        if (input->ExpectTag(66)) goto parse_mission_base_frames;
        break;
      }

      // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
      case 8: {
        if (tag == 66) {
         parse_mission_base_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_base_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mission_base_frames;
        if (input->ExpectTag(74)) goto parse_landmark_index_ids;
        break;
      }

      // repeated .common.proto.Id landmark_index_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_landmark_index_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_index_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_landmark_index_ids;
        if (input->ExpectTag(82)) goto parse_landmark_index;
        break;
      }

      // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
      case 10: {
        if (tag == 82) {
         parse_landmark_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_landmark_index;
        if (input->ExpectTag(90)) goto parse_optional_sensor_data_mission_id_pair;
        break;
      }

      // repeated .vi_map.proto.OptionalSensorDataMissionPair optional_sensor_data_mission_id_pair = 11;
      case 11: {
        if (tag == 90) {
         parse_optional_sensor_data_mission_id_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_sensor_data_mission_id_pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_optional_sensor_data_mission_id_pair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map.proto.VIMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map.proto.VIMap)
  return false;
#undef DO_
}

void VIMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map.proto.VIMap)
  // repeated .common.proto.Id vertex_ids = 1;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex_ids(i), output);
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  // repeated .common.proto.Id edge_ids = 3;
  for (int i = 0; i < this->edge_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge_ids(i), output);
  }

  // repeated .vi_map.proto.Edge edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edges(i), output);
  }

  // repeated .common.proto.Id mission_ids = 5;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_ids(i), output);
  }

  // repeated .vi_map.proto.Mission missions = 6;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->missions(i), output);
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mission_base_frame_ids(i), output);
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mission_base_frames(i), output);
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->landmark_index_ids(i), output);
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  for (int i = 0; i < this->landmark_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->landmark_index(i), output);
  }

  // repeated .vi_map.proto.OptionalSensorDataMissionPair optional_sensor_data_mission_id_pair = 11;
  for (int i = 0; i < this->optional_sensor_data_mission_id_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->optional_sensor_data_mission_id_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map.proto.VIMap)
}

::google::protobuf::uint8* VIMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map.proto.VIMap)
  // repeated .common.proto.Id vertex_ids = 1;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex_ids(i), target);
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  // repeated .common.proto.Id edge_ids = 3;
  for (int i = 0; i < this->edge_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge_ids(i), target);
  }

  // repeated .vi_map.proto.Edge edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edges(i), target);
  }

  // repeated .common.proto.Id mission_ids = 5;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mission_ids(i), target);
  }

  // repeated .vi_map.proto.Mission missions = 6;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->missions(i), target);
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mission_base_frame_ids(i), target);
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mission_base_frames(i), target);
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->landmark_index_ids(i), target);
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  for (int i = 0; i < this->landmark_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->landmark_index(i), target);
  }

  // repeated .vi_map.proto.OptionalSensorDataMissionPair optional_sensor_data_mission_id_pair = 11;
  for (int i = 0; i < this->optional_sensor_data_mission_id_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->optional_sensor_data_mission_id_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map.proto.VIMap)
  return target;
}

int VIMap::ByteSize() const {
  int total_size = 0;

  // repeated .common.proto.Id vertex_ids = 1;
  total_size += 1 * this->vertex_ids_size();
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex_ids(i));
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .common.proto.Id edge_ids = 3;
  total_size += 1 * this->edge_ids_size();
  for (int i = 0; i < this->edge_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge_ids(i));
  }

  // repeated .vi_map.proto.Edge edges = 4;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  // repeated .common.proto.Id mission_ids = 5;
  total_size += 1 * this->mission_ids_size();
  for (int i = 0; i < this->mission_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_ids(i));
  }

  // repeated .vi_map.proto.Mission missions = 6;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  total_size += 1 * this->mission_base_frame_ids_size();
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_base_frame_ids(i));
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  total_size += 1 * this->mission_base_frames_size();
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_base_frames(i));
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  total_size += 1 * this->landmark_index_ids_size();
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_index_ids(i));
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  total_size += 1 * this->landmark_index_size();
  for (int i = 0; i < this->landmark_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_index(i));
  }

  // repeated .vi_map.proto.OptionalSensorDataMissionPair optional_sensor_data_mission_id_pair = 11;
  total_size += 1 * this->optional_sensor_data_mission_id_pair_size();
  for (int i = 0; i < this->optional_sensor_data_mission_id_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_sensor_data_mission_id_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIMap::MergeFrom(const VIMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_ids_.MergeFrom(from.vertex_ids_);
  vertices_.MergeFrom(from.vertices_);
  edge_ids_.MergeFrom(from.edge_ids_);
  edges_.MergeFrom(from.edges_);
  mission_ids_.MergeFrom(from.mission_ids_);
  missions_.MergeFrom(from.missions_);
  mission_base_frame_ids_.MergeFrom(from.mission_base_frame_ids_);
  mission_base_frames_.MergeFrom(from.mission_base_frames_);
  landmark_index_ids_.MergeFrom(from.landmark_index_ids_);
  landmark_index_.MergeFrom(from.landmark_index_);
  optional_sensor_data_mission_id_pair_.MergeFrom(from.optional_sensor_data_mission_id_pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIMap::CopyFrom(const VIMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIMap::IsInitialized() const {

  return true;
}

void VIMap::Swap(VIMap* other) {
  if (other != this) {
    vertex_ids_.Swap(&other->vertex_ids_);
    vertices_.Swap(&other->vertices_);
    edge_ids_.Swap(&other->edge_ids_);
    edges_.Swap(&other->edges_);
    mission_ids_.Swap(&other->mission_ids_);
    missions_.Swap(&other->missions_);
    mission_base_frame_ids_.Swap(&other->mission_base_frame_ids_);
    mission_base_frames_.Swap(&other->mission_base_frames_);
    landmark_index_ids_.Swap(&other->landmark_index_ids_);
    landmark_index_.Swap(&other->landmark_index_);
    optional_sensor_data_mission_id_pair_.Swap(&other->optional_sensor_data_mission_id_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIMap_descriptor_;
  metadata.reflection = VIMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace vi_map

// @@protoc_insertion_point(global_scope)
