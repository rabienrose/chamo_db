// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aslam-serialization/camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aslam-serialization/camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aslam {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Camera_CameraType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Camera_DistortionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NCamera_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aslam_2dserialization_2fcamera_2eproto() {
  protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aslam-serialization/camera.proto");
  GOOGLE_CHECK(file != NULL);
  Camera_descriptor_ = file->message_type(0);
  static const int Camera_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, intrinsics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, distortion_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, distortion_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, label_),
  };
  Camera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camera_descriptor_,
      Camera::default_instance_,
      Camera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camera));
  Camera_CameraType_descriptor_ = Camera_descriptor_->enum_type(0);
  Camera_DistortionType_descriptor_ = Camera_descriptor_->enum_type(1);
  NCamera_descriptor_ = file->message_type(1);
  static const int NCamera_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, cameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, t_c_i_transforms_),
  };
  NCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NCamera_descriptor_,
      NCamera::default_instance_,
      NCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NCamera));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aslam_2dserialization_2fcamera_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camera_descriptor_, &Camera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NCamera_descriptor_, &NCamera::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aslam_2dserialization_2fcamera_2eproto() {
  delete Camera::default_instance_;
  delete Camera_reflection_;
  delete NCamera::default_instance_;
  delete NCamera_reflection_;
}

void protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2feigen_2eproto();
  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n aslam-serialization/camera.proto\022\013asla"
    "m.proto\032\031maplab-common/eigen.proto\032\026mapl"
    "ab-common/id.proto\"\213\003\n\006Camera\022\034\n\002id\030\001 \001("
    "\0132\020.common.proto.Id\0223\n\013camera_type\030\002 \001(\016"
    "2\036.aslam.proto.Camera.CameraType\022\022\n\nintr"
    "insics\030\003 \003(\001\022\024\n\014image_height\030\004 \001(\r\022\023\n\013im"
    "age_width\030\005 \001(\r\022;\n\017distortion_type\030\006 \001(\016"
    "2\".aslam.proto.Camera.DistortionType\022\035\n\025"
    "distortion_parameters\030\007 \003(\001\022\r\n\005label\030\010 \001"
    "(\t\"2\n\nCameraType\022\014\n\010kPinhole\020\000\022\026\n\022kUnifi"
    "edProjection\020\001\"P\n\016DistortionType\022\021\n\rkNoD"
    "istortion\020\000\022\020\n\014kEquidistant\020\001\022\014\n\010kFishey"
    "e\020\002\022\013\n\007kRadTan\020\003\"\227\001\n\007NCamera\022\034\n\002id\030\001 \001(\013"
    "2\020.common.proto.Id\022\r\n\005label\030\002 \001(\t\022$\n\007cam"
    "eras\030\003 \003(\0132\023.aslam.proto.Camera\0229\n\020T_C_I"
    "_transforms\030\004 \003(\0132\037.common.proto.SemiSta"
    "ticMatrixd", 650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aslam-serialization/camera.proto", &protobuf_RegisterTypes);
  Camera::default_instance_ = new Camera();
  NCamera::default_instance_ = new NCamera();
  Camera::default_instance_->InitAsDefaultInstance();
  NCamera::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aslam_2dserialization_2fcamera_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aslam_2dserialization_2fcamera_2eproto {
  StaticDescriptorInitializer_aslam_2dserialization_2fcamera_2eproto() {
    protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto();
  }
} static_descriptor_initializer_aslam_2dserialization_2fcamera_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Camera_CameraType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_CameraType_descriptor_;
}
bool Camera_CameraType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Camera_CameraType Camera::kPinhole;
const Camera_CameraType Camera::kUnifiedProjection;
const Camera_CameraType Camera::CameraType_MIN;
const Camera_CameraType Camera::CameraType_MAX;
const int Camera::CameraType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Camera_DistortionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_DistortionType_descriptor_;
}
bool Camera_DistortionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Camera_DistortionType Camera::kNoDistortion;
const Camera_DistortionType Camera::kEquidistant;
const Camera_DistortionType Camera::kFisheye;
const Camera_DistortionType Camera::kRadTan;
const Camera_DistortionType Camera::DistortionType_MIN;
const Camera_DistortionType Camera::DistortionType_MAX;
const int Camera::DistortionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Camera::kIdFieldNumber;
const int Camera::kCameraTypeFieldNumber;
const int Camera::kIntrinsicsFieldNumber;
const int Camera::kImageHeightFieldNumber;
const int Camera::kImageWidthFieldNumber;
const int Camera::kDistortionTypeFieldNumber;
const int Camera::kDistortionParametersFieldNumber;
const int Camera::kLabelFieldNumber;
#endif  // !_MSC_VER

Camera::Camera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aslam.proto.Camera)
}

void Camera::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

Camera::Camera(const Camera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aslam.proto.Camera)
}

void Camera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  camera_type_ = 0;
  image_height_ = 0u;
  image_width_ = 0u;
  distortion_type_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:aslam.proto.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_descriptor_;
}

const Camera& Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto();
  return *default_instance_;
}

Camera* Camera::default_instance_ = NULL;

Camera* Camera::New() const {
  return new Camera;
}

void Camera::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Camera*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 187) {
    ZR_(camera_type_, distortion_type_);
    if (has_id()) {
      if (id_ != NULL) id_->::common::proto::Id::Clear();
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  intrinsics_.Clear();
  distortion_parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aslam.proto.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_camera_type;
        break;
      }

      // optional .aslam.proto.Camera.CameraType camera_type = 2;
      case 2: {
        if (tag == 16) {
         parse_camera_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::aslam::proto::Camera_CameraType_IsValid(value)) {
            set_camera_type(static_cast< ::aslam::proto::Camera_CameraType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_intrinsics;
        break;
      }

      // repeated double intrinsics = 3;
      case 3: {
        if (tag == 25) {
         parse_intrinsics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_intrinsics())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_intrinsics())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_intrinsics;
        if (input->ExpectTag(32)) goto parse_image_height;
        break;
      }

      // optional uint32 image_height = 4;
      case 4: {
        if (tag == 32) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_width;
        break;
      }

      // optional uint32 image_width = 5;
      case 5: {
        if (tag == 40) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_distortion_type;
        break;
      }

      // optional .aslam.proto.Camera.DistortionType distortion_type = 6;
      case 6: {
        if (tag == 48) {
         parse_distortion_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::aslam::proto::Camera_DistortionType_IsValid(value)) {
            set_distortion_type(static_cast< ::aslam::proto::Camera_DistortionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_distortion_parameters;
        break;
      }

      // repeated double distortion_parameters = 7;
      case 7: {
        if (tag == 57) {
         parse_distortion_parameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_distortion_parameters())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_distortion_parameters())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_distortion_parameters;
        if (input->ExpectTag(66)) goto parse_label;
        break;
      }

      // optional string label = 8;
      case 8: {
        if (tag == 66) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aslam.proto.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aslam.proto.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aslam.proto.Camera)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .aslam.proto.Camera.CameraType camera_type = 2;
  if (has_camera_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->camera_type(), output);
  }

  // repeated double intrinsics = 3;
  for (int i = 0; i < this->intrinsics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->intrinsics(i), output);
  }

  // optional uint32 image_height = 4;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->image_height(), output);
  }

  // optional uint32 image_width = 5;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->image_width(), output);
  }

  // optional .aslam.proto.Camera.DistortionType distortion_type = 6;
  if (has_distortion_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->distortion_type(), output);
  }

  // repeated double distortion_parameters = 7;
  for (int i = 0; i < this->distortion_parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->distortion_parameters(i), output);
  }

  // optional string label = 8;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aslam.proto.Camera)
}

::google::protobuf::uint8* Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aslam.proto.Camera)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .aslam.proto.Camera.CameraType camera_type = 2;
  if (has_camera_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->camera_type(), target);
  }

  // repeated double intrinsics = 3;
  for (int i = 0; i < this->intrinsics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->intrinsics(i), target);
  }

  // optional uint32 image_height = 4;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->image_height(), target);
  }

  // optional uint32 image_width = 5;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->image_width(), target);
  }

  // optional .aslam.proto.Camera.DistortionType distortion_type = 6;
  if (has_distortion_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->distortion_type(), target);
  }

  // repeated double distortion_parameters = 7;
  for (int i = 0; i < this->distortion_parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->distortion_parameters(i), target);
  }

  // optional string label = 8;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aslam.proto.Camera)
  return target;
}

int Camera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .aslam.proto.Camera.CameraType camera_type = 2;
    if (has_camera_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_type());
    }

    // optional uint32 image_height = 4;
    if (has_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_height());
    }

    // optional uint32 image_width = 5;
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

    // optional .aslam.proto.Camera.DistortionType distortion_type = 6;
    if (has_distortion_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->distortion_type());
    }

    // optional string label = 8;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  // repeated double intrinsics = 3;
  {
    int data_size = 0;
    data_size = 8 * this->intrinsics_size();
    total_size += 1 * this->intrinsics_size() + data_size;
  }

  // repeated double distortion_parameters = 7;
  {
    int data_size = 0;
    data_size = 8 * this->distortion_parameters_size();
    total_size += 1 * this->distortion_parameters_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  intrinsics_.MergeFrom(from.intrinsics_);
  distortion_parameters_.MergeFrom(from.distortion_parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
    if (from.has_camera_type()) {
      set_camera_type(from.camera_type());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_distortion_type()) {
      set_distortion_type(from.distortion_type());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {

  return true;
}

void Camera::Swap(Camera* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(camera_type_, other->camera_type_);
    intrinsics_.Swap(&other->intrinsics_);
    std::swap(image_height_, other->image_height_);
    std::swap(image_width_, other->image_width_);
    std::swap(distortion_type_, other->distortion_type_);
    distortion_parameters_.Swap(&other->distortion_parameters_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera_descriptor_;
  metadata.reflection = Camera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NCamera::kIdFieldNumber;
const int NCamera::kLabelFieldNumber;
const int NCamera::kCamerasFieldNumber;
const int NCamera::kTCITransformsFieldNumber;
#endif  // !_MSC_VER

NCamera::NCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aslam.proto.NCamera)
}

void NCamera::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

NCamera::NCamera(const NCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aslam.proto.NCamera)
}

void NCamera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NCamera::~NCamera() {
  // @@protoc_insertion_point(destructor:aslam.proto.NCamera)
  SharedDtor();
}

void NCamera::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void NCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NCamera_descriptor_;
}

const NCamera& NCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto();
  return *default_instance_;
}

NCamera* NCamera::default_instance_ = NULL;

NCamera* NCamera::New() const {
  return new NCamera;
}

void NCamera::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != NULL) id_->::common::proto::Id::Clear();
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
  }
  cameras_.Clear();
  t_c_i_transforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aslam.proto.NCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cameras;
        break;
      }

      // repeated .aslam.proto.Camera cameras = 3;
      case 3: {
        if (tag == 26) {
         parse_cameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cameras;
        if (input->ExpectTag(34)) goto parse_T_C_I_transforms;
        break;
      }

      // repeated .common.proto.SemiStaticMatrixd T_C_I_transforms = 4;
      case 4: {
        if (tag == 34) {
         parse_T_C_I_transforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_t_c_i_transforms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_T_C_I_transforms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aslam.proto.NCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aslam.proto.NCamera)
  return false;
#undef DO_
}

void NCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aslam.proto.NCamera)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // repeated .aslam.proto.Camera cameras = 3;
  for (int i = 0; i < this->cameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameras(i), output);
  }

  // repeated .common.proto.SemiStaticMatrixd T_C_I_transforms = 4;
  for (int i = 0; i < this->t_c_i_transforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->t_c_i_transforms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aslam.proto.NCamera)
}

::google::protobuf::uint8* NCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aslam.proto.NCamera)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // repeated .aslam.proto.Camera cameras = 3;
  for (int i = 0; i < this->cameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameras(i), target);
  }

  // repeated .common.proto.SemiStaticMatrixd T_C_I_transforms = 4;
  for (int i = 0; i < this->t_c_i_transforms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->t_c_i_transforms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aslam.proto.NCamera)
  return target;
}

int NCamera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  // repeated .aslam.proto.Camera cameras = 3;
  total_size += 1 * this->cameras_size();
  for (int i = 0; i < this->cameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameras(i));
  }

  // repeated .common.proto.SemiStaticMatrixd T_C_I_transforms = 4;
  total_size += 1 * this->t_c_i_transforms_size();
  for (int i = 0; i < this->t_c_i_transforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t_c_i_transforms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NCamera::MergeFrom(const NCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameras_.MergeFrom(from.cameras_);
  t_c_i_transforms_.MergeFrom(from.t_c_i_transforms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NCamera::CopyFrom(const NCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NCamera::IsInitialized() const {

  return true;
}

void NCamera::Swap(NCamera* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    cameras_.Swap(&other->cameras_);
    t_c_i_transforms_.Swap(&other->t_c_i_transforms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NCamera_descriptor_;
  metadata.reflection = NCamera_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace aslam

// @@protoc_insertion_point(global_scope)
