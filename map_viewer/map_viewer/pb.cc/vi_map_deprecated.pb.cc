// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vi-map/vi_map_deprecated.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vi-map/vi_map_deprecated.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vi_map_deprecated {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ImuSigmas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuSigmas_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mission_BackBone_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OptionalSensorExtrinsics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptionalSensorExtrinsics_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSMeasurementWGS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSMeasurementWGS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSMeasurementUTM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSMeasurementUTM_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionIdWithGPSWGSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionIdWithGPSWGSData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionIdWithGPSUTMData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionIdWithGPSUTMData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSDataStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSDataStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformationEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformationEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto() {
  protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vi-map/vi_map_deprecated.proto");
  GOOGLE_CHECK(file != NULL);
  ImuSigmas_descriptor_ = file->message_type(0);
  static const int ImuSigmas_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, gyro_noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, gyro_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, acc_noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, acc_bias_),
  };
  ImuSigmas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImuSigmas_descriptor_,
      ImuSigmas::default_instance_,
      ImuSigmas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuSigmas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImuSigmas));
  Mission_descriptor_ = file->message_type(1);
  static const int Mission_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, baseframe_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, root_vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, n_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, gyro_noise_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, gyro_bias_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, acc_noise_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, acc_bias_sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, backbone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_resource_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, mission_resource_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, imu_sigmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, optional_camera_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, optional_cameras_with_extrinsics_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  Mission_BackBone_descriptor_ = Mission_descriptor_->enum_type(0);
  OptionalSensorExtrinsics_descriptor_ = file->message_type(2);
  static const int OptionalSensorExtrinsics_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, t_s_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, t_s_i_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, sensor_type_),
  };
  OptionalSensorExtrinsics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptionalSensorExtrinsics_descriptor_,
      OptionalSensorExtrinsics::default_instance_,
      OptionalSensorExtrinsics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptionalSensorExtrinsics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptionalSensorExtrinsics));
  GPSMeasurementWGS_descriptor_ = file->message_type(3);
  static const int GPSMeasurementWGS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, timestamp_nanoseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, latitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, longitude_deg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, altitude_meters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, sensor_id_),
  };
  GPSMeasurementWGS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSMeasurementWGS_descriptor_,
      GPSMeasurementWGS::default_instance_,
      GPSMeasurementWGS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementWGS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSMeasurementWGS));
  GPSMeasurementUTM_descriptor_ = file->message_type(4);
  static const int GPSMeasurementUTM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementUTM, timestamp_nanoseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementUTM, t_r_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementUTM, sensor_id_),
  };
  GPSMeasurementUTM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSMeasurementUTM_descriptor_,
      GPSMeasurementUTM::default_instance_,
      GPSMeasurementUTM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementUTM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSMeasurementUTM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSMeasurementUTM));
  MissionIdWithGPSWGSData_descriptor_ = file->message_type(5);
  static const int MissionIdWithGPSWGSData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSWGSData, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSWGSData, wgs_measurements_),
  };
  MissionIdWithGPSWGSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionIdWithGPSWGSData_descriptor_,
      MissionIdWithGPSWGSData::default_instance_,
      MissionIdWithGPSWGSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSWGSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSWGSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionIdWithGPSWGSData));
  MissionIdWithGPSUTMData_descriptor_ = file->message_type(6);
  static const int MissionIdWithGPSUTMData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSUTMData, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSUTMData, utm_measurements_),
  };
  MissionIdWithGPSUTMData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionIdWithGPSUTMData_descriptor_,
      MissionIdWithGPSUTMData::default_instance_,
      MissionIdWithGPSUTMData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSUTMData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionIdWithGPSUTMData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionIdWithGPSUTMData));
  GPSDataStorage_descriptor_ = file->message_type(7);
  static const int GPSDataStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataStorage, mission_ids_with_gps_wgs_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataStorage, mission_ids_with_gps_utm_data_),
  };
  GPSDataStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSDataStorage_descriptor_,
      GPSDataStorage::default_instance_,
      GPSDataStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSDataStorage));
  TransformationEdge_descriptor_ = file->message_type(8);
  static const int TransformationEdge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, t_a_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, t_a_b_covariance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, optional_sensor_extrinsics_id_),
  };
  TransformationEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformationEdge_descriptor_,
      TransformationEdge::default_instance_,
      TransformationEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformationEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformationEdge));
  Edge_descriptor_ = file->message_type(9);
  static const int Edge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, viwls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, odometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, loopclosure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, laser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, trajectory_),
  };
  Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge));
  VIMap_descriptor_ = file->message_type(10);
  static const int VIMap_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, vertex_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, edge_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_base_frame_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, mission_base_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, landmark_index_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, landmark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, optional_sensors_extrinsics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, gps_data_storage_),
  };
  VIMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIMap_descriptor_,
      VIMap::default_instance_,
      VIMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImuSigmas_descriptor_, &ImuSigmas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptionalSensorExtrinsics_descriptor_, &OptionalSensorExtrinsics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSMeasurementWGS_descriptor_, &GPSMeasurementWGS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSMeasurementUTM_descriptor_, &GPSMeasurementUTM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionIdWithGPSWGSData_descriptor_, &MissionIdWithGPSWGSData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionIdWithGPSUTMData_descriptor_, &MissionIdWithGPSUTMData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSDataStorage_descriptor_, &GPSDataStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformationEdge_descriptor_, &TransformationEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIMap_descriptor_, &VIMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto() {
  delete ImuSigmas::default_instance_;
  delete ImuSigmas_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete OptionalSensorExtrinsics::default_instance_;
  delete OptionalSensorExtrinsics_reflection_;
  delete GPSMeasurementWGS::default_instance_;
  delete GPSMeasurementWGS_reflection_;
  delete GPSMeasurementUTM::default_instance_;
  delete GPSMeasurementUTM_reflection_;
  delete MissionIdWithGPSWGSData::default_instance_;
  delete MissionIdWithGPSWGSData_reflection_;
  delete MissionIdWithGPSUTMData::default_instance_;
  delete MissionIdWithGPSUTMData_reflection_;
  delete GPSDataStorage::default_instance_;
  delete GPSDataStorage_reflection_;
  delete TransformationEdge::default_instance_;
  delete TransformationEdge_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete VIMap::default_instance_;
  delete VIMap_reflection_;
}

void protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::aslam::proto::protobuf_AddDesc_aslam_2dserialization_2fcamera_2eproto();
  ::common::proto::protobuf_AddDesc_maplab_2dcommon_2fid_2eproto();
  ::opt_cam_res::proto::protobuf_AddDesc_vi_2dmap_2foptional_5fcamera_5fresources_2eproto();
  ::vi_map::proto::protobuf_AddDesc_vi_2dmap_2fvi_5fmap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036vi-map/vi_map_deprecated.proto\022\027vi_map"
    "_deprecated.proto\032 aslam-serialization/c"
    "amera.proto\032\026maplab-common/id.proto\032&vi-"
    "map/optional_camera_resources.proto\032\023vi-"
    "map/vi_map.proto\"W\n\tImuSigmas\022\022\n\ngyro_no"
    "ise\030\001 \001(\001\022\021\n\tgyro_bias\030\002 \001(\001\022\021\n\tacc_nois"
    "e\030\003 \001(\001\022\020\n\010acc_bias\030\004 \001(\001\"\376\004\n\007Mission\022&\n"
    "\014baseframe_id\030\001 \001(\0132\020.common.proto.Id\022(\n"
    "\016root_vertex_id\030\002 \001(\0132\020.common.proto.Id\022"
    "&\n\010n_camera\030\003 \001(\0132\024.aslam.proto.NCamera\022"
    "\030\n\020gyro_noise_sigma\030\004 \001(\001\022\027\n\017gyro_bias_s"
    "igma\030\005 \001(\001\022\027\n\017acc_noise_sigma\030\006 \001(\001\022\026\n\016a"
    "cc_bias_sigma\030\007 \001(\001\022C\n\010backbone\030\010 \001(\0162)."
    "vi_map_deprecated.proto.Mission.BackBone"
    ":\006kViwls\022.\n\024mission_resource_ids\030\t \003(\0132\020"
    ".common.proto.Id\022\036\n\026mission_resource_typ"
    "es\030\n \003(\005\0226\n\nimu_sigmas\030\013 \001(\0132\".vi_map_de"
    "precated.proto.ImuSigmas\022M\n\031optional_cam"
    "era_resources\030\014 \003(\0132*.opt_cam_res.proto."
    "OptionalCameraResources\022R\n optional_came"
    "ras_with_extrinsics\030\r \003(\0132(.opt_cam_res."
    "proto.CamerasWithExtrinsics\"%\n\010BackBone\022"
    "\n\n\006kViwls\020\000\022\r\n\tkOdometry\020\001\"v\n\030OptionalSe"
    "nsorExtrinsics\022\034\n\002id\030\001 \001(\0132\020.common.prot"
    "o.Id\022\r\n\005T_S_I\030\002 \003(\001\022\030\n\020T_S_I_covariance\030"
    "\003 \003(\001\022\023\n\013sensor_type\030\004 \001(\r\"\235\001\n\021GPSMeasur"
    "ementWGS\022\035\n\025timestamp_nanoseconds\030\001 \001(\003\022"
    "\024\n\014latitude_deg\030\002 \001(\001\022\025\n\rlongitude_deg\030\003"
    " \001(\001\022\027\n\017altitude_meters\030\004 \001(\001\022#\n\tsensor_"
    "id\030\005 \001(\0132\020.common.proto.Id\"f\n\021GPSMeasure"
    "mentUTM\022\035\n\025timestamp_nanoseconds\030\001 \001(\003\022\r"
    "\n\005t_r_s\030\002 \003(\001\022#\n\tsensor_id\030\003 \001(\0132\020.commo"
    "n.proto.Id\"\205\001\n\027MissionIdWithGPSWGSData\022$"
    "\n\nmission_id\030\001 \001(\0132\020.common.proto.Id\022D\n\020"
    "wgs_measurements\030\002 \003(\0132*.vi_map_deprecat"
    "ed.proto.GPSMeasurementWGS\"\205\001\n\027MissionId"
    "WithGPSUTMData\022$\n\nmission_id\030\001 \001(\0132\020.com"
    "mon.proto.Id\022D\n\020utm_measurements\030\002 \003(\0132*"
    ".vi_map_deprecated.proto.GPSMeasurementU"
    "TM\"\302\001\n\016GPSDataStorage\022W\n\035mission_ids_wit"
    "h_gps_wgs_data\030\001 \003(\01320.vi_map_deprecated"
    ".proto.MissionIdWithGPSWGSData\022W\n\035missio"
    "n_ids_with_gps_utm_data\030\002 \003(\01320.vi_map_d"
    "eprecated.proto.MissionIdWithGPSUTMData\""
    "\332\001\n\022TransformationEdge\022\036\n\004from\030\001 \001(\0132\020.c"
    "ommon.proto.Id\022\034\n\002to\030\002 \001(\0132\020.common.prot"
    "o.Id\022$\n\nmission_id\030\003 \001(\0132\020.common.proto."
    "Id\022\r\n\005T_A_B\030\004 \003(\001\022\030\n\020T_A_B_covariance\030\005 "
    "\003(\001\0227\n\035optional_sensor_extrinsics_id\030\006 \001"
    "(\0132\020.common.proto.Id\"\265\002\n\004Edge\022&\n\005viwls\030\001"
    " \001(\0132\027.vi_map.proto.ViwlsEdge\022=\n\010odometr"
    "y\030\002 \001(\0132+.vi_map_deprecated.proto.Transf"
    "ormationEdge\0222\n\013loopclosure\030\003 \001(\0132\035.vi_m"
    "ap.proto.LoopclosureEdge\0228\n\016transformati"
    "on\030\004 \001(\0132 .vi_map.proto.TransformationEd"
    "ge\022&\n\005laser\030\005 \001(\0132\027.vi_map.proto.LaserEd"
    "ge\0220\n\ntrajectory\030\006 \001(\0132\034.vi_map.proto.Tr"
    "ajectoryEdge\"\365\004\n\005VIMap\022$\n\nvertex_ids\030\001 \003"
    "(\0132\020.common.proto.Id\022+\n\010vertices\030\002 \003(\0132\031"
    ".vi_map.proto.ViwlsVertex\022\"\n\010edge_ids\030\003 "
    "\003(\0132\020.common.proto.Id\022!\n\005edges\030\004 \003(\0132\022.v"
    "i_map.proto.Edge\022%\n\013mission_ids\030\005 \003(\0132\020."
    "common.proto.Id\0222\n\010missions\030\006 \003(\0132 .vi_m"
    "ap_deprecated.proto.Mission\0220\n\026mission_b"
    "ase_frame_ids\030\007 \003(\0132\020.common.proto.Id\022;\n"
    "\023mission_base_frames\030\010 \003(\0132\036.vi_map.prot"
    "o.MissionBaseframe\022,\n\022landmark_index_ids"
    "\030\t \003(\0132\020.common.proto.Id\022\?\n\016landmark_ind"
    "ex\030\n \003(\0132\'.vi_map.proto.LandmarkToVertex"
    "Reference\022V\n\033optional_sensors_extrinsics"
    "\030\017 \003(\01321.vi_map_deprecated.proto.Optiona"
    "lSensorExtrinsics\022A\n\020gps_data_storage\030\020 "
    "\001(\0132\'.vi_map_deprecated.proto.GPSDataSto"
    "rage", 2924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vi-map/vi_map_deprecated.proto", &protobuf_RegisterTypes);
  ImuSigmas::default_instance_ = new ImuSigmas();
  Mission::default_instance_ = new Mission();
  OptionalSensorExtrinsics::default_instance_ = new OptionalSensorExtrinsics();
  GPSMeasurementWGS::default_instance_ = new GPSMeasurementWGS();
  GPSMeasurementUTM::default_instance_ = new GPSMeasurementUTM();
  MissionIdWithGPSWGSData::default_instance_ = new MissionIdWithGPSWGSData();
  MissionIdWithGPSUTMData::default_instance_ = new MissionIdWithGPSUTMData();
  GPSDataStorage::default_instance_ = new GPSDataStorage();
  TransformationEdge::default_instance_ = new TransformationEdge();
  Edge::default_instance_ = new Edge();
  VIMap::default_instance_ = new VIMap();
  ImuSigmas::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  OptionalSensorExtrinsics::default_instance_->InitAsDefaultInstance();
  GPSMeasurementWGS::default_instance_->InitAsDefaultInstance();
  GPSMeasurementUTM::default_instance_->InitAsDefaultInstance();
  MissionIdWithGPSWGSData::default_instance_->InitAsDefaultInstance();
  MissionIdWithGPSUTMData::default_instance_->InitAsDefaultInstance();
  GPSDataStorage::default_instance_->InitAsDefaultInstance();
  TransformationEdge::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  VIMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto {
  StaticDescriptorInitializer_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto() {
    protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  }
} static_descriptor_initializer_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ImuSigmas::kGyroNoiseFieldNumber;
const int ImuSigmas::kGyroBiasFieldNumber;
const int ImuSigmas::kAccNoiseFieldNumber;
const int ImuSigmas::kAccBiasFieldNumber;
#endif  // !_MSC_VER

ImuSigmas::ImuSigmas()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.ImuSigmas)
}

void ImuSigmas::InitAsDefaultInstance() {
}

ImuSigmas::ImuSigmas(const ImuSigmas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.ImuSigmas)
}

void ImuSigmas::SharedCtor() {
  _cached_size_ = 0;
  gyro_noise_ = 0;
  gyro_bias_ = 0;
  acc_noise_ = 0;
  acc_bias_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImuSigmas::~ImuSigmas() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.ImuSigmas)
  SharedDtor();
}

void ImuSigmas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImuSigmas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuSigmas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuSigmas_descriptor_;
}

const ImuSigmas& ImuSigmas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

ImuSigmas* ImuSigmas::default_instance_ = NULL;

ImuSigmas* ImuSigmas::New() const {
  return new ImuSigmas;
}

void ImuSigmas::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ImuSigmas*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gyro_noise_, acc_bias_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImuSigmas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.ImuSigmas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gyro_noise = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_noise_)));
          set_has_gyro_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gyro_bias;
        break;
      }

      // optional double gyro_bias = 2;
      case 2: {
        if (tag == 17) {
         parse_gyro_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_bias_)));
          set_has_gyro_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_acc_noise;
        break;
      }

      // optional double acc_noise = 3;
      case 3: {
        if (tag == 25) {
         parse_acc_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_noise_)));
          set_has_acc_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_acc_bias;
        break;
      }

      // optional double acc_bias = 4;
      case 4: {
        if (tag == 33) {
         parse_acc_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_bias_)));
          set_has_acc_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.ImuSigmas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.ImuSigmas)
  return false;
#undef DO_
}

void ImuSigmas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.ImuSigmas)
  // optional double gyro_noise = 1;
  if (has_gyro_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gyro_noise(), output);
  }

  // optional double gyro_bias = 2;
  if (has_gyro_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gyro_bias(), output);
  }

  // optional double acc_noise = 3;
  if (has_acc_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acc_noise(), output);
  }

  // optional double acc_bias = 4;
  if (has_acc_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_bias(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.ImuSigmas)
}

::google::protobuf::uint8* ImuSigmas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.ImuSigmas)
  // optional double gyro_noise = 1;
  if (has_gyro_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gyro_noise(), target);
  }

  // optional double gyro_bias = 2;
  if (has_gyro_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gyro_bias(), target);
  }

  // optional double acc_noise = 3;
  if (has_acc_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acc_noise(), target);
  }

  // optional double acc_bias = 4;
  if (has_acc_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_bias(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.ImuSigmas)
  return target;
}

int ImuSigmas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double gyro_noise = 1;
    if (has_gyro_noise()) {
      total_size += 1 + 8;
    }

    // optional double gyro_bias = 2;
    if (has_gyro_bias()) {
      total_size += 1 + 8;
    }

    // optional double acc_noise = 3;
    if (has_acc_noise()) {
      total_size += 1 + 8;
    }

    // optional double acc_bias = 4;
    if (has_acc_bias()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuSigmas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImuSigmas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImuSigmas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImuSigmas::MergeFrom(const ImuSigmas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gyro_noise()) {
      set_gyro_noise(from.gyro_noise());
    }
    if (from.has_gyro_bias()) {
      set_gyro_bias(from.gyro_bias());
    }
    if (from.has_acc_noise()) {
      set_acc_noise(from.acc_noise());
    }
    if (from.has_acc_bias()) {
      set_acc_bias(from.acc_bias());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImuSigmas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuSigmas::CopyFrom(const ImuSigmas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuSigmas::IsInitialized() const {

  return true;
}

void ImuSigmas::Swap(ImuSigmas* other) {
  if (other != this) {
    std::swap(gyro_noise_, other->gyro_noise_);
    std::swap(gyro_bias_, other->gyro_bias_);
    std::swap(acc_noise_, other->acc_noise_);
    std::swap(acc_bias_, other->acc_bias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImuSigmas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuSigmas_descriptor_;
  metadata.reflection = ImuSigmas_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Mission_BackBone_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_BackBone_descriptor_;
}
bool Mission_BackBone_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Mission_BackBone Mission::kViwls;
const Mission_BackBone Mission::kOdometry;
const Mission_BackBone Mission::BackBone_MIN;
const Mission_BackBone Mission::BackBone_MAX;
const int Mission::BackBone_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Mission::kBaseframeIdFieldNumber;
const int Mission::kRootVertexIdFieldNumber;
const int Mission::kNCameraFieldNumber;
const int Mission::kGyroNoiseSigmaFieldNumber;
const int Mission::kGyroBiasSigmaFieldNumber;
const int Mission::kAccNoiseSigmaFieldNumber;
const int Mission::kAccBiasSigmaFieldNumber;
const int Mission::kBackboneFieldNumber;
const int Mission::kMissionResourceIdsFieldNumber;
const int Mission::kMissionResourceTypesFieldNumber;
const int Mission::kImuSigmasFieldNumber;
const int Mission::kOptionalCameraResourcesFieldNumber;
const int Mission::kOptionalCamerasWithExtrinsicsFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.Mission)
}

void Mission::InitAsDefaultInstance() {
  baseframe_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  root_vertex_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  n_camera_ = const_cast< ::aslam::proto::NCamera*>(&::aslam::proto::NCamera::default_instance());
  imu_sigmas_ = const_cast< ::vi_map_deprecated::proto::ImuSigmas*>(&::vi_map_deprecated::proto::ImuSigmas::default_instance());
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  baseframe_id_ = NULL;
  root_vertex_id_ = NULL;
  n_camera_ = NULL;
  gyro_noise_sigma_ = 0;
  gyro_bias_sigma_ = 0;
  acc_noise_sigma_ = 0;
  acc_bias_sigma_ = 0;
  backbone_ = 0;
  imu_sigmas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
    delete baseframe_id_;
    delete root_vertex_id_;
    delete n_camera_;
    delete imu_sigmas_;
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gyro_noise_sigma_, acc_bias_sigma_);
    if (has_baseframe_id()) {
      if (baseframe_id_ != NULL) baseframe_id_->::common::proto::Id::Clear();
    }
    if (has_root_vertex_id()) {
      if (root_vertex_id_ != NULL) root_vertex_id_->::common::proto::Id::Clear();
    }
    if (has_n_camera()) {
      if (n_camera_ != NULL) n_camera_->::aslam::proto::NCamera::Clear();
    }
    backbone_ = 0;
  }
  if (has_imu_sigmas()) {
    if (imu_sigmas_ != NULL) imu_sigmas_->::vi_map_deprecated::proto::ImuSigmas::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mission_resource_ids_.Clear();
  mission_resource_types_.Clear();
  optional_camera_resources_.Clear();
  optional_cameras_with_extrinsics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id baseframe_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseframe_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_root_vertex_id;
        break;
      }

      // optional .common.proto.Id root_vertex_id = 2;
      case 2: {
        if (tag == 18) {
         parse_root_vertex_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_vertex_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_n_camera;
        break;
      }

      // optional .aslam.proto.NCamera n_camera = 3;
      case 3: {
        if (tag == 26) {
         parse_n_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_gyro_noise_sigma;
        break;
      }

      // optional double gyro_noise_sigma = 4;
      case 4: {
        if (tag == 33) {
         parse_gyro_noise_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_noise_sigma_)));
          set_has_gyro_noise_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_gyro_bias_sigma;
        break;
      }

      // optional double gyro_bias_sigma = 5;
      case 5: {
        if (tag == 41) {
         parse_gyro_bias_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_bias_sigma_)));
          set_has_gyro_bias_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_acc_noise_sigma;
        break;
      }

      // optional double acc_noise_sigma = 6;
      case 6: {
        if (tag == 49) {
         parse_acc_noise_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_noise_sigma_)));
          set_has_acc_noise_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_acc_bias_sigma;
        break;
      }

      // optional double acc_bias_sigma = 7;
      case 7: {
        if (tag == 57) {
         parse_acc_bias_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_bias_sigma_)));
          set_has_acc_bias_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_backbone;
        break;
      }

      // optional .vi_map_deprecated.proto.Mission.BackBone backbone = 8 [default = kViwls];
      case 8: {
        if (tag == 64) {
         parse_backbone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vi_map_deprecated::proto::Mission_BackBone_IsValid(value)) {
            set_backbone(static_cast< ::vi_map_deprecated::proto::Mission_BackBone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mission_resource_ids;
        break;
      }

      // repeated .common.proto.Id mission_resource_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_mission_resource_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_resource_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mission_resource_ids;
        if (input->ExpectTag(80)) goto parse_mission_resource_types;
        break;
      }

      // repeated int32 mission_resource_types = 10;
      case 10: {
        if (tag == 80) {
         parse_mission_resource_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_mission_resource_types())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mission_resource_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mission_resource_types;
        if (input->ExpectTag(90)) goto parse_imu_sigmas;
        break;
      }

      // optional .vi_map_deprecated.proto.ImuSigmas imu_sigmas = 11;
      case 11: {
        if (tag == 90) {
         parse_imu_sigmas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_sigmas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_optional_camera_resources;
        break;
      }

      // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 12;
      case 12: {
        if (tag == 98) {
         parse_optional_camera_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_camera_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_optional_camera_resources;
        if (input->ExpectTag(106)) goto parse_optional_cameras_with_extrinsics;
        break;
      }

      // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 13;
      case 13: {
        if (tag == 106) {
         parse_optional_cameras_with_extrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_cameras_with_extrinsics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_optional_cameras_with_extrinsics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.Mission)
  // optional .common.proto.Id baseframe_id = 1;
  if (has_baseframe_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseframe_id(), output);
  }

  // optional .common.proto.Id root_vertex_id = 2;
  if (has_root_vertex_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->root_vertex_id(), output);
  }

  // optional .aslam.proto.NCamera n_camera = 3;
  if (has_n_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->n_camera(), output);
  }

  // optional double gyro_noise_sigma = 4;
  if (has_gyro_noise_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gyro_noise_sigma(), output);
  }

  // optional double gyro_bias_sigma = 5;
  if (has_gyro_bias_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gyro_bias_sigma(), output);
  }

  // optional double acc_noise_sigma = 6;
  if (has_acc_noise_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acc_noise_sigma(), output);
  }

  // optional double acc_bias_sigma = 7;
  if (has_acc_bias_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_bias_sigma(), output);
  }

  // optional .vi_map_deprecated.proto.Mission.BackBone backbone = 8 [default = kViwls];
  if (has_backbone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->backbone(), output);
  }

  // repeated .common.proto.Id mission_resource_ids = 9;
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mission_resource_ids(i), output);
  }

  // repeated int32 mission_resource_types = 10;
  for (int i = 0; i < this->mission_resource_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->mission_resource_types(i), output);
  }

  // optional .vi_map_deprecated.proto.ImuSigmas imu_sigmas = 11;
  if (has_imu_sigmas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->imu_sigmas(), output);
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 12;
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->optional_camera_resources(i), output);
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 13;
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->optional_cameras_with_extrinsics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.Mission)
  // optional .common.proto.Id baseframe_id = 1;
  if (has_baseframe_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseframe_id(), target);
  }

  // optional .common.proto.Id root_vertex_id = 2;
  if (has_root_vertex_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->root_vertex_id(), target);
  }

  // optional .aslam.proto.NCamera n_camera = 3;
  if (has_n_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->n_camera(), target);
  }

  // optional double gyro_noise_sigma = 4;
  if (has_gyro_noise_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gyro_noise_sigma(), target);
  }

  // optional double gyro_bias_sigma = 5;
  if (has_gyro_bias_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gyro_bias_sigma(), target);
  }

  // optional double acc_noise_sigma = 6;
  if (has_acc_noise_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acc_noise_sigma(), target);
  }

  // optional double acc_bias_sigma = 7;
  if (has_acc_bias_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_bias_sigma(), target);
  }

  // optional .vi_map_deprecated.proto.Mission.BackBone backbone = 8 [default = kViwls];
  if (has_backbone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->backbone(), target);
  }

  // repeated .common.proto.Id mission_resource_ids = 9;
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mission_resource_ids(i), target);
  }

  // repeated int32 mission_resource_types = 10;
  for (int i = 0; i < this->mission_resource_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->mission_resource_types(i), target);
  }

  // optional .vi_map_deprecated.proto.ImuSigmas imu_sigmas = 11;
  if (has_imu_sigmas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->imu_sigmas(), target);
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 12;
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->optional_camera_resources(i), target);
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 13;
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->optional_cameras_with_extrinsics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id baseframe_id = 1;
    if (has_baseframe_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseframe_id());
    }

    // optional .common.proto.Id root_vertex_id = 2;
    if (has_root_vertex_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_vertex_id());
    }

    // optional .aslam.proto.NCamera n_camera = 3;
    if (has_n_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n_camera());
    }

    // optional double gyro_noise_sigma = 4;
    if (has_gyro_noise_sigma()) {
      total_size += 1 + 8;
    }

    // optional double gyro_bias_sigma = 5;
    if (has_gyro_bias_sigma()) {
      total_size += 1 + 8;
    }

    // optional double acc_noise_sigma = 6;
    if (has_acc_noise_sigma()) {
      total_size += 1 + 8;
    }

    // optional double acc_bias_sigma = 7;
    if (has_acc_bias_sigma()) {
      total_size += 1 + 8;
    }

    // optional .vi_map_deprecated.proto.Mission.BackBone backbone = 8 [default = kViwls];
    if (has_backbone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backbone());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .vi_map_deprecated.proto.ImuSigmas imu_sigmas = 11;
    if (has_imu_sigmas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imu_sigmas());
    }

  }
  // repeated .common.proto.Id mission_resource_ids = 9;
  total_size += 1 * this->mission_resource_ids_size();
  for (int i = 0; i < this->mission_resource_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_resource_ids(i));
  }

  // repeated int32 mission_resource_types = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->mission_resource_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mission_resource_types(i));
    }
    total_size += 1 * this->mission_resource_types_size() + data_size;
  }

  // repeated .opt_cam_res.proto.OptionalCameraResources optional_camera_resources = 12;
  total_size += 1 * this->optional_camera_resources_size();
  for (int i = 0; i < this->optional_camera_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_camera_resources(i));
  }

  // repeated .opt_cam_res.proto.CamerasWithExtrinsics optional_cameras_with_extrinsics = 13;
  total_size += 1 * this->optional_cameras_with_extrinsics_size();
  for (int i = 0; i < this->optional_cameras_with_extrinsics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_cameras_with_extrinsics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_resource_ids_.MergeFrom(from.mission_resource_ids_);
  mission_resource_types_.MergeFrom(from.mission_resource_types_);
  optional_camera_resources_.MergeFrom(from.optional_camera_resources_);
  optional_cameras_with_extrinsics_.MergeFrom(from.optional_cameras_with_extrinsics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseframe_id()) {
      mutable_baseframe_id()->::common::proto::Id::MergeFrom(from.baseframe_id());
    }
    if (from.has_root_vertex_id()) {
      mutable_root_vertex_id()->::common::proto::Id::MergeFrom(from.root_vertex_id());
    }
    if (from.has_n_camera()) {
      mutable_n_camera()->::aslam::proto::NCamera::MergeFrom(from.n_camera());
    }
    if (from.has_gyro_noise_sigma()) {
      set_gyro_noise_sigma(from.gyro_noise_sigma());
    }
    if (from.has_gyro_bias_sigma()) {
      set_gyro_bias_sigma(from.gyro_bias_sigma());
    }
    if (from.has_acc_noise_sigma()) {
      set_acc_noise_sigma(from.acc_noise_sigma());
    }
    if (from.has_acc_bias_sigma()) {
      set_acc_bias_sigma(from.acc_bias_sigma());
    }
    if (from.has_backbone()) {
      set_backbone(from.backbone());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_imu_sigmas()) {
      mutable_imu_sigmas()->::vi_map_deprecated::proto::ImuSigmas::MergeFrom(from.imu_sigmas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    std::swap(baseframe_id_, other->baseframe_id_);
    std::swap(root_vertex_id_, other->root_vertex_id_);
    std::swap(n_camera_, other->n_camera_);
    std::swap(gyro_noise_sigma_, other->gyro_noise_sigma_);
    std::swap(gyro_bias_sigma_, other->gyro_bias_sigma_);
    std::swap(acc_noise_sigma_, other->acc_noise_sigma_);
    std::swap(acc_bias_sigma_, other->acc_bias_sigma_);
    std::swap(backbone_, other->backbone_);
    mission_resource_ids_.Swap(&other->mission_resource_ids_);
    mission_resource_types_.Swap(&other->mission_resource_types_);
    std::swap(imu_sigmas_, other->imu_sigmas_);
    optional_camera_resources_.Swap(&other->optional_camera_resources_);
    optional_cameras_with_extrinsics_.Swap(&other->optional_cameras_with_extrinsics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptionalSensorExtrinsics::kIdFieldNumber;
const int OptionalSensorExtrinsics::kTSIFieldNumber;
const int OptionalSensorExtrinsics::kTSICovarianceFieldNumber;
const int OptionalSensorExtrinsics::kSensorTypeFieldNumber;
#endif  // !_MSC_VER

OptionalSensorExtrinsics::OptionalSensorExtrinsics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.OptionalSensorExtrinsics)
}

void OptionalSensorExtrinsics::InitAsDefaultInstance() {
  id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

OptionalSensorExtrinsics::OptionalSensorExtrinsics(const OptionalSensorExtrinsics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.OptionalSensorExtrinsics)
}

void OptionalSensorExtrinsics::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  sensor_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptionalSensorExtrinsics::~OptionalSensorExtrinsics() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  SharedDtor();
}

void OptionalSensorExtrinsics::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void OptionalSensorExtrinsics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptionalSensorExtrinsics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptionalSensorExtrinsics_descriptor_;
}

const OptionalSensorExtrinsics& OptionalSensorExtrinsics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

OptionalSensorExtrinsics* OptionalSensorExtrinsics::default_instance_ = NULL;

OptionalSensorExtrinsics* OptionalSensorExtrinsics::New() const {
  return new OptionalSensorExtrinsics;
}

void OptionalSensorExtrinsics::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_id()) {
      if (id_ != NULL) id_->::common::proto::Id::Clear();
    }
    sensor_type_ = 0u;
  }
  t_s_i_.Clear();
  t_s_i_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptionalSensorExtrinsics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_T_S_I;
        break;
      }

      // repeated double T_S_I = 2;
      case 2: {
        if (tag == 17) {
         parse_T_S_I:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_t_s_i())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_s_i())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_T_S_I;
        if (input->ExpectTag(25)) goto parse_T_S_I_covariance;
        break;
      }

      // repeated double T_S_I_covariance = 3;
      case 3: {
        if (tag == 25) {
         parse_T_S_I_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_t_s_i_covariance())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_s_i_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_T_S_I_covariance;
        if (input->ExpectTag(32)) goto parse_sensor_type;
        break;
      }

      // optional uint32 sensor_type = 4;
      case 4: {
        if (tag == 32) {
         parse_sensor_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_type_)));
          set_has_sensor_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  return false;
#undef DO_
}

void OptionalSensorExtrinsics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated double T_S_I = 2;
  for (int i = 0; i < this->t_s_i_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->t_s_i(i), output);
  }

  // repeated double T_S_I_covariance = 3;
  for (int i = 0; i < this->t_s_i_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->t_s_i_covariance(i), output);
  }

  // optional uint32 sensor_type = 4;
  if (has_sensor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.OptionalSensorExtrinsics)
}

::google::protobuf::uint8* OptionalSensorExtrinsics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  // optional .common.proto.Id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated double T_S_I = 2;
  for (int i = 0; i < this->t_s_i_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->t_s_i(i), target);
  }

  // repeated double T_S_I_covariance = 3;
  for (int i = 0; i < this->t_s_i_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->t_s_i_covariance(i), target);
  }

  // optional uint32 sensor_type = 4;
  if (has_sensor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.OptionalSensorExtrinsics)
  return target;
}

int OptionalSensorExtrinsics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional uint32 sensor_type = 4;
    if (has_sensor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_type());
    }

  }
  // repeated double T_S_I = 2;
  {
    int data_size = 0;
    data_size = 8 * this->t_s_i_size();
    total_size += 1 * this->t_s_i_size() + data_size;
  }

  // repeated double T_S_I_covariance = 3;
  {
    int data_size = 0;
    data_size = 8 * this->t_s_i_covariance_size();
    total_size += 1 * this->t_s_i_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptionalSensorExtrinsics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptionalSensorExtrinsics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptionalSensorExtrinsics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptionalSensorExtrinsics::MergeFrom(const OptionalSensorExtrinsics& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_s_i_.MergeFrom(from.t_s_i_);
  t_s_i_covariance_.MergeFrom(from.t_s_i_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::common::proto::Id::MergeFrom(from.id());
    }
    if (from.has_sensor_type()) {
      set_sensor_type(from.sensor_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptionalSensorExtrinsics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalSensorExtrinsics::CopyFrom(const OptionalSensorExtrinsics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalSensorExtrinsics::IsInitialized() const {

  return true;
}

void OptionalSensorExtrinsics::Swap(OptionalSensorExtrinsics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    t_s_i_.Swap(&other->t_s_i_);
    t_s_i_covariance_.Swap(&other->t_s_i_covariance_);
    std::swap(sensor_type_, other->sensor_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptionalSensorExtrinsics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptionalSensorExtrinsics_descriptor_;
  metadata.reflection = OptionalSensorExtrinsics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSMeasurementWGS::kTimestampNanosecondsFieldNumber;
const int GPSMeasurementWGS::kLatitudeDegFieldNumber;
const int GPSMeasurementWGS::kLongitudeDegFieldNumber;
const int GPSMeasurementWGS::kAltitudeMetersFieldNumber;
const int GPSMeasurementWGS::kSensorIdFieldNumber;
#endif  // !_MSC_VER

GPSMeasurementWGS::GPSMeasurementWGS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.GPSMeasurementWGS)
}

void GPSMeasurementWGS::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

GPSMeasurementWGS::GPSMeasurementWGS(const GPSMeasurementWGS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.GPSMeasurementWGS)
}

void GPSMeasurementWGS::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
  latitude_deg_ = 0;
  longitude_deg_ = 0;
  altitude_meters_ = 0;
  sensor_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSMeasurementWGS::~GPSMeasurementWGS() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.GPSMeasurementWGS)
  SharedDtor();
}

void GPSMeasurementWGS::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
  }
}

void GPSMeasurementWGS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSMeasurementWGS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSMeasurementWGS_descriptor_;
}

const GPSMeasurementWGS& GPSMeasurementWGS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

GPSMeasurementWGS* GPSMeasurementWGS::default_instance_ = NULL;

GPSMeasurementWGS* GPSMeasurementWGS::New() const {
  return new GPSMeasurementWGS;
}

void GPSMeasurementWGS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPSMeasurementWGS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(timestamp_nanoseconds_, altitude_meters_);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::common::proto::Id::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSMeasurementWGS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.GPSMeasurementWGS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanoseconds_)));
          set_has_timestamp_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude_deg;
        break;
      }

      // optional double latitude_deg = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
          set_has_latitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude_deg;
        break;
      }

      // optional double longitude_deg = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude_deg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
          set_has_longitude_deg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_altitude_meters;
        break;
      }

      // optional double altitude_meters = 4;
      case 4: {
        if (tag == 33) {
         parse_altitude_meters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_meters_)));
          set_has_altitude_meters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sensor_id;
        break;
      }

      // optional .common.proto.Id sensor_id = 5;
      case 5: {
        if (tag == 42) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.GPSMeasurementWGS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.GPSMeasurementWGS)
  return false;
#undef DO_
}

void GPSMeasurementWGS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.GPSMeasurementWGS)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanoseconds(), output);
  }

  // optional double latitude_deg = 2;
  if (has_latitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude_deg(), output);
  }

  // optional double longitude_deg = 3;
  if (has_longitude_deg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude_deg(), output);
  }

  // optional double altitude_meters = 4;
  if (has_altitude_meters()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitude_meters(), output);
  }

  // optional .common.proto.Id sensor_id = 5;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sensor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.GPSMeasurementWGS)
}

::google::protobuf::uint8* GPSMeasurementWGS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.GPSMeasurementWGS)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanoseconds(), target);
  }

  // optional double latitude_deg = 2;
  if (has_latitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude_deg(), target);
  }

  // optional double longitude_deg = 3;
  if (has_longitude_deg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude_deg(), target);
  }

  // optional double altitude_meters = 4;
  if (has_altitude_meters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude_meters(), target);
  }

  // optional .common.proto.Id sensor_id = 5;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sensor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.GPSMeasurementWGS)
  return target;
}

int GPSMeasurementWGS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanoseconds = 1;
    if (has_timestamp_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanoseconds());
    }

    // optional double latitude_deg = 2;
    if (has_latitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double longitude_deg = 3;
    if (has_longitude_deg()) {
      total_size += 1 + 8;
    }

    // optional double altitude_meters = 4;
    if (has_altitude_meters()) {
      total_size += 1 + 8;
    }

    // optional .common.proto.Id sensor_id = 5;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSMeasurementWGS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSMeasurementWGS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSMeasurementWGS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSMeasurementWGS::MergeFrom(const GPSMeasurementWGS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanoseconds()) {
      set_timestamp_nanoseconds(from.timestamp_nanoseconds());
    }
    if (from.has_latitude_deg()) {
      set_latitude_deg(from.latitude_deg());
    }
    if (from.has_longitude_deg()) {
      set_longitude_deg(from.longitude_deg());
    }
    if (from.has_altitude_meters()) {
      set_altitude_meters(from.altitude_meters());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::common::proto::Id::MergeFrom(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSMeasurementWGS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSMeasurementWGS::CopyFrom(const GPSMeasurementWGS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSMeasurementWGS::IsInitialized() const {

  return true;
}

void GPSMeasurementWGS::Swap(GPSMeasurementWGS* other) {
  if (other != this) {
    std::swap(timestamp_nanoseconds_, other->timestamp_nanoseconds_);
    std::swap(latitude_deg_, other->latitude_deg_);
    std::swap(longitude_deg_, other->longitude_deg_);
    std::swap(altitude_meters_, other->altitude_meters_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSMeasurementWGS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSMeasurementWGS_descriptor_;
  metadata.reflection = GPSMeasurementWGS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSMeasurementUTM::kTimestampNanosecondsFieldNumber;
const int GPSMeasurementUTM::kTRSFieldNumber;
const int GPSMeasurementUTM::kSensorIdFieldNumber;
#endif  // !_MSC_VER

GPSMeasurementUTM::GPSMeasurementUTM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.GPSMeasurementUTM)
}

void GPSMeasurementUTM::InitAsDefaultInstance() {
  sensor_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

GPSMeasurementUTM::GPSMeasurementUTM(const GPSMeasurementUTM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.GPSMeasurementUTM)
}

void GPSMeasurementUTM::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
  sensor_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSMeasurementUTM::~GPSMeasurementUTM() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.GPSMeasurementUTM)
  SharedDtor();
}

void GPSMeasurementUTM::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_id_;
  }
}

void GPSMeasurementUTM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSMeasurementUTM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSMeasurementUTM_descriptor_;
}

const GPSMeasurementUTM& GPSMeasurementUTM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

GPSMeasurementUTM* GPSMeasurementUTM::default_instance_ = NULL;

GPSMeasurementUTM* GPSMeasurementUTM::New() const {
  return new GPSMeasurementUTM;
}

void GPSMeasurementUTM::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    timestamp_nanoseconds_ = GOOGLE_LONGLONG(0);
    if (has_sensor_id()) {
      if (sensor_id_ != NULL) sensor_id_->::common::proto::Id::Clear();
    }
  }
  t_r_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSMeasurementUTM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.GPSMeasurementUTM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanoseconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanoseconds_)));
          set_has_timestamp_nanoseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_r_s;
        break;
      }

      // repeated double t_r_s = 2;
      case 2: {
        if (tag == 17) {
         parse_t_r_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_t_r_s())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_r_s())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_r_s;
        if (input->ExpectTag(26)) goto parse_sensor_id;
        break;
      }

      // optional .common.proto.Id sensor_id = 3;
      case 3: {
        if (tag == 26) {
         parse_sensor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.GPSMeasurementUTM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.GPSMeasurementUTM)
  return false;
#undef DO_
}

void GPSMeasurementUTM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.GPSMeasurementUTM)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanoseconds(), output);
  }

  // repeated double t_r_s = 2;
  for (int i = 0; i < this->t_r_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->t_r_s(i), output);
  }

  // optional .common.proto.Id sensor_id = 3;
  if (has_sensor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sensor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.GPSMeasurementUTM)
}

::google::protobuf::uint8* GPSMeasurementUTM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.GPSMeasurementUTM)
  // optional int64 timestamp_nanoseconds = 1;
  if (has_timestamp_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanoseconds(), target);
  }

  // repeated double t_r_s = 2;
  for (int i = 0; i < this->t_r_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->t_r_s(i), target);
  }

  // optional .common.proto.Id sensor_id = 3;
  if (has_sensor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sensor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.GPSMeasurementUTM)
  return target;
}

int GPSMeasurementUTM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanoseconds = 1;
    if (has_timestamp_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanoseconds());
    }

    // optional .common.proto.Id sensor_id = 3;
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_id());
    }

  }
  // repeated double t_r_s = 2;
  {
    int data_size = 0;
    data_size = 8 * this->t_r_s_size();
    total_size += 1 * this->t_r_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSMeasurementUTM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSMeasurementUTM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSMeasurementUTM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSMeasurementUTM::MergeFrom(const GPSMeasurementUTM& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_r_s_.MergeFrom(from.t_r_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanoseconds()) {
      set_timestamp_nanoseconds(from.timestamp_nanoseconds());
    }
    if (from.has_sensor_id()) {
      mutable_sensor_id()->::common::proto::Id::MergeFrom(from.sensor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSMeasurementUTM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSMeasurementUTM::CopyFrom(const GPSMeasurementUTM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSMeasurementUTM::IsInitialized() const {

  return true;
}

void GPSMeasurementUTM::Swap(GPSMeasurementUTM* other) {
  if (other != this) {
    std::swap(timestamp_nanoseconds_, other->timestamp_nanoseconds_);
    t_r_s_.Swap(&other->t_r_s_);
    std::swap(sensor_id_, other->sensor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSMeasurementUTM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSMeasurementUTM_descriptor_;
  metadata.reflection = GPSMeasurementUTM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionIdWithGPSWGSData::kMissionIdFieldNumber;
const int MissionIdWithGPSWGSData::kWgsMeasurementsFieldNumber;
#endif  // !_MSC_VER

MissionIdWithGPSWGSData::MissionIdWithGPSWGSData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
}

void MissionIdWithGPSWGSData::InitAsDefaultInstance() {
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

MissionIdWithGPSWGSData::MissionIdWithGPSWGSData(const MissionIdWithGPSWGSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
}

void MissionIdWithGPSWGSData::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionIdWithGPSWGSData::~MissionIdWithGPSWGSData() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  SharedDtor();
}

void MissionIdWithGPSWGSData::SharedDtor() {
  if (this != default_instance_) {
    delete mission_id_;
  }
}

void MissionIdWithGPSWGSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionIdWithGPSWGSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionIdWithGPSWGSData_descriptor_;
}

const MissionIdWithGPSWGSData& MissionIdWithGPSWGSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

MissionIdWithGPSWGSData* MissionIdWithGPSWGSData::default_instance_ = NULL;

MissionIdWithGPSWGSData* MissionIdWithGPSWGSData::New() const {
  return new MissionIdWithGPSWGSData;
}

void MissionIdWithGPSWGSData::Clear() {
  if (has_mission_id()) {
    if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
  }
  wgs_measurements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionIdWithGPSWGSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id mission_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wgs_measurements;
        break;
      }

      // repeated .vi_map_deprecated.proto.GPSMeasurementWGS wgs_measurements = 2;
      case 2: {
        if (tag == 18) {
         parse_wgs_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wgs_measurements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wgs_measurements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  return false;
#undef DO_
}

void MissionIdWithGPSWGSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_id(), output);
  }

  // repeated .vi_map_deprecated.proto.GPSMeasurementWGS wgs_measurements = 2;
  for (int i = 0; i < this->wgs_measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wgs_measurements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
}

::google::protobuf::uint8* MissionIdWithGPSWGSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_id(), target);
  }

  // repeated .vi_map_deprecated.proto.GPSMeasurementWGS wgs_measurements = 2;
  for (int i = 0; i < this->wgs_measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wgs_measurements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.MissionIdWithGPSWGSData)
  return target;
}

int MissionIdWithGPSWGSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated .vi_map_deprecated.proto.GPSMeasurementWGS wgs_measurements = 2;
  total_size += 1 * this->wgs_measurements_size();
  for (int i = 0; i < this->wgs_measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wgs_measurements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionIdWithGPSWGSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionIdWithGPSWGSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionIdWithGPSWGSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionIdWithGPSWGSData::MergeFrom(const MissionIdWithGPSWGSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  wgs_measurements_.MergeFrom(from.wgs_measurements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionIdWithGPSWGSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionIdWithGPSWGSData::CopyFrom(const MissionIdWithGPSWGSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionIdWithGPSWGSData::IsInitialized() const {

  return true;
}

void MissionIdWithGPSWGSData::Swap(MissionIdWithGPSWGSData* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    wgs_measurements_.Swap(&other->wgs_measurements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionIdWithGPSWGSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionIdWithGPSWGSData_descriptor_;
  metadata.reflection = MissionIdWithGPSWGSData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionIdWithGPSUTMData::kMissionIdFieldNumber;
const int MissionIdWithGPSUTMData::kUtmMeasurementsFieldNumber;
#endif  // !_MSC_VER

MissionIdWithGPSUTMData::MissionIdWithGPSUTMData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
}

void MissionIdWithGPSUTMData::InitAsDefaultInstance() {
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

MissionIdWithGPSUTMData::MissionIdWithGPSUTMData(const MissionIdWithGPSUTMData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
}

void MissionIdWithGPSUTMData::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionIdWithGPSUTMData::~MissionIdWithGPSUTMData() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  SharedDtor();
}

void MissionIdWithGPSUTMData::SharedDtor() {
  if (this != default_instance_) {
    delete mission_id_;
  }
}

void MissionIdWithGPSUTMData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionIdWithGPSUTMData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionIdWithGPSUTMData_descriptor_;
}

const MissionIdWithGPSUTMData& MissionIdWithGPSUTMData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

MissionIdWithGPSUTMData* MissionIdWithGPSUTMData::default_instance_ = NULL;

MissionIdWithGPSUTMData* MissionIdWithGPSUTMData::New() const {
  return new MissionIdWithGPSUTMData;
}

void MissionIdWithGPSUTMData::Clear() {
  if (has_mission_id()) {
    if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
  }
  utm_measurements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionIdWithGPSUTMData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id mission_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_utm_measurements;
        break;
      }

      // repeated .vi_map_deprecated.proto.GPSMeasurementUTM utm_measurements = 2;
      case 2: {
        if (tag == 18) {
         parse_utm_measurements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_utm_measurements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_utm_measurements;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  return false;
#undef DO_
}

void MissionIdWithGPSUTMData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_id(), output);
  }

  // repeated .vi_map_deprecated.proto.GPSMeasurementUTM utm_measurements = 2;
  for (int i = 0; i < this->utm_measurements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->utm_measurements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
}

::google::protobuf::uint8* MissionIdWithGPSUTMData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  // optional .common.proto.Id mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_id(), target);
  }

  // repeated .vi_map_deprecated.proto.GPSMeasurementUTM utm_measurements = 2;
  for (int i = 0; i < this->utm_measurements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->utm_measurements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.MissionIdWithGPSUTMData)
  return target;
}

int MissionIdWithGPSUTMData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

  }
  // repeated .vi_map_deprecated.proto.GPSMeasurementUTM utm_measurements = 2;
  total_size += 1 * this->utm_measurements_size();
  for (int i = 0; i < this->utm_measurements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utm_measurements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionIdWithGPSUTMData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionIdWithGPSUTMData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionIdWithGPSUTMData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionIdWithGPSUTMData::MergeFrom(const MissionIdWithGPSUTMData& from) {
  GOOGLE_CHECK_NE(&from, this);
  utm_measurements_.MergeFrom(from.utm_measurements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionIdWithGPSUTMData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionIdWithGPSUTMData::CopyFrom(const MissionIdWithGPSUTMData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionIdWithGPSUTMData::IsInitialized() const {

  return true;
}

void MissionIdWithGPSUTMData::Swap(MissionIdWithGPSUTMData* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    utm_measurements_.Swap(&other->utm_measurements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionIdWithGPSUTMData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionIdWithGPSUTMData_descriptor_;
  metadata.reflection = MissionIdWithGPSUTMData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSDataStorage::kMissionIdsWithGpsWgsDataFieldNumber;
const int GPSDataStorage::kMissionIdsWithGpsUtmDataFieldNumber;
#endif  // !_MSC_VER

GPSDataStorage::GPSDataStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.GPSDataStorage)
}

void GPSDataStorage::InitAsDefaultInstance() {
}

GPSDataStorage::GPSDataStorage(const GPSDataStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.GPSDataStorage)
}

void GPSDataStorage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSDataStorage::~GPSDataStorage() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.GPSDataStorage)
  SharedDtor();
}

void GPSDataStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPSDataStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSDataStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSDataStorage_descriptor_;
}

const GPSDataStorage& GPSDataStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

GPSDataStorage* GPSDataStorage::default_instance_ = NULL;

GPSDataStorage* GPSDataStorage::New() const {
  return new GPSDataStorage;
}

void GPSDataStorage::Clear() {
  mission_ids_with_gps_wgs_data_.Clear();
  mission_ids_with_gps_utm_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSDataStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.GPSDataStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vi_map_deprecated.proto.MissionIdWithGPSWGSData mission_ids_with_gps_wgs_data = 1;
      case 1: {
        if (tag == 10) {
         parse_mission_ids_with_gps_wgs_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_ids_with_gps_wgs_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mission_ids_with_gps_wgs_data;
        if (input->ExpectTag(18)) goto parse_mission_ids_with_gps_utm_data;
        break;
      }

      // repeated .vi_map_deprecated.proto.MissionIdWithGPSUTMData mission_ids_with_gps_utm_data = 2;
      case 2: {
        if (tag == 18) {
         parse_mission_ids_with_gps_utm_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_ids_with_gps_utm_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mission_ids_with_gps_utm_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.GPSDataStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.GPSDataStorage)
  return false;
#undef DO_
}

void GPSDataStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.GPSDataStorage)
  // repeated .vi_map_deprecated.proto.MissionIdWithGPSWGSData mission_ids_with_gps_wgs_data = 1;
  for (int i = 0; i < this->mission_ids_with_gps_wgs_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_ids_with_gps_wgs_data(i), output);
  }

  // repeated .vi_map_deprecated.proto.MissionIdWithGPSUTMData mission_ids_with_gps_utm_data = 2;
  for (int i = 0; i < this->mission_ids_with_gps_utm_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission_ids_with_gps_utm_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.GPSDataStorage)
}

::google::protobuf::uint8* GPSDataStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.GPSDataStorage)
  // repeated .vi_map_deprecated.proto.MissionIdWithGPSWGSData mission_ids_with_gps_wgs_data = 1;
  for (int i = 0; i < this->mission_ids_with_gps_wgs_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_ids_with_gps_wgs_data(i), target);
  }

  // repeated .vi_map_deprecated.proto.MissionIdWithGPSUTMData mission_ids_with_gps_utm_data = 2;
  for (int i = 0; i < this->mission_ids_with_gps_utm_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission_ids_with_gps_utm_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.GPSDataStorage)
  return target;
}

int GPSDataStorage::ByteSize() const {
  int total_size = 0;

  // repeated .vi_map_deprecated.proto.MissionIdWithGPSWGSData mission_ids_with_gps_wgs_data = 1;
  total_size += 1 * this->mission_ids_with_gps_wgs_data_size();
  for (int i = 0; i < this->mission_ids_with_gps_wgs_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_ids_with_gps_wgs_data(i));
  }

  // repeated .vi_map_deprecated.proto.MissionIdWithGPSUTMData mission_ids_with_gps_utm_data = 2;
  total_size += 1 * this->mission_ids_with_gps_utm_data_size();
  for (int i = 0; i < this->mission_ids_with_gps_utm_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_ids_with_gps_utm_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSDataStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSDataStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSDataStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSDataStorage::MergeFrom(const GPSDataStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_ids_with_gps_wgs_data_.MergeFrom(from.mission_ids_with_gps_wgs_data_);
  mission_ids_with_gps_utm_data_.MergeFrom(from.mission_ids_with_gps_utm_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSDataStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSDataStorage::CopyFrom(const GPSDataStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSDataStorage::IsInitialized() const {

  return true;
}

void GPSDataStorage::Swap(GPSDataStorage* other) {
  if (other != this) {
    mission_ids_with_gps_wgs_data_.Swap(&other->mission_ids_with_gps_wgs_data_);
    mission_ids_with_gps_utm_data_.Swap(&other->mission_ids_with_gps_utm_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSDataStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSDataStorage_descriptor_;
  metadata.reflection = GPSDataStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformationEdge::kFromFieldNumber;
const int TransformationEdge::kToFieldNumber;
const int TransformationEdge::kMissionIdFieldNumber;
const int TransformationEdge::kTABFieldNumber;
const int TransformationEdge::kTABCovarianceFieldNumber;
const int TransformationEdge::kOptionalSensorExtrinsicsIdFieldNumber;
#endif  // !_MSC_VER

TransformationEdge::TransformationEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.TransformationEdge)
}

void TransformationEdge::InitAsDefaultInstance() {
  from_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  to_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  mission_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
  optional_sensor_extrinsics_id_ = const_cast< ::common::proto::Id*>(&::common::proto::Id::default_instance());
}

TransformationEdge::TransformationEdge(const TransformationEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.TransformationEdge)
}

void TransformationEdge::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  mission_id_ = NULL;
  optional_sensor_extrinsics_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformationEdge::~TransformationEdge() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.TransformationEdge)
  SharedDtor();
}

void TransformationEdge::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
    delete mission_id_;
    delete optional_sensor_extrinsics_id_;
  }
}

void TransformationEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformationEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformationEdge_descriptor_;
}

const TransformationEdge& TransformationEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

TransformationEdge* TransformationEdge::default_instance_ = NULL;

TransformationEdge* TransformationEdge::New() const {
  return new TransformationEdge;
}

void TransformationEdge::Clear() {
  if (_has_bits_[0 / 32] & 39) {
    if (has_from()) {
      if (from_ != NULL) from_->::common::proto::Id::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::common::proto::Id::Clear();
    }
    if (has_mission_id()) {
      if (mission_id_ != NULL) mission_id_->::common::proto::Id::Clear();
    }
    if (has_optional_sensor_extrinsics_id()) {
      if (optional_sensor_extrinsics_id_ != NULL) optional_sensor_extrinsics_id_->::common::proto::Id::Clear();
    }
  }
  t_a_b_.Clear();
  t_a_b_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformationEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.TransformationEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.proto.Id from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .common.proto.Id to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mission_id;
        break;
      }

      // optional .common.proto.Id mission_id = 3;
      case 3: {
        if (tag == 26) {
         parse_mission_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        break;
      }

      // repeated double T_A_B = 4;
      case 4: {
        if (tag == 33) {
         parse_T_A_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_t_a_b())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_T_A_B;
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        break;
      }

      // repeated double T_A_B_covariance = 5;
      case 5: {
        if (tag == 41) {
         parse_T_A_B_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_t_a_b_covariance())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_t_a_b_covariance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_T_A_B_covariance;
        if (input->ExpectTag(50)) goto parse_optional_sensor_extrinsics_id;
        break;
      }

      // optional .common.proto.Id optional_sensor_extrinsics_id = 6;
      case 6: {
        if (tag == 50) {
         parse_optional_sensor_extrinsics_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_sensor_extrinsics_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.TransformationEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.TransformationEdge)
  return false;
#undef DO_
}

void TransformationEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.TransformationEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->from(), output);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->to(), output);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_id(), output);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->t_a_b(i), output);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->t_a_b_covariance(i), output);
  }

  // optional .common.proto.Id optional_sensor_extrinsics_id = 6;
  if (has_optional_sensor_extrinsics_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->optional_sensor_extrinsics_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.TransformationEdge)
}

::google::protobuf::uint8* TransformationEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.TransformationEdge)
  // optional .common.proto.Id from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->from(), target);
  }

  // optional .common.proto.Id to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->to(), target);
  }

  // optional .common.proto.Id mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_id(), target);
  }

  // repeated double T_A_B = 4;
  for (int i = 0; i < this->t_a_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->t_a_b(i), target);
  }

  // repeated double T_A_B_covariance = 5;
  for (int i = 0; i < this->t_a_b_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->t_a_b_covariance(i), target);
  }

  // optional .common.proto.Id optional_sensor_extrinsics_id = 6;
  if (has_optional_sensor_extrinsics_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->optional_sensor_extrinsics_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.TransformationEdge)
  return target;
}

int TransformationEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common.proto.Id from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from());
    }

    // optional .common.proto.Id to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to());
    }

    // optional .common.proto.Id mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_id());
    }

    // optional .common.proto.Id optional_sensor_extrinsics_id = 6;
    if (has_optional_sensor_extrinsics_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_sensor_extrinsics_id());
    }

  }
  // repeated double T_A_B = 4;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_size();
    total_size += 1 * this->t_a_b_size() + data_size;
  }

  // repeated double T_A_B_covariance = 5;
  {
    int data_size = 0;
    data_size = 8 * this->t_a_b_covariance_size();
    total_size += 1 * this->t_a_b_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformationEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformationEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformationEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformationEdge::MergeFrom(const TransformationEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_a_b_.MergeFrom(from.t_a_b_);
  t_a_b_covariance_.MergeFrom(from.t_a_b_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::common::proto::Id::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::common::proto::Id::MergeFrom(from.to());
    }
    if (from.has_mission_id()) {
      mutable_mission_id()->::common::proto::Id::MergeFrom(from.mission_id());
    }
    if (from.has_optional_sensor_extrinsics_id()) {
      mutable_optional_sensor_extrinsics_id()->::common::proto::Id::MergeFrom(from.optional_sensor_extrinsics_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformationEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationEdge::CopyFrom(const TransformationEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationEdge::IsInitialized() const {

  return true;
}

void TransformationEdge::Swap(TransformationEdge* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(mission_id_, other->mission_id_);
    t_a_b_.Swap(&other->t_a_b_);
    t_a_b_covariance_.Swap(&other->t_a_b_covariance_);
    std::swap(optional_sensor_extrinsics_id_, other->optional_sensor_extrinsics_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformationEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformationEdge_descriptor_;
  metadata.reflection = TransformationEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge::kViwlsFieldNumber;
const int Edge::kOdometryFieldNumber;
const int Edge::kLoopclosureFieldNumber;
const int Edge::kTransformationFieldNumber;
const int Edge::kLaserFieldNumber;
const int Edge::kTrajectoryFieldNumber;
#endif  // !_MSC_VER

Edge::Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.Edge)
}

void Edge::InitAsDefaultInstance() {
  viwls_ = const_cast< ::vi_map::proto::ViwlsEdge*>(&::vi_map::proto::ViwlsEdge::default_instance());
  odometry_ = const_cast< ::vi_map_deprecated::proto::TransformationEdge*>(&::vi_map_deprecated::proto::TransformationEdge::default_instance());
  loopclosure_ = const_cast< ::vi_map::proto::LoopclosureEdge*>(&::vi_map::proto::LoopclosureEdge::default_instance());
  transformation_ = const_cast< ::vi_map::proto::TransformationEdge*>(&::vi_map::proto::TransformationEdge::default_instance());
  laser_ = const_cast< ::vi_map::proto::LaserEdge*>(&::vi_map::proto::LaserEdge::default_instance());
  trajectory_ = const_cast< ::vi_map::proto::TrajectoryEdge*>(&::vi_map::proto::TrajectoryEdge::default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.Edge)
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  viwls_ = NULL;
  odometry_ = NULL;
  loopclosure_ = NULL;
  transformation_ = NULL;
  laser_ = NULL;
  trajectory_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != default_instance_) {
    delete viwls_;
    delete odometry_;
    delete loopclosure_;
    delete transformation_;
    delete laser_;
    delete trajectory_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New() const {
  return new Edge;
}

void Edge::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_viwls()) {
      if (viwls_ != NULL) viwls_->::vi_map::proto::ViwlsEdge::Clear();
    }
    if (has_odometry()) {
      if (odometry_ != NULL) odometry_->::vi_map_deprecated::proto::TransformationEdge::Clear();
    }
    if (has_loopclosure()) {
      if (loopclosure_ != NULL) loopclosure_->::vi_map::proto::LoopclosureEdge::Clear();
    }
    if (has_transformation()) {
      if (transformation_ != NULL) transformation_->::vi_map::proto::TransformationEdge::Clear();
    }
    if (has_laser()) {
      if (laser_ != NULL) laser_->::vi_map::proto::LaserEdge::Clear();
    }
    if (has_trajectory()) {
      if (trajectory_ != NULL) trajectory_->::vi_map::proto::TrajectoryEdge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vi_map.proto.ViwlsEdge viwls = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viwls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_odometry;
        break;
      }

      // optional .vi_map_deprecated.proto.TransformationEdge odometry = 2;
      case 2: {
        if (tag == 18) {
         parse_odometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loopclosure;
        break;
      }

      // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
      case 3: {
        if (tag == 26) {
         parse_loopclosure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loopclosure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transformation;
        break;
      }

      // optional .vi_map.proto.TransformationEdge transformation = 4;
      case 4: {
        if (tag == 34) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_laser;
        break;
      }

      // optional .vi_map.proto.LaserEdge laser = 5;
      case 5: {
        if (tag == 42) {
         parse_laser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_trajectory;
        break;
      }

      // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
      case 6: {
        if (tag == 50) {
         parse_trajectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.Edge)
  // optional .vi_map.proto.ViwlsEdge viwls = 1;
  if (has_viwls()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->viwls(), output);
  }

  // optional .vi_map_deprecated.proto.TransformationEdge odometry = 2;
  if (has_odometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->odometry(), output);
  }

  // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
  if (has_loopclosure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loopclosure(), output);
  }

  // optional .vi_map.proto.TransformationEdge transformation = 4;
  if (has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transformation(), output);
  }

  // optional .vi_map.proto.LaserEdge laser = 5;
  if (has_laser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->laser(), output);
  }

  // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
  if (has_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trajectory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.Edge)
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.Edge)
  // optional .vi_map.proto.ViwlsEdge viwls = 1;
  if (has_viwls()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->viwls(), target);
  }

  // optional .vi_map_deprecated.proto.TransformationEdge odometry = 2;
  if (has_odometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->odometry(), target);
  }

  // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
  if (has_loopclosure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loopclosure(), target);
  }

  // optional .vi_map.proto.TransformationEdge transformation = 4;
  if (has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transformation(), target);
  }

  // optional .vi_map.proto.LaserEdge laser = 5;
  if (has_laser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->laser(), target);
  }

  // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
  if (has_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trajectory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.Edge)
  return target;
}

int Edge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vi_map.proto.ViwlsEdge viwls = 1;
    if (has_viwls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viwls());
    }

    // optional .vi_map_deprecated.proto.TransformationEdge odometry = 2;
    if (has_odometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometry());
    }

    // optional .vi_map.proto.LoopclosureEdge loopclosure = 3;
    if (has_loopclosure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loopclosure());
    }

    // optional .vi_map.proto.TransformationEdge transformation = 4;
    if (has_transformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformation());
    }

    // optional .vi_map.proto.LaserEdge laser = 5;
    if (has_laser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser());
    }

    // optional .vi_map.proto.TrajectoryEdge trajectory = 6;
    if (has_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viwls()) {
      mutable_viwls()->::vi_map::proto::ViwlsEdge::MergeFrom(from.viwls());
    }
    if (from.has_odometry()) {
      mutable_odometry()->::vi_map_deprecated::proto::TransformationEdge::MergeFrom(from.odometry());
    }
    if (from.has_loopclosure()) {
      mutable_loopclosure()->::vi_map::proto::LoopclosureEdge::MergeFrom(from.loopclosure());
    }
    if (from.has_transformation()) {
      mutable_transformation()->::vi_map::proto::TransformationEdge::MergeFrom(from.transformation());
    }
    if (from.has_laser()) {
      mutable_laser()->::vi_map::proto::LaserEdge::MergeFrom(from.laser());
    }
    if (from.has_trajectory()) {
      mutable_trajectory()->::vi_map::proto::TrajectoryEdge::MergeFrom(from.trajectory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other != this) {
    std::swap(viwls_, other->viwls_);
    std::swap(odometry_, other->odometry_);
    std::swap(loopclosure_, other->loopclosure_);
    std::swap(transformation_, other->transformation_);
    std::swap(laser_, other->laser_);
    std::swap(trajectory_, other->trajectory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIMap::kVertexIdsFieldNumber;
const int VIMap::kVerticesFieldNumber;
const int VIMap::kEdgeIdsFieldNumber;
const int VIMap::kEdgesFieldNumber;
const int VIMap::kMissionIdsFieldNumber;
const int VIMap::kMissionsFieldNumber;
const int VIMap::kMissionBaseFrameIdsFieldNumber;
const int VIMap::kMissionBaseFramesFieldNumber;
const int VIMap::kLandmarkIndexIdsFieldNumber;
const int VIMap::kLandmarkIndexFieldNumber;
const int VIMap::kOptionalSensorsExtrinsicsFieldNumber;
const int VIMap::kGpsDataStorageFieldNumber;
#endif  // !_MSC_VER

VIMap::VIMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vi_map_deprecated.proto.VIMap)
}

void VIMap::InitAsDefaultInstance() {
  gps_data_storage_ = const_cast< ::vi_map_deprecated::proto::GPSDataStorage*>(&::vi_map_deprecated::proto::GPSDataStorage::default_instance());
}

VIMap::VIMap(const VIMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:vi_map_deprecated.proto.VIMap)
}

void VIMap::SharedCtor() {
  _cached_size_ = 0;
  gps_data_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIMap::~VIMap() {
  // @@protoc_insertion_point(destructor:vi_map_deprecated.proto.VIMap)
  SharedDtor();
}

void VIMap::SharedDtor() {
  if (this != default_instance_) {
    delete gps_data_storage_;
  }
}

void VIMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIMap_descriptor_;
}

const VIMap& VIMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vi_2dmap_2fvi_5fmap_5fdeprecated_2eproto();
  return *default_instance_;
}

VIMap* VIMap::default_instance_ = NULL;

VIMap* VIMap::New() const {
  return new VIMap;
}

void VIMap::Clear() {
  if (has_gps_data_storage()) {
    if (gps_data_storage_ != NULL) gps_data_storage_->::vi_map_deprecated::proto::GPSDataStorage::Clear();
  }
  vertex_ids_.Clear();
  vertices_.Clear();
  edge_ids_.Clear();
  edges_.Clear();
  mission_ids_.Clear();
  missions_.Clear();
  mission_base_frame_ids_.Clear();
  mission_base_frames_.Clear();
  landmark_index_ids_.Clear();
  landmark_index_.Clear();
  optional_sensors_extrinsics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vi_map_deprecated.proto.VIMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .common.proto.Id vertex_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_vertex_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertex_ids;
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated .vi_map.proto.ViwlsVertex vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        if (input->ExpectTag(26)) goto parse_edge_ids;
        break;
      }

      // repeated .common.proto.Id edge_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_edge_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_edge_ids;
        if (input->ExpectTag(34)) goto parse_edges;
        break;
      }

      // repeated .vi_map.proto.Edge edges = 4;
      case 4: {
        if (tag == 34) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_edges;
        if (input->ExpectTag(42)) goto parse_mission_ids;
        break;
      }

      // repeated .common.proto.Id mission_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_mission_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mission_ids;
        if (input->ExpectTag(50)) goto parse_missions;
        break;
      }

      // repeated .vi_map_deprecated.proto.Mission missions = 6;
      case 6: {
        if (tag == 50) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_missions;
        if (input->ExpectTag(58)) goto parse_mission_base_frame_ids;
        break;
      }

      // repeated .common.proto.Id mission_base_frame_ids = 7;
      case 7: {
        if (tag == 58) {
         parse_mission_base_frame_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_base_frame_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mission_base_frame_ids;
        if (input->ExpectTag(66)) goto parse_mission_base_frames;
        break;
      }

      // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
      case 8: {
        if (tag == 66) {
         parse_mission_base_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_base_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mission_base_frames;
        if (input->ExpectTag(74)) goto parse_landmark_index_ids;
        break;
      }

      // repeated .common.proto.Id landmark_index_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_landmark_index_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_index_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_landmark_index_ids;
        if (input->ExpectTag(82)) goto parse_landmark_index;
        break;
      }

      // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
      case 10: {
        if (tag == 82) {
         parse_landmark_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_landmark_index;
        if (input->ExpectTag(122)) goto parse_optional_sensors_extrinsics;
        break;
      }

      // repeated .vi_map_deprecated.proto.OptionalSensorExtrinsics optional_sensors_extrinsics = 15;
      case 15: {
        if (tag == 122) {
         parse_optional_sensors_extrinsics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_sensors_extrinsics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_optional_sensors_extrinsics;
        if (input->ExpectTag(130)) goto parse_gps_data_storage;
        break;
      }

      // optional .vi_map_deprecated.proto.GPSDataStorage gps_data_storage = 16;
      case 16: {
        if (tag == 130) {
         parse_gps_data_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_data_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vi_map_deprecated.proto.VIMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vi_map_deprecated.proto.VIMap)
  return false;
#undef DO_
}

void VIMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vi_map_deprecated.proto.VIMap)
  // repeated .common.proto.Id vertex_ids = 1;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertex_ids(i), output);
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  // repeated .common.proto.Id edge_ids = 3;
  for (int i = 0; i < this->edge_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge_ids(i), output);
  }

  // repeated .vi_map.proto.Edge edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edges(i), output);
  }

  // repeated .common.proto.Id mission_ids = 5;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_ids(i), output);
  }

  // repeated .vi_map_deprecated.proto.Mission missions = 6;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->missions(i), output);
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mission_base_frame_ids(i), output);
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mission_base_frames(i), output);
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->landmark_index_ids(i), output);
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  for (int i = 0; i < this->landmark_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->landmark_index(i), output);
  }

  // repeated .vi_map_deprecated.proto.OptionalSensorExtrinsics optional_sensors_extrinsics = 15;
  for (int i = 0; i < this->optional_sensors_extrinsics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->optional_sensors_extrinsics(i), output);
  }

  // optional .vi_map_deprecated.proto.GPSDataStorage gps_data_storage = 16;
  if (has_gps_data_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gps_data_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:vi_map_deprecated.proto.VIMap)
}

::google::protobuf::uint8* VIMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:vi_map_deprecated.proto.VIMap)
  // repeated .common.proto.Id vertex_ids = 1;
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertex_ids(i), target);
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  // repeated .common.proto.Id edge_ids = 3;
  for (int i = 0; i < this->edge_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge_ids(i), target);
  }

  // repeated .vi_map.proto.Edge edges = 4;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edges(i), target);
  }

  // repeated .common.proto.Id mission_ids = 5;
  for (int i = 0; i < this->mission_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mission_ids(i), target);
  }

  // repeated .vi_map_deprecated.proto.Mission missions = 6;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->missions(i), target);
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mission_base_frame_ids(i), target);
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mission_base_frames(i), target);
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->landmark_index_ids(i), target);
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  for (int i = 0; i < this->landmark_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->landmark_index(i), target);
  }

  // repeated .vi_map_deprecated.proto.OptionalSensorExtrinsics optional_sensors_extrinsics = 15;
  for (int i = 0; i < this->optional_sensors_extrinsics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->optional_sensors_extrinsics(i), target);
  }

  // optional .vi_map_deprecated.proto.GPSDataStorage gps_data_storage = 16;
  if (has_gps_data_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gps_data_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vi_map_deprecated.proto.VIMap)
  return target;
}

int VIMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .vi_map_deprecated.proto.GPSDataStorage gps_data_storage = 16;
    if (has_gps_data_storage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_data_storage());
    }

  }
  // repeated .common.proto.Id vertex_ids = 1;
  total_size += 1 * this->vertex_ids_size();
  for (int i = 0; i < this->vertex_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex_ids(i));
  }

  // repeated .vi_map.proto.ViwlsVertex vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .common.proto.Id edge_ids = 3;
  total_size += 1 * this->edge_ids_size();
  for (int i = 0; i < this->edge_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge_ids(i));
  }

  // repeated .vi_map.proto.Edge edges = 4;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  // repeated .common.proto.Id mission_ids = 5;
  total_size += 1 * this->mission_ids_size();
  for (int i = 0; i < this->mission_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_ids(i));
  }

  // repeated .vi_map_deprecated.proto.Mission missions = 6;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  // repeated .common.proto.Id mission_base_frame_ids = 7;
  total_size += 1 * this->mission_base_frame_ids_size();
  for (int i = 0; i < this->mission_base_frame_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_base_frame_ids(i));
  }

  // repeated .vi_map.proto.MissionBaseframe mission_base_frames = 8;
  total_size += 1 * this->mission_base_frames_size();
  for (int i = 0; i < this->mission_base_frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_base_frames(i));
  }

  // repeated .common.proto.Id landmark_index_ids = 9;
  total_size += 1 * this->landmark_index_ids_size();
  for (int i = 0; i < this->landmark_index_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_index_ids(i));
  }

  // repeated .vi_map.proto.LandmarkToVertexReference landmark_index = 10;
  total_size += 1 * this->landmark_index_size();
  for (int i = 0; i < this->landmark_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landmark_index(i));
  }

  // repeated .vi_map_deprecated.proto.OptionalSensorExtrinsics optional_sensors_extrinsics = 15;
  total_size += 1 * this->optional_sensors_extrinsics_size();
  for (int i = 0; i < this->optional_sensors_extrinsics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_sensors_extrinsics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIMap::MergeFrom(const VIMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_ids_.MergeFrom(from.vertex_ids_);
  vertices_.MergeFrom(from.vertices_);
  edge_ids_.MergeFrom(from.edge_ids_);
  edges_.MergeFrom(from.edges_);
  mission_ids_.MergeFrom(from.mission_ids_);
  missions_.MergeFrom(from.missions_);
  mission_base_frame_ids_.MergeFrom(from.mission_base_frame_ids_);
  mission_base_frames_.MergeFrom(from.mission_base_frames_);
  landmark_index_ids_.MergeFrom(from.landmark_index_ids_);
  landmark_index_.MergeFrom(from.landmark_index_);
  optional_sensors_extrinsics_.MergeFrom(from.optional_sensors_extrinsics_);
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_gps_data_storage()) {
      mutable_gps_data_storage()->::vi_map_deprecated::proto::GPSDataStorage::MergeFrom(from.gps_data_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIMap::CopyFrom(const VIMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIMap::IsInitialized() const {

  return true;
}

void VIMap::Swap(VIMap* other) {
  if (other != this) {
    vertex_ids_.Swap(&other->vertex_ids_);
    vertices_.Swap(&other->vertices_);
    edge_ids_.Swap(&other->edge_ids_);
    edges_.Swap(&other->edges_);
    mission_ids_.Swap(&other->mission_ids_);
    missions_.Swap(&other->missions_);
    mission_base_frame_ids_.Swap(&other->mission_base_frame_ids_);
    mission_base_frames_.Swap(&other->mission_base_frames_);
    landmark_index_ids_.Swap(&other->landmark_index_ids_);
    landmark_index_.Swap(&other->landmark_index_);
    optional_sensors_extrinsics_.Swap(&other->optional_sensors_extrinsics_);
    std::swap(gps_data_storage_, other->gps_data_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIMap_descriptor_;
  metadata.reflection = VIMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace vi_map_deprecated

// @@protoc_insertion_point(global_scope)
